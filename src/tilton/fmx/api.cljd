(ns tilton.fmx.api
  (:require
    ["dart:io" :as io]
    ["package:flutter/foundation.dart" :as foundation]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/widgets.dart" :as w
     :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
    ["package:flutter/painting.dart" :as p]
    [tilton.mx.foundation :as mxf]
    [tilton.mx.base :refer [wtrx dp dpx mx-throw]]
    [tilton.mx.util :refer [atom?]]
    [tilton.mx.model.peek :refer [chk Model mref? minfo]]
    [tilton.mx.cell.base :refer [cinfo] :as cty]
    [tilton.mx.api :refer [rmap-set! rmap-meta-set! make mget mget? mkids mswap! cFkids] :as mx]
    [tilton.fmx.factory :refer [deftag deftags deftags-plus] :as fxf]))

(deftype CBAsIs [value]
  ;; tells fx-resolve to leave mx value untouched
  ;; used originally so a FX callback (the builder for AnimatedBuilder) was not
  ;; treated as callback to MX to get the resolved value.
  :extends mxf/MXImplementer)

(deftype CBToResolve [value]
  ;; tells fx-resolve to call the mx value as a function of ctx and me.
  ;; used where app needs to see the Flutter context to decide a value
  :extends mxf/MXImplementer)

(defn fx-resolve-mget? [me prop ctx]
  (fx-resolve prop me ctx
    (mget? me prop)))

(defn fx-resolve
  ([me ctx widget-value]
   (fx-resolve :anon me ctx widget-value))
  ([prop me ctx widget-value]
   ;(dp :resolving prop (minfo me) widget-value)
   (wtrx [0 1000 nil :RESO prop (minfo me)]
     (let [resolved
           (cond
             (nil? widget-value)
             (do
               (dpx :fx-res-nil!! prop)
               nil)

             (dart/is? widget-value CBAsIs)
             (do
               (dpx :fx-resolve-as-ising!!!!!!!!! prop (minfo me) widget-value)
               (.-value ^CBAsIs widget-value))

             (dart/is? widget-value CBToResolve)
             ;; in the past, a naked function given, say, to onPress would be
             ;; called like (naked-fn me ctx), but with v2 it simply gets passed
             ;; as the onPress, so we have to do call a CBToResolve value here and
             ;; then give that recursively to fx-resolve. So if the (cb-val me ctx) below
             ;; returns a function, /that/ will be passed on to Flutter as is. ie CBToResolve
             ;; exists so we can use params me and ctx to decide the handler to be given to Flutter.
             (let [val ^CBToResolve widget-value]
               (dpx :fx-reso-calling-back!!!!!!! prop (minfo me) widget-value)
               (let [cb-val (.-value val)]                  ;; ^CBToResolve widget-value)]
                 (dpx :CBToResolveyields cb-val)
                 (let [v (cb-val me ctx)]
                   (dpx :recuring-unwrapped-fn?-return-val v)
                   (fx-resolve prop me ctx v))
                 #_(fx-resolve prop me ctx cb-val)))

             (dart/is? widget-value m/Widget)
             (do
               (dpx :widget-value-is-widget widget-value)
               widget-value)

             (fn? widget-value)
             (do
               (dpx :fxreso-allowing-naked-fn? widget-value prop (mx/minfo me))
               widget-value)

             (cty/c-ref? widget-value)
             (mx-throw (str "fx-resolve sees Cell! " (cinfo widget-value)))

             (mref? widget-value)
             (do
               (dpx :fxres-sees-mref (minfo widget-value))
               (let [fx (fx-render ctx widget-value)]
                 (dpx :rfx-mdref-yielded-flutter fx)
                 fx))

             (vector? widget-value)
             (do (dpx :fxres-seq!!!! prop (count widget-value))
                 (let [rzd (doall (map (partial fx-resolve me ctx) widget-value))]
                   (dpx :vec-rez rzd)
                   rzd))

             :default (do (dpx :fxres-fall-thru-passthru prop (minfo me) widget-value
                            (when (atom? widget-value)
                              (deref widget-value)))
                          widget-value))]
       ;;(dp :resolved prop resolved)
       resolved))))

(defn ctx-page-push
  ([ctx fx-page-def]
   (ctx-page-push ctx fx-page-def nil))
  ([ctx fx-page-def name]
   (.push (-> ctx m/Navigator.of)
     (#/(m/MaterialPageRoute Object)
       .settings (m/RouteSettings .name name)
       .builder (fn [my-ctx]
                  (fx-render my-ctx
                    (if (fn? fx-page-def)
                      (fx-page-def my-ctx)
                      fx-page-def)))))))

(defn ctx-page-pop [ctx]
  (.pop (-> ctx m/Navigator.of)))

(defn fx-render [ctx fx]
  (wtrx [0 999 nil :render-entry (minfo fx)]
    (cond
      (not (mref? fx))
      (cond
        (cty/c-ref? fx)
        (mx-throw (str "fx-render passed Cell " (deref fx)))
        :default (do
                   #_(when-not (string? fx)
                       (dp :render-sees-not-mref?-passing-thru fx))
                   fx))
      :else (let [gen (mget fx :fx-gen)]
              (dpx :render-sees-gen!! gen)
              (chk gen "OBAD: fx-render of model finds no fx-gen: ")
              ;;(dp :fx-render-records (minfo fx) ctx)
              ;; nope (fxf/record-fx$ctx fx ctx)
              (let [g (gen fx ctx)]
                (dpx :render-genned!!! g)
                (rmap-meta-set! [:fx-dom fx] g)
                g)))))

(defmacro in-my-context [[me-var ctx-var] & body]
  `(tilton.fmx.api/->CBToResolve
     (fn [~me-var ~ctx-var]
       ~@body)))

(defmacro when-my-state [[state-var] & body]
  `(when-let [~state-var (tilton.fmx.api/my-state)]
     ~@body))

(defn ctx-nav [ctx]
  (m/Navigator.of ctx))

(defmacro my-controller []
  `^m/AnimationController? (tilton.mx.api/mget ~'me :controller))

(defn standard-text-value-controller [me]
  ;; usage: (fx/text {:controller (cF (standard-text-value-controller me))}....
  (let [c (m/TextEditingController
            .text (mx/mget me :value))]
    (.addListener c
      (fn []
        (cty/with-mx-isolation
          (mx/mset! me :value (.-text c)))))
    c))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tilton.mx.api/mget ~'me :animation))

(defmacro my-state []
  `(tilton.mx.api/mget ~'me :fx$state))

;;; ---- sundry factories per Flutter variation on statefulness, child/children/content/body ------------------

(deftags-plus tilton.fmx.factory/konly-prop [:child]
  (dropdown-menu-item m/DropdownMenuItem)
  (theme m/Theme)
  (icon-theme m/IconTheme)
  (material m/Material)
  (fade-transition m/FadeTransition)
  (listener w/Listener)
  (mouse-region w/MouseRegion)
  (ink-well m/InkWell)
  (ignore-pointer w/IgnorePointer)
  (absorb-pointer w/AbsorbPointer)
  (container m/Container)
  (card m/Card)
  (padding m/Padding)
  ;; (center m/Center)
  (place-holder w/PlaceHolder)
  (single-child-scroll-view m/SingleChildScrollView)
  (expanded m/Expanded)
  (preferred-size m/PreferredSize)
  (animated-opacity m/AnimatedOpacity)
  (drawer-header m/DrawerHeader)
  ;; (floating-action-button m/FloatingActionButton)
  (align m/Align)
  (visibility m/Visibility)
  (drawer m/Drawer)
  (sized-box m/SizedBox)
  (opacity m/Opacity)
  (ink m/Ink)
  (gesture-detector m/GestureDetector))

(deftags tilton.fmx.factory/kidless-childless
  (app-bar m/AppBar)
  (data-table m/DataTable)
  (text-style p/TextStyle)
  (rounded-rectangle-border p/RoundedRectangleBorder)
  (list-tile m/ListTile)
  (layout-builder w/LayoutBuilder)
  (flutter-logo m/FlutterLogo)
  (bottom-navigation-bar-item w/BottomNavigationBarItem)
  (navigation-rail-destination w/NavigationRailDestination))

(deftags tilton.fmx.factory/kidless-childless
  (slider m/Slider)
  (dropdown-button m/DropdownButton)
  (future-builder m/FutureBuilder)
  (text-field m/TextField)
  (check-box m/Checkbox)
  (elevated-button+icon m/ElevatedButton.icon)
  (icon-button m/IconButton))

(deftag tilton.fmx.factory/konly-param1 text m/Text)

(deftag tilton.fmx.factory/konly-prop material-app m/MaterialApp :home)
(deftag tilton.fmx.factory/konly-prop scaffold m/Scaffold :body)
(deftag tilton.fmx.factory/konly-prop alert-dialog m/AlertDialog :content)

(deftags-plus tilton.fmx.factory/konly-prop [:child]
  (animated-container m/AnimatedContainer)
  (center m/Center)
  (hero m/Hero)
  (floating-action-button m/FloatingActionButton)
  (ink! m/Ink)
  (popup-menu-button m/PopupMenuButton)
  (popup-menu-item m/PopupMenuItem)
  (opacity! m/Opacity)
  (focus m/Focus)
  (safe-area w/SafeArea)
  (ticker-mode w/TickerMode)
  (dismissible w/Dismissible)
  (elevated-button m/ElevatedButton)
  (default-tab-controller m/DefaultTabController)
  (focus m/Focus)
  (focus-scope m/FocusScope)
  (text-button m/TextButton)
  (focus+focus-node m/Focus.withExternalFocusNode)
  (animated-builder m/AnimatedBuilder))

(deftags-plus tilton.fmx.factory/kids-prop [:children]
  (stack m/Stack)
  (column m/Column)
  (row m/Row)
  (list-view m/ListView)
  (grid-view+count m/GridView.count)
  (wrap w/Wrap))

(deftag tilton.fmx.factory/kids-prop
  navigation-rail m/NavigationRail :destinations)

(deftag tilton.fmx.factory/kids-prop
  bottom-navigation-bar m/BottomNavigationBar :items)

(deftag tilton.fmx.factory/prop-param1-kidless icon m/Icon :icon)

;(deftag tilton.fmx.factory/childless-stateful snack-bar m/SnackBar)

;;; --- UNCONVERTED -------------------------------------

;; todo does snackbar still need this custom macro?
(deftag tilton.fmx.factory/childless-stateful-ex snack-bar m/SnackBar)

(deftag tilton.fmx.factory/kids-for-builder list-view+separated m/ListView.separated)
(deftag tilton.fmx.factory/kids-for-builder list-view+builder m/ListView.builder)


(deftag tilton.fmx.factory/konly-for-builder-stateless layout-kid-builder w/LayoutBuilder)

(deftag tilton.fmx.factory/konly-builder builder-ctx w/Builder)

;;; ---------------------------------------------------
;;; the dance between Flutter and MX is a bit intricate
;;; these macros try to hide the plumbing without being obscure.

(defmacro as-is [callback-fn]
  `(tilton.fmx.api/->CBAsIs
     ~callback-fn))

(defmacro with-ctx+as-is [[me ctx] callback-fn]
  `(tilton.fmx.api/in-my-context [~me ~ctx]
     (tilton.fmx.api/->CBAsIs
       ~callback-fn)))

(defmacro as-dart-callback [[& cb-params] & body]
  `(tilton.fmx.api/with-ctx+as-is [~'me ~'ctx]
     (fn [~@cb-params]
       (tilton.mx.cell.base/with-mx-isolation
         ~@body))))

(defmacro my-app []
  ;; fasc "captures" 'me
  `(tilton.mx.api/fasc :app))

;;; --- hot reload support --------------------

(defmacro wrap-stateless [widget-expression]
  `(reify :extends (w/StatelessWidget)
     (~'build [self# ctx#] ~widget-expression)))

(defmacro wrap-unique-key [widget-expression]
  `(reify :extends (m/StatefulWidget .key (foundation/UniqueKey))
     (~'createState [_#]
       (reify :extends w/State
         (~'build [_# ~'ctx]
           ~widget-expression)))))

(defmacro run-app [widget-expression]
  `(m/runApp
     (wrap-stateless
       (wrap-unique-key
         ~widget-expression))))

(defmacro run-fx-app [fx-app]
  `(m/runApp
     (wrap-stateless
       (wrap-unique-key
         (fx-render ~'ctx ~fx-app)))))

;;; --- environment ------------------------

(defn is-web? []
  foundation/kIsWeb)

(defn is-mobile? []
  (and (not (is-web?))
    ;; we cannot ask about Platform if on Web, so first ^^ we rule that out
    (or io/Platform.isAndroid
      io/Platform.isIOS)))

(defn is-desktop? []
  (and (not (is-web?))
    ;; we cannot ask about Platform if on Web, so first ^^ we rule that out
    (or io/Platform.isMacOS
      io/Platform.isWindows
      io/Platform.isLinux)))

(defn platform-category []
  (cond
    (is-web?) :web
    (is-desktop?) :desktop
    (is-mobile?) :mobile
    io/Platform.isFuchsia :fuchsia
    :else :unknown))