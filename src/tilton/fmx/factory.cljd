(ns tilton.fmx.factory
  (:require [clojure.string :as str]
            ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tilton.mx.base :refer [wtrx dprn dp dpx]]
            [tilton.mx.util
             :refer [atom? rmap-set! rmap-meta-set! set-ify difference]]
            [tilton.mx.foundation :refer [mx-type PObserver observe]]

            [tilton.mx.model.peek :refer [chk minfo Model]]
            [tilton.mx.cell.base :refer [dpc cinfo c-model] :as cty]
            [tilton.mx.api
             :refer [md-quiesce! md-quiesce-if-owned! rmap-meta-set!
                     mpar mref? make mget mget? mkids mswap! cI cFkids]
             :as mx]
            [clojure.string :as str]))

;;; --- developer debugging ---------------------------------
(def *fmx-debugger*
  "Atom holding an optional developer diagnostic callback.
  Eg (fn [opcode data]..)
  Where opcode will indicate trace event, and data will be a map varying by opcode."
  (atom nil))

(defn fmx-debugger-set! [fn]
  (dp :debug-fn!!! fn)
  (reset! *fmx-debugger* fn))

;;; --- Flutter refs of fx models -----------------------------

(defn call-with-flutter-ref [me ctx factory]
  (let [ref (factory)]
    ;; (dp :cwref!!!!!! ref)
    (tilton.fmx.factory/ctx-check me ctx)
    (rmap-meta-set! [:fx$flutter-ref me] ref)
    ref))

(defmacro with-flutter-ref [& body]
  `(call-with-flutter-ref ~'me ~'ctx (fn [] ~@body)))

(defn flutter-ref [me]
  (:fx$flutter-ref (meta me)))

;;; --- ctx tracking ----------------------

(defn record-fx$ctx [me ctx]
  (dpx :reco-CTX! (minfo me) ctx)
  (mx/rmap-meta-set! [:fx$ctx me] ctx))

(defn ctx-check
  ([me ctx] (ctx-check :anon me ctx))
  ([fx-class me ctx]
   (cond
     (nil? (fx-ctx me))
     (do
       (dpx :CTX-CHECK-NIL (str "<<" fx-class ">> NIL so adopting build ctx: <" ctx))
       (record-fx$ctx me ctx))

     (= ctx (fx-ctx me))
     (dpx :CTX-CHECK-OK! (str "<<" fx-class ">>  both ctx: <" ctx ">"))

     :else (do
             (dpx :CTX-CHECK-match-fail-being-corrected (str "<<" fx-class ">> adopting build ctx: <" ctx "> not= cache: <" (fx-ctx me) ">"))
             (record-fx$ctx me ctx)))))

(defn fx-ctx [me]
  (:fx$ctx (meta me)))

;;; --- state tracking -----------------

(defn fx-state-init [me state]
  (tilton.fmx.factory/record-fx$state me state)
  (when-let [init (tilton.mx.api/mget? me :initState)]
    (init state ~'me)))

(defn record-fx$state [me state]
  (dpx :recording-state (tilton.mx.cell.base/minfo me) cty/*defer-changes* cty/*within-integrity*)
  (mx/with-cc :reco-state
    (mx/mset! me :fx$state state)))

(defn fx-state-nearest [me]
  (dpx :state-nearest-entry (tilton.mx.cell.base/minfo me))
  (when me
    (if-let [st ^State? (mget? me :fx$state)]
      (do (dpx :nearest-st-bingo-from (minfo me))
          st)
      (when-let [st (fx-state-nearest (mx/mpar))]
        (dpx :got-nearest-st-JIT st (tilton.mx.cell.base/minfo me))
        ;; todo memoize instead
        ;; (mx/mset! me :fx$state st)                            ;; for next time
        st))))

;;; --- make fx ------------------------------------------

(defn make-fx [mx-type fx-props custom-props cFkids-form]
  (apply tilton.mx.model.core/make
    :mx-type mx-type
    :fx$state (cI nil)
    :fx$ikeys (remove #{:fx-class :fx-gen :name :key}
                (concat (keys fx-props) (keys custom-props)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(defn make-fx-dart-widget [fx-props custom-props & [cFkids-form]]
  (make-fx (new tilton.fmx.factory/FXDartWidget)
    fx-props custom-props cFkids-form))

(defn ^:macro-support fx-class-sym [fx-class]
  (symbol (second (clojure.string/split (str fx-class) #"/"))))

(defn ^:macro-support fx-props>mx [fx-props]
  (let [kvs (for [[k _] fx-props]
              [(symbol (str "." (name k)))
               `(tilton.fmx.api/fx-resolve ~k ~'me ~'ctx
                  (tilton.mx.api/mget ~'me ~k))])]
    (apply concat kvs)))

(def ^:dynamic *fx-building?* false)

(defn mark-rebuild [^w/Element elt me cell]
  (dpx :MNBuild-entry (minfo me) elt (deref *fmx-debugger*))
  (when-let [cb (deref *fmx-debugger*)]
    (cb :mark-rebuild-unless-defunct {:element elt :cell cell}))

  (when (not (.-debugIsDefunct elt))
    (dpx :MNBuild-MNB!!! (minfo me))
    (.markNeedsBuild elt)))

(defn trigger-build [me cell]
  (when-not *fx-building?*
    (if-let [^State? state (mget? me :fx$state)]
      (do (dpx :FXDWO-settingimmediatestate prop new-value (minfo me) (.-mounted state) (cinfo cell))
          (trigger-state state me))
      (do
        (if-let [^w/Element elt (fx-ctx me)]
          (do (dpx :FXDWO-direct-MNB prop new-value (minfo me))
              (mark-rebuild elt me cell))
          (dpx :FXDWO-NOT-MNBING-contextless prop new-value (minfo me)))
        (trigger-state-above (mpar))))))

(defn trigger-state-above [me]
  (when me
    (if-let [^State? state (mget? me :fx$state)]
      (do (dpx :FXDWO-settingimmediatestate prop new-value (minfo me) (.-mounted state))
          (trigger-state state me))
      (trigger-state-above (mpar)))))

(defn trigger-state
  ([^State state]
   (trigger-state state nil))
  ([^State state me]
   (if (.-mounted state)
     (do (dpx :TRG-STATE-setting-state!!!! state (minfo me))
         (.setState state (fn [] (do))))
     (dp :TRG-STATE_STATE_IGNORING_UNMOUNTED state (minfo me)))))

(defn md-quiesce-lost! [cell new-value prior-value]
  ;; sloppy
  (when (mx/md-quiesce-feature?)
    (when prior-value
      (cond
        (mref? prior-value) (wtrx [0 999 nil :mdq-lost-solo!!!!!!! (cinfo cell) :prior (minfo prior-value)]
                              (md-quiesce-if-owned! (c-model cell) prior-value))
        (coll? new-value) (cond
                            (coll? prior-value)
                            (let [lost (difference (set prior-value) (set new-value))]
                              (when-not (empty? lost)
                                (doseq [md lost]
                                  (when (mref? md)
                                    (wtrx [0 999 nil :mdq-lost-coll-diff (cinfo cell) :lostk (minfo md)]
                                      (md-quiesce-if-owned! (c-model cell) md))))))
                            :else (when (mref? prior-value)
                                    (when-not (some #{prior-value} new-value)
                                      (wtrx [0 999 nil :mdq-solo-not-in-coll (cinfo cell) :solo (minfo prior-value)]
                                        (md-quiesce-if-owned! (c-model cell) prior-value)))))))))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this prop me new-value prior-value cell]
    (dpx :fxdw-obs prop)
    (when-not (= prior-value cty/unbound)
      (when-not (some #{prop} [:parent :name :mx-type :on-quiesce :initState :fx-class :cells-flushed
                               :fx$state :fx$ikeys :fx$notifier :fx$observer :ui/a-ctx])
        (dpx :FXDartWidget-observing!!! prop)
        (dpx :FXDartWidget-observing!!! prop new-value prior-value (minfo me) (cinfo cell))
        (dpx :FXDartWidget-observing-md!!! prop (minfo me) #_#_:deref @me)
        (when true                                          ;; (= prop :kids)
          (dpc cell :quiesce :FXDartWidget-observing-cell-change!!! prop))
        (when-let [noter (mget? me :fx$notifier)]
          (.notifyListeners ^m/ChangeNotifier noter))
        (md-quiesce-lost! cell new-value prior-value)

        (trigger-build me cell)))))

;;; --- the maker macros ---------------------------------------------------

(defmacro make-fx-snackbar [fx-class fx-props mx-props & children]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [~'me ctx]
                   (reify :extends (~fx-class #_m/SnackBar
                                     ~@(let [kvs (for [[k# _#] fx-props]
                                                   [(symbol (str "." (name k#)))
                                                    `(tilton.fmx.api/fx-resolve ~k# ~'me ctx
                                                       (tilton.mx.model.core/mget ~'me ~k#))])]
                                         (apply concat kvs)))
                     ^#/(w/State ~fx-class #_m/SnackBar)
                     (~'createState [_#]
                       (reify :extends #/(w/State #_~fx-class m/SnackBar)
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (tilton.fmx.factory/with-flutter-ref
                             (~fx-class                     ;; /SnackBar
                               ~@(fx-props>mx fx-props))))))))))))

(defmacro k1-child-stateful [fx-class fx-props mx-props & [child]]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tilton.fmx.api/fx-resolve-mget? ~'me :key ~'ctx))
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin ;; todo make optional
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (let [k1# (tilton.fmx.api/fx-resolve :kid1 ~'me ~'ctx
                                       (first (tilton.mx.model.core/mkids ~'me)))]
                             (tilton.fmx.factory/with-flutter-ref
                               (~fx-class .child k1#
                                 ~@(fx-props>mx fx-props))))))))))
       (tilton.mx.api/cFkids ~child))))

(defmacro k1-child-stateless [fx-class fx-props mx-props & [child]]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       .child (tilton.fmx.api/fx-resolve :kid1 ~'me ~'ctx
                                (first (tilton.mx.model.core/mkids ~'me)))
                       ~@(fx-props>mx fx-props)))))
       (tilton.mx.model.core/cFkids ~child))))

(defmacro k1-content-stateless [fx-class fx-props mx-props & [child]]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       .content (tilton.fmx.api/fx-resolve :kid1 ~'me ~'ctx
                                  (first (tilton.mx.model.core/mkids ~'me)))
                       ~@(fx-props>mx fx-props)))))
       (tilton.mx.model.core/cFkids ~child))))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let [fname (symbol (second (clojure.string/split (str fx-class) #"/")))]
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       .children (mapv (partial tilton.fmx.api/fx-render ~'ctx)
                                   (tilton.mx.api/mkids ~'me))
                       ~@(fx-props>mx fx-props)))))
       (tilton.mx.api/cFkids ~@children))))

(defmacro kids->prop-stateless [target-prop-name fx-class fx-props mx-props & children]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       ~(symbol (str "." (name target-prop-name)))
                       (mapv (partial tilton.fmx.api/fx-render ~'ctx)
                         (tilton.mx.api/mkids ~'me))
                       ~@(fx-props>mx fx-props)))))
       (tilton.mx.api/cFkids ~@children))))

(defmacro kids->prop-stateful [target-prop-name fx-class fx-props mx-props & children]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tilton.fmx.api/fx-resolve-mget? ~'me :key ~'ctx))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (tilton.fmx.factory/with-flutter-ref
                             (~fx-class
                               ~(symbol (str "." (name target-prop-name)))
                               (mapv (partial tilton.fmx.api/fx-render ~'ctx)
                                 (tilton.mx.api/mkids ~'me))
                               ~@(fx-props>mx fx-props)))))))))
       (tilton.mx.api/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn ~(fx-class-sym fx-class) [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       ~@(fx-props>mx fx-props))))))))

(defmacro konly-param1-stateless [fx-class fx-props mx-props only-kid]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :_param-1 (tilton.mx.cell.core/cF ~only-kid)
         :fx-class (quote ~fx-class)
         :fx-gen (fn ~(fx-class-sym fx-class) [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class (tilton.fmx.api/fx-render ~'ctx
                                  (tilton.mx.api/mget ~'me :_param-1))
                       ~@(fx-props>mx fx-props))))))))

(defmacro konly-for-builder-stateless [fx-class fx-props mx-props only-kid]
  (let []
    `(tilton.fmx.factory/make-fx
       (new tilton.fmx.factory/FXDartWidget)
       (assoc ~fx-props
         :builder (tilton.mx.api/cF
                    (fn [ctx box-constraints]
                      ;; the layout builder wants back a native Flutter widget, so we have to do the conversion
                      ;; from f/mx proxy to Flutter ourselves, sth normally midden by f/mx macrology.
                      ;; with iso?
                      (binding [tilton.fmx.factory/*fx-building?* true]
                        (tilton.mx.model.core/mset! ~'me :box-constraints box-constraints)) ;; ...and convert box argument to reactive input
                      (fx/fx-render ctx (first (tilton.mx.api/mkids ~'me))))))
       (assoc ~mx-props
         :box-constraints (tilton.mx.cell.core/cI nil)
         :fx-class (quote ~fx-class)
         :fx-gen (fn ~(fx-class-sym fx-class) [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       ~@(let [kvs (for [k# (conj (keys fx-props) :builder)]
                                     [(symbol (str "." (name k#)))
                                      `(tilton.fmx.api/fx-resolve-mget? ~'me ~k# ~'ctx)])]
                           (apply concat kvs))))))
       (tilton.mx.api/cFkids ~only-kid))))

(defmacro childless-stateful [fx-class fx-props mx-props]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn ~(fx-class-sym fx-class) [~'me ~'ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tilton.fmx.api/fx-resolve-mget? ~'me :key ~'ctx))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (tilton.fmx.factory/with-flutter-ref
                             (~fx-class
                               ~@(fx-props>mx fx-props))))))))))))

(defmacro k1-body-stateful [fx-class fx-props mx-props & [body]]
  (let []
    (assert (not (contains? fx-props :body))
      (str "For " fx-class ", provide the body as (the only) child widget, not as a parameter."))
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tilton.fmx.api/fx-resolve-mget? ~'me :key ~'ctx))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (let [bod# (tilton.fmx.api/fx-resolve :kid1 ~'me ~'ctx
                                        (first (tilton.mx.api/mkids ~'me)))]
                             (tilton.fmx.factory/with-flutter-ref
                               (~fx-class
                                 .body bod#
                                 ~@(fx-props>mx fx-props))))))))))
       (tilton.mx.api/cFkids ~body))))

(defmacro k1-home-stateful [fx-class fx-props mx-props & [home]]
  (let []
    ;(chk (not (contains? fx-props :home)) "k1-home-stateful passed :home param in FX props, but expects :home as first child")
    ;(chk (not (contains? mx-props :home)) "k1-home-stateful sees :home in MX props, but expects :home as first child")
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tilton.fmx.api/fx-resolve-mget? ~'me :key ~'ctx))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           (tilton.fmx.factory/fx-state-init ~'me this))
                         (~'build [_# ~'ctx]
                           (let [bod# (tilton.fmx.api/fx-resolve :kid1 ~'me ~'ctx
                                        (first (tilton.mx.api/mkids ~'me)))]
                             (tilton.fmx.factory/with-flutter-ref
                               (~fx-class
                                 .home bod#
                                 ~@(fx-props>mx fx-props))))))))))
       (tilton.mx.api/cFkids ~home))))

(defmacro prop-param1-childless-stateless [prop fx-class fx-props mx-props]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class
                       (tilton.fmx.api/fx-resolve-mget? ~'me ~prop ~'ctx)
                       ~@(fx-props>mx (dissoc fx-props prop)))))))))

;;; --- kids for builder ------------------------------------------------------

(defmacro kids-for-builder [fx-class fx-props mx-props & children]
  (let []
    `(tilton.fmx.factory/make-fx-dart-widget
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ~'ctx]
                   (tilton.fmx.factory/with-flutter-ref
                     (~fx-class ~@(fx-props>mx fx-props)))))
       (tilton.mx.api/cFkids ~@children))))

;;; -------------------------------------------------------------

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(tilton.fmx.factory/k1-child-stateful m/SizedBox.expand ~fx-props ~mx-props ~@children))

;;; --- next two not yet confirmed in practice
(defmacro positioned [fx-props mx-props & children]
  `(tilton.fmx.factory/k1-child-stateful m/Positioned ~fx-props ~mx-props ~@children))
(defmacro transorm+rotate-ful [fx-props mx-props & children]
  `(tilton.fmx.factory/k1-child-stateful m/Transform.rotate ~fx-props ~mx-props ~@children))

;;; ------- deftags ---------------------------------


(defmacro deftag [factory mx-name fx-class & [param-property]]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# & children#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just kids
             (list* nil nil vargs#)

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list* (first vargs#) nil (rest vargs#)))]
       `(~'~factory ~@(when ~param-property
                        [~param-property]) ~'~fx-class ~fx-props# ~mx-props# ~@children#))))

(defmacro deftags [variant & fx-mx-pairs]
  `(do ~@(for [[fx# mx#] fx-mx-pairs]
           `(deftag ~variant ~fx# ~mx#))))