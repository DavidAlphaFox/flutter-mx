(ns tilton.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as f]

    [tilton.mx.cell.base :as cty]
    [tilton.mx.model.core :as md]
    [tilton.mx.base
     :refer [wtrx dp dpx trx]]
    [tilton.mx.api :refer [minfo cinfo] :as mx]
    [tilton.fmx.api :as fx]
    [tilton.testing :as testing]
    [example.driver :as eg]                                 ;; <--- comment out when excluding examples dir in deps.edn
    [tilton.counter-app :as counter]                        ;; this one uses sugary defs for scaffold and material-app
    ))

#_
(defn main []
  (dp :main-entry-dp2!!)
  (cty/cells-reset)
  (md/md-quiesce-feature! true)

  (fx/widget-key-clear)
  (.ensureInitialized w/WidgetsFlutterBinding)
  ;; (fxk/fmx-debugger-set! sample-debugger)

  (wtrx [0 999 :run-app]
    (fx/run-fx-app
      ;; Change the  namespace below to one above and rebuild to see a different example.
      ;; ------ VVVVV either/or next two--------------------------------------------
      (binding [cty/*dpc-enabled* true]
      (if true
        (counter/make-app)
        (eg/select)))) )                                  ;; <--- cannot use when excluding examples directory in deps.edn, or example.driver in this ns

  (testing/run-tests)

  (dp :main-exit))

(defn main [] ;<id:1673573645>
  (cty/cells-reset)
  (md/md-quiesce-feature! true)
  (fx/widget-key-clear)
  (.ensureInitialized w/WidgetsFlutterBinding)
  ;; (fxk/fmx-debugger-set! sample-debugger)

  (fx/run-app
    (hot-reload-detector
      (binding [cty/*dpc-enabled* false]
        ;;(testing/run-tests)
        (fx/fx-render nil
          (if false
            (counter/make-app)
            (eg/select)))))))


(defmacro hot-reload-detector
  [& body]
  (let [flutter-build-ctx (vary-meta `ctx# assoc :tag `w/BuildContext)
        state-sym `^w/State state#
        super-sym `super#
        user-widget
        `(reify :extends (w/StatefulWidget.)
           :no-meta true
           (~'createState [_#]
             (reify :extends w/State
               :no-meta true
               (~'initState [~state-sym]
                 (.initState ~(vary-meta state-sym assoc :tag 'super))
                 nil)
               (^void ~'reassemble [this#]
                 (.reassemble ^{:tag ~'super} this#)
                 (repl-ish))
               (~'dispose [~state-sym]
                 (.dispose ~(vary-meta state-sym assoc :tag 'super)))
               (~'build [~state-sym ~flutter-build-ctx]
                 ~@body))))]
    user-widget))

;; (set! r/debugPaintSizeEnabled true)
;; (w/debugDumpApp)

 (defn repl-ish []
   (dp :REPL-ish-on-reload!!!!!!!!!!!))





 ;(defn main [] ;<id:1673573645>
 ; (fx/run-app
 ;  (hot-reload-detector
 ;   (fx/fx-render nil (home/make)))))

(defn sample-debugger [opcode data]
  (case opcode
    :mark-rebuild-unless-defunct
    (do) #_(let [{:keys [cell element]} data]
             (dp :adtata data)
             (dp :cell (cinfo cell))
             (dp :cellkeys (keys @cell))
             (let [elt ^w/Element element]
               (when (not (and (.-mounted elt)
                            (.-debugIsActive elt)
                            (not (.-debugIsDefunct elt))))
                 (dp :rebld-DEAD-ELT-me!!! (minfo (:me @cell)))
                 (dp :rebld-mounted (.-mounted elt))
                 (dp :rebld-active (.-debugIsActive elt))
                 (dp :rebld-sees-defunct (.-debugIsDefunct elt))
                 (dp :rebld-elt-str (.toString elt)))))
    (dp :unrecognized-debug-opcode opcode data)))