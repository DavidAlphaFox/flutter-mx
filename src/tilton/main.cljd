(ns tilton.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as f]
    [tilton.mx.cell.base :refer [cinfo c-model] :as cty]
    [tilton.mx.model.core :as md]
    [tilton.mx.base
     :refer [wtrx dp dpx trx]]
    [tilton.mx.api :refer [minfo] :as mx]
    [tilton.fmx.core :as fx]
    ; [example.driver :as eg] ;; <--- comment out when excluding examples dir in deps.edn
    [tilton.counter-app :as counter]))

(defn main []
  (dp :main-entry)
  (md/md-quiesce-feature! true)
  (.ensureInitialized w/WidgetsFlutterBinding)
  ;; (fxk/fmx-debugger-set! sample-debugger)

  (wtrx [0 999 :run-app]
    (fx/run-app
      (fx/fx-render nil
        ;; Change the  namespace below to one above and rebuild to see a different example. <<<<<<< Updated upstream
        ;; ------ VVVVV either/or next two--------------------------------------------
        (counter/make-app)
        #_ (eg/select) ;; <--- cannot use when excluding examples dir in deps.edn
        )))

  ;; (testing/run-tests)
  (dp :main-exit))

(defn sample-debugger [opcode data]
  (case opcode
    :mark-rebuild-unless-defunct
    (do) #_(let [{:keys [cell element]} data]
             (dp :adtata data)
             (dp :cell (cinfo cell))
             (dp :cellkeys (keys @cell))
             (let [elt ^w/Element element]
               (when (not (and (.-mounted elt)
                               (.-debugIsActive elt)
                               (not (.-debugIsDefunct elt))))
                 (dp :rebld-DEAD-ELT-me!!! (minfo (:me @cell)))
                 (dp :rebld-mounted (.-mounted elt))
                 (dp :rebld-active (.-debugIsActive elt))
                 (dp :rebld-sees-defunct (.-debugIsDefunct elt))
                 (dp :rebld-elt-str (.toString elt)))))
    (dp :unrecognized-debug-opcode opcode data)))

;; (set! r/debugPaintSizeEnabled true)
;; (w/debugDumpApp)

; (defn repl-ish []
;  (do (dart:core/print :on-reload)
;      (bt/scan! 3)
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000)))
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000)))
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000))))
;  (do
;    nil
;    ))

;(defmacro hot-reload-detector
;  [& body]
;  (let [flutter-build-ctx (vary-meta `ctx# assoc :tag `w/BuildContext)
;        state-sym `^w/State state#
;        super-sym `super#
;        user-widget
;        `(reify :extends (w/StatefulWidget.)
;           :no-meta true
;           (~'createState [_#]
;            (reify :extends w/State
;              :no-meta true
;              (~'initState [~state-sym]
;               (.initState ~(vary-meta state-sym assoc :tag 'super))
;               nil)
;              (^void ~'reassemble [this#]
;               (.reassemble ^{:tag ~'super} this#)
;               (repl-ish))
;              (~'dispose [~state-sym]
;               (.dispose ~(vary-meta state-sym assoc :tag 'super)))
;              (~'build [~state-sym ~flutter-build-ctx]
;               ~@body))))]
;    user-widget))
;
; (defn main [] ;<id:1673573645>
;  (fx/run-app
;   (fx/hot-reload-detector
;    (fx/fx-render nil (home/make)))))