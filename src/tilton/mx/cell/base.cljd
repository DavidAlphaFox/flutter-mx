(ns tilton.mx.cell.base
  (:require
    [tilton.mx.model.peek :refer [chk mref? minfo]]
    [tilton.mx.base :as utb
     :refer [mx-throw def-rmap-props dp]]

    [tilton.mx.util
     :refer [cl-find set-ify atom?
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-set! rmap-meta-set! mut-set!]
     :as utc]

    [tilton.mx.foundation :refer [PObserver observe] :as mx]))

;; --- the Cells beef -----------------------

;; --- pulse, the Cells state clock ---------
(def +pulse+ (atom 0))
(defn pulse-now [] @+pulse+)
(defn cells-init []
  (reset! +pulse+ 0))

;; --- dependency tracking -------------------
(def ^:dynamic *causation* '())
(def ^:dynamic *call-stack* nil)
(def ^:dynamic *depender*
  "*depender* let's us differentiate between the call stack and
and dependency. The problem with overloading *call-stack* with both roles
is that we miss cyclic reentrance when we use without-c-dependency in a
rule to get once behavior or just when fm-traversing to find someone"
  nil)

;; --- integrity ------------------------------
(def ^:dynamic *defer-changes* false)
(def +client-q-handler+ (atom nil))

(defmacro WITHOUT-mx-isolation [& body]
  `(do
     (when (or tilton.mx.cell.base/*within-integrity*
             tilton.mx.cell.base/*depender*
             tilton.mx.cell.base/*defer-changes*
             tilton.mx.cell.base/*call-stack*)
       (tilton.mx.base/dp :DANGER-mx-iso-ignoring!!!!!!!!! tilton.mx.cell.base/*within-integrity*
         tilton.mx.cell.base/*depender*
         tilton.mx.cell.base/*defer-changes*
         tilton.mx.cell.base/*call-stack*))
     ~@body))

(defmacro with-mx-isolation [& body]
  `(do
     #_(tilton.mx.base/dp :mx-iso-overriding!!!S
         tilton.mx.cell.base/*within-integrity*
         tilton.mx.cell.base/*depender*
         tilton.mx.cell.base/*defer-changes*
         tilton.mx.cell.base/*call-stack*)
     (binding [tilton.mx.cell.base/*within-integrity* nil
               tilton.mx.cell.base/*depender* nil
               tilton.mx.cell.base/*defer-changes* false
               tilton.mx.cell.base/*call-stack* nil]
       ~@body)))

(def unbound (gensym "unbound-cell-value"))
(defn when-bound [x]
  (when (not= x unbound) x))

(def uncurrent (gensym "uncurrent-formulaic-value"))

(def ^:dynamic *unfinished-business* nil)
(def ^:dynamic *within-integrity* false)

;; --- debug stuff -----------------------------
(def ^:dynamic *finbiz-id* 0)
(def ^:dynamic *c-prop-depth* 0)

(def +c-debug+ (atom false))

;; --- procedure division ----------------------

(defn cells-reset
  ([] (cells-reset {}))
  ([options]
   (reset! +c-debug+ (:debug options false))
   (reset! +pulse+ 0)
   (reset! +client-q-handler+ (:client-queue-handler options))))

(defmacro without-c-dependency [& body]
  `(binding [tilton.mx.cell.base/*depender* nil]
     ~@body))

(defn +cause []
  (first *causation*))

;; ------------------------------------------------------

(deftype Cell []
  :extends mx/MXImplementer)

(deftype CellFormula []
  :extends Cell)

(defn c-type [c]
  (when (atom? c)
    (:mx-type @c)))

;; --- c-quiesce! -----------

(defn c-quiesce! [c]
  (chk (c-ref? c))
  (dpc c :quiesce :entry)
  (when-not false
    (chk (not (c-quiesced? c))
      (str "c-quiess!> already quiesced " (cinfo c)))
    (when-let [onq (:on-quiesce @c)]
      (dpc c :quiesce :calling-onq!!!!!! onq)
      (onq c))
    (unlink-from-callers c)
    (unlink-from-used c :quiesce)
    (rmap-set! [:quiesced? c] true)))

(defn c-quiesced? [c]
  (chk (c-ref? c)
    (str "c-quiessed?> failed assertion c-ref? on:" c))
  (:quiesced? @c))

(defn c-ref? [c]
  (and c (atom? c) (c-type c)
    (dart/is? (c-type c) Cell)))

(defn c-formula? [c]
  (and c (atom? c) (c-type c)
    (dart/is? (c-type c) CellFormula)))

(utb/def-rmap-props c-
  me prop state input? rule pulse pulse-last-changed pulse-observed
  useds users callers optimize ephemeral? sink on-quiesce
  lazy synapses synaptic? code async? then? debug)

(defn c-code$ [c]
  (with-out-str (do                                         ;; binding [*print-level* false]
                  (prn-str (:code @c)))))

(defn c-value [c]
  (chk (atom? c))
  (cond
    (c-ref? c)
    (:value @c)

    :else @c))

(defn c-optimized-away? [c]
  (chk (atom? c) (str :c-opti-away?-sees-not-atom c))
  (chk (c-ref? c) (str :c-opti-away?-sees-NON-cref (cinfo c) :deref @c))
  (:optimized? @c))

(defn c-model [rc]
  (:me @rc))

(defn c-mname [c]
  (if-let [md (c-model c)]
    (or (:name @md)
      "anon")
    "no-md"))

(defn c-prop-name [rc]
  (:prop @rc))

(defn c-value-state [rc]
  (let [v (c-value rc)]
    (cond
      (= v unbound) :unbound
      (= v uncurrent) :uncurrent
      :else :valid)))

(defn c-unbound? [rc]
  (= :unbound (c-value-state rc)))

(defn c-valid? [rc]
  (= :valid (c-value-state rc)))

(defn cinfo
  ([c] (cinfo c false))
  ([c verbose?]
   (cond
     (nil? c) :null-c
     (not (atom? c)) (if verbose? [:not-atom-c c]
                                  :not-atom-c)

     (not (c-ref? c)) (if verbose? [:not-cell-c @c :meta (meta c)]
                                   :not-cell-c)
     (c-quiesced? c) [:QUIESCED @c]
     :else (if verbose?
             [:cinfo-all @c]
             (conj ((juxt c-prop-name c-mname c-pulse #_c-async? #_c-value) c)
               [:used/users (count (c-useds c))
                (count (c-callers c))])))))

(defn atom-dump [a]
  (if (atom? a)
    (atom-dump (deref a))
    a))

(def ^:dynamic *dpc-enabled* false)

(defn dpc [c category & bits]
  (when *dpc-enabled*
    (chk (c-ref? c) (str "DPC got non-c: " category " info " (atom-dump c) " meta " (meta c)
                         " bits " (apply str bits)))
    (when-let [dbg (c-debug c)]
      (when (or (true? dbg) (some #{category} dbg))
        (apply dp :DPC category (first bits) (cinfo c) (rest bits))))))

;; --- dependency maintenance --------------------------------

(defn dependency-record [used]
  (dpc *depender* :link :record-usage-of/if (not (c-optimized-away? used)) (cinfo used))
  (when-not (c-optimized-away? used)
    (mut-set! *depender* :useds
      (conj (c-useds *depender*) used))
    (mut-set! used :callers
      (conj (c-callers used) *depender*))))

(defn dependency-drop [used caller]
  (dpc caller :link :caller-DROPS (cinfo caller) :USED (cinfo used))
  (mut-set! caller :useds (disj (c-useds caller) used))
  (dpc used :link :used-DROPPING (cinfo used) :caller (cinfo caller))
  (mut-set! used :callers (disj (c-callers used) caller)))

(defn unlink-from-callers [used]
  (dpc used :link :UNLINK-callers (count (c-callers used)))
  (doseq [caller (c-callers used)]
    (dpc caller :link :dropped-by-used!!!! (cinfo used))
    (dependency-drop used caller)))

(defn unlink-from-used [caller why]
  "Tell dependencies they need not notify us when they change, then clear our record of them."
  (dpc caller :link :unlink-from-used!!! (count (c-useds caller)))
  (doseq [used (c-useds caller)]
    (dependency-drop used caller)))

;; debug aids --------------

(defn c-props [c k]
  (chk (c-ref? c) (str "cslots c-ref? fail "))
  ;; set conversion as convenience to test code
  (set (map c-prop (k @c))))


;;---

(defn c-debug [c]
  (chk (c-ref? c))
  (:debug @c))
