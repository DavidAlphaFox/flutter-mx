(ns tiltontec.demo.todoMVC.input
  (:require
    [tiltontec.model.core :refer [mget mset! mswap!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [clojure.string :as str]))

(defn todo-input []
  (fx/material {:elevation   20.0
                :color       m.Colors/white
                :shadowColor m.Colors/black}
    (fx/text-field {:autofocus   true
                    :focusNode   (m/FocusNode) #_ (cI (m/FocusNode)
                                   :obs (fn-obs
                                          #_ (.requestFocus ^m/FocusNode new)))
                    :decoration  (m/InputDecoration
                                   .hintText "What needs doing?"
                                   .border m.InputBorder/none #_(.-none m/InputBorder)
                                   .contentPadding (m.EdgeInsets/all 9.0))
                    :onSubmitted (cF (fx/->CBAsIs
                                       (fn [value]
                                         (let [trimmed (str/trim value)]
                                           (if (str/blank? trimmed)
                                             ;; "onsubmit" removes the edit focus on submit; not ideal. We restore
                                             ;; for continued editing:
                                             (.requestFocus ^m/FocusNode (md/mget me :focusNode))
                                             (let [app (md/fasc :app)]
                                               (md/mset! me :value trimmed) ;; dataflow trigger
                                               (.clear ^m/TextEditingController (md/mget me :controller)) ;; clear the input text field,
                                               ;; (.requestFocus ^m/FocusNode (md/mget me :focusNode)) ;; yep. onsubmit clears focus. restore
                                               ;; now make the to-do, and add to _end_ of list
                                               (md/mswap! (md/fasc :app) :todo-db concat
                                                 [(todo/make-todo (mget app :todo-db) trimmed false)])))))))
                    :controller  (cFonce (let [c (m/TextEditingController .text (md/mget me :value))]
                                           ;; todo package this as a reusable
                                           (.addListener c
                                             (fn []
                                               (let [value (.-text c)]
                                                 (dpx (str "todo input field: " value))
                                                 (md/mset! me :value value)))) ;; dataflow trigger
                                           c))}
      {:name  :todo-input
       :value (cI (str "test " (rand-int 99)))})))

(defn todo-toggle-all []
  (fx/visibility!
    {:visible               (cF (boolean (seq (mget (md/fmuval :app :todo-db) :kids))))
     :maintainSize          true
     :maintainSemantics     false
     :maintainInteractivity false
     :maintainAnimation     true
     :maintainState         true
     }
    (fx/icon-button
      {:onPressed (fx/with-ctx+as-is [me ctx]
                      (fn []
                        (let [todos (mget (md/fmuval :app :todo-db) :kids)
                              all-done? (every? (fn [td] (md/mget td :completed)) todos)]
                          (doseq [td todos]
                            ;; todo do all these in one change pulse
                            (md/mset! td :completed (if all-done? false true)))))) ;; dataflow trigger
       :icon      (m/Icon m.Icons/expand_more .color m.Colors/blueGrey)})))
