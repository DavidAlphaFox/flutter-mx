(ns tiltontec.demo.todoMVC.input
  (:require
    [tiltontec.model.core :refer [fasc mget mset! mswap! mkids] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [clojure.string :as str]))

(defn todo-input []
  (fx/material {:elevation   20.0
                :color       m.Colors/white
                :shadowColor m.Colors/black}
    (fx/text-field {:autofocus   true
                    :focusNode   (m/FocusNode)
                    :decoration  (m/InputDecoration
                                   .hintText "What needs doing?"
                                   .border m.InputBorder/none
                                   .contentPadding (m.EdgeInsets/all 9.0))
                    :onSubmitted (cF (fx/as-is
                                       (fn [value]
                                         (cty/with-fx-isolation
                                           ;; blank or not we need to restore focus to the input per the spec
                                           (.requestFocus ^m/FocusNode (md/mget me :focusNode))
                                           (let [trimmed (str/trim value)]
                                             (when-not (str/blank? trimmed)
                                               ;; --- non-blank entry, so we save, clear entry, and store
                                               (md/mset! me :value trimmed)
                                               (.clear ^m/TextEditingController
                                                 (md/mget me :controller))
                                               (let [app (md/fasc :app)
                                                     td-lst (md/mget app :todo-db)]
                                                 (let [kp (mkids td-lst)]
                                                   (mset! td-lst :kids (concat kp [(todo/make-ToDo td-lst trimmed false)]))))))))))
                    :controller  (cFonce (let [c (m/TextEditingController .text (md/mget me :value))]
                                           ;; todo package this as a reusable
                                           (.addListener c
                                             (fn []
                                               (cty/with-fx-isolation
                                                 (let [value (.-text c)]
                                                   (md/mset! me :value value)))))
                                           c))}
      {:name  :todo-input
       :value (cI "" #_(str "test " (rand-int 99)))})))

(defn todo-toggle-all []
  (fx/visibility!
    {:visible               (cF (boolean
                                  (seq (todo/app-todos (fasc :app)))))
     :maintainSize          true
     :maintainSemantics     false
     :maintainInteractivity false
     :maintainAnimation     true
     :maintainState         true
     }
    (fx/icon-button
      {:onPressed (fx/with-ctx+as-is [me ctx]
                    (fn []
                      (cty/with-fx-isolation
                        (let [todos (todo/app-todos (fasc :app))
                              all-done? (every? (fn [td] (md/mget td :completed)) todos)]
                          (doseq [td todos]
                            ;; todo do all these in one change pulse
                            (md/mset! td :completed (if all-done? false true))))))) ;; dataflow trigger
       :icon      (m/Icon m.Icons/expand_more .color m.Colors/blueGrey)})))

(defn todo-controls []
  (fx/row
    (fx/expanded {:flex 1}
      (todo-toggle-all))
    ; --- the input ----
    (fx/expanded {:flex 9}
      (fx/padding
        {:padding ^:const (m.EdgeInsets/all 16.0)}
        (todo-input)))))