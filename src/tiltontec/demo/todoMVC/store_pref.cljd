(ns tiltontec.demo.todoMVC.store-pref
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["dart:convert" :as convert]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [clojure.walk :as walk]

    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.util.core :as util]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :refer [cF cFn cF+ cF_ cI c_F cFonce]]
    [tiltontec.model.core :refer [mget mpar mkids mname] :as md]
    [tiltontec.mx-flutter.shared-pref :as stg]))


(defn ^:async td-initialize
  "Create a LS to-do from a CLJD map alone, returning LS id."
  [collection-name td-map]
  (assert (not (:stg-id td-map)) "td-map already written")  ;; already written
  (.ensureInitialized w/WidgetsFlutterBinding)
  (let [db (await (stg/get-db))
        new-stg-id (str collection-name "/" (rand-int 99999999))
        new-data (assoc td-map :stg-id new-stg-id)]
    (.setString db new-stg-id
      (convert/jsonEncode
        (walk/stringify-keys
          (select-keys new-data
            [:stg-id :title :completed]))))
    new-stg-id))

(defn td-rewrite
  "Update an LS to-do given only a CLJD map of its properties. Must include LS id."
  [collection-name td-map]
  (.ensureInitialized w/WidgetsFlutterBinding)
  (let [db (stg/get-db)
        stg-id (:stg-id td-map)]
    (assert stg-id "td-rewrite map must include stg-id")
    (dp :td-rewrite-db db)
    (.setString ^prefs/SharedPreferences db stg-id
      (convert/jsonEncode
        (walk/stringify-keys
          (select-keys td-map
            [:stg-id :title :completed]))))
    stg-id))

(defn td-delete
  "Delete to-do data with given LS id from LS"
  [collection-name stg-id]
  (assert stg-id "td-delete requires stg-id")
  (.ensureInitialized w/WidgetsFlutterBinding)
  (let [db (stg/get-db)]
    (.remove ^prefs/SharedPreferences db stg-id)
    stg-id))

(defn ^:async read-all-docs [collection-name]
  (dp :readall-entry collection-name)
  (let [db (await (stg/get-db))]
    (dp :rall-seesdb db)
    (let [all (await (collection-keys collection-name))]
      (dp :allkeys!!!!! all)
      (doall
        (for [tdk all]
          (do (dp :radoc tdk (string? tdk))
              (let [td (.getString db tdk)]
                (util/dart-map->cljd-map
                  (convert/jsonDecode td)))))))))

(defn collection-keys [collection-name]
  (filter (fn [k]
            (= collection-name (subs k 0 (count collection-name))))
    (into #{} (.getKeys ^prefs/SharedPreferences (await (stg/get-db))))))

(defn delete-all-docs [collection-name]
  (let [db (await (stg/get-db))
        targets (await (collection-keys collection-name))]
    (dp :delete-all-docs-sees targets)
    (doseq [k targets]
      (dp :deleting k :db db)
      (.remove ^prefs/SharedPreferences db k))
    targets))