(ns tiltontec.demo.todoMVC.list-item
  (:require
    [clojure.string :as str]
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ;; [“package:flutter/services.dart” :as srvc]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn to-do-display [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/list-tile
      {:leading  (fx/check-box
                   {:value     (cF (or (md/mget todo :completed) false))
                    :shape     (fx/rounded-rectangle-border
                                 {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
                    :onChanged (cF (fx/->CBAsIs
                                     (fn [value]
                                       (md/mset! todo :completed value))))})
       :trailing (fx/text-button
                   {:onPressed (fx/cb-with-ctx [me ctx]
                                 (fx/->CBAsIs
                                   (fn []
                                     (md/mswap! (md/fasc :app) :todo-db
                                       (partial remove (fn [td]
                                                         (= sid (md/mget td :sid))))))))}
                   (fx/text {:style (p/TextStyle
                                      .fontFamily "Helvetica Neue"
                                      .color (todo/title-red)
                                      .fontWeight m.FontWeight/-w200
                                      .fontSize 20.0)}
                     "X"))

       :title    (cF (let [ldg (md/mget me :leading)
                           title (md/mget (md/mget me :todo) :title)]
                       (fx/text!
                         {:style (cF (if (md/mget ldg :value)
                                       (p/TextStyle
                                         .color m.Colors/-grey
                                         .decoration p.TextDecoration/-lineThrough)
                                       (p/TextStyle .color m.Colors/-black)))}
                         title)))}
      {:name :my-list-tile
       :todo todo})))

(defn- commit-to-do-editing
  ([me todo]
   (let [tx-con ^m/TextEditingController (mget me :controller)]
     (commit-to-do-editing me todo (.-text tx-con))))
  ([me todo value]
   (let [sid (mget todo :sid)
         trimmed (str/trim value)]
     (dp :trimmed!!! (str "|" trimmed "|"))
     (if (str/blank? trimmed)
       (let [app (md/fasc :app)]
         (assert app (str "No app above for " (minfo me)))
         ;; todo modify navig to search owners and owned (as an option?)
         (md/mswap! app :todo-db
           ;; todo roll this up into a todo utility
           (partial remove (fn [td]
                             (= sid (md/mget td :sid))))))
       (let [gd (md/fasc :todo-gd)]
         (assert gd "cannot find gestured")
         ;; todo confirm written to storage
         (md/mset! todo :title trimmed)                     ;; dataflow trigger
         (md/mset! gd :editing? false))))))

(defn to-do-editor [me todo]
  ;; todo have input field UN-focus
  (fx/list-tile
    {:title (cF (let [tile me
                      title (md/mget todo :title)
                      sid (md/mget todo :sid)]
                  (fx/focus-scope
                    {:onFocusChange (cF (fx/cb-with-ctx [me ctx]
                                          (fx/->CBAsIs
                                            (fn [focused?]
                                              (when (not focused?)
                                                ;; spec says commit on blur...
                                                (let [edt (md/fm* :todo-editor)]
                                                  (commit-to-do-editing edt todo)
                                                  (md/mset! (md/fasc :todo-gd) :editing? false)))))))}
                    {:owner tile}
                    (fx/container
                      {:margin (.only m/EdgeInsets .left 52)}
                      (fx/material {:elevation   3.0
                                    :color       m.Colors/-white
                                    :shadowColor m.Colors/-black}
                        (fx/text-field {:autofocus   true
                                        :focusNode   (cF (m/FocusNode
                                                           .onKeyEvent (fn [node ^m/KeyEvent event]
                                                                         ;; spec says to abandon edit if Escape key pressed
                                                                         (cond
                                                                           (and #_(dart/is? event srvc/KeyDownEvent)
                                                                             (= "Escape" (.-keyLabel (.-logicalKey event)))
                                                                             ;; next is a stopgap way of distinguishing
                                                                             ;; key down from up, so we can just process on
                                                                             ;; one of the two events for an Escape keypress.
                                                                             (not (nil? (.-character event))))
                                                                           (let [tx-con ^m/TextEditingController (mget me :controller)]
                                                                             (md/mset! (md/fasc :todo-gd) :editing? false)
                                                                             m/KeyEventResult.-handled)
                                                                           :else m/KeyEventResult.-ignored))))
                                        :decoration  (m/InputDecoration
                                                       .border (m/OutlineInputBorder
                                                                 .borderRadius ^:const (m.BorderRadius/all
                                                                                         (m.Radius/circular 0.0)))
                                                       .contentPadding (m.EdgeInsets/all 9.0))
                                        :onSubmitted (cF (fx/cb-with-ctx [me ctx]
                                                           (fx/->CBAsIs
                                                             (fn [value]
                                                               ;; spec says to commit on Enter
                                                               (commit-to-do-editing me todo value)))))
                                        :controller  (cFonce
                                                       ;; a rule guaranteed to run only once (even if reactive values used
                                                       ;; by the rule change) on instance initialization.
                                                       ;; in this case we just want the initial value
                                                       ;; so we can initialize the controller, and we do not
                                                       ;; want to create controllers on every keystroke.
                                                       (m/TextEditingController
                                                         .text (md/mget me :value)))}
                          {:name  :todo-editor
                           :value (cI title)}))))))}
    {:todo  todo
     :owner me}))

(defn todo-list-item [todo]
  (fx/visibility!
    {:key               (m/ValueKey. (md/mget todo :sid))
     :visible           (cF (case (md/fmuval :completions :selection)
                              :all true
                              :active (not (mget todo :completed))
                              :done (mget todo :completed)))
     :maintainSize      false
     :maintainAnimation true
     :maintainState     true}
    (fx/gesture-detector
      {:onDoubleTap (fx/cb-with-ctx [me ctx]
                      (fx/->CBAsIs
                        (fn [] (dp :doubletap!!!!!!!!!!!!!! :old (mget me :editing?))
                          (when (not (mget me :editing))
                            ;; todo fix double-taps not seen during editing
                            (mset! me :editing? true)))))}
      {:name     :todo-gd                                   ;; todo make better
       :editing? (cI false)}
      (if (mget me :editing?)
        (to-do-editor me todo)
        (to-do-display todo)))))

;;; --- archive code -----------------------------------------------------------

#_;;; a trash can icon
        (fx/icon-button
          {:onPressed (fx/cb-with-ctx [me ctx]
                        (fx/->CBAsIs
                          (fn []
                            (md/mswap! (md/fasc :app) :todo-db
                              (partial remove (fn [td]
                                                (= sid (md/mget td :sid))))))))
           :icon      (m/Icon m.Icons/-delete .color (-> m/Colors .-grey .-shade600))
           :color     (fx/cb-with-ctx [me ctx]
                        (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})