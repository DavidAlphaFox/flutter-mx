(ns tiltontec.demo.todoMVC.list-item
  (:require
    [clojure.string :as str]
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/services.dart" :as srvc]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn to-do-display [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/list-tile
      {:leading  (fx/check-box
                   {:value     (cF (or (md/mget todo :completed) false))
                    :shape     (fx/rounded-rectangle-border
                                 {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
                    :onChanged (cF (fx/->CBAsIs
                                     (fn [value]
                                       (md/mset! todo :completed value))))})
       :trailing (fx/text-button                            ;; our "delete" icon on each to-do
                   {:onPressed (fx/with-ctx+as-is [me ctx]
                                 (fn []
                                   (md/mswap! (md/fasc :app) :todo-db
                                     (partial remove (fn [td]
                                                       (= sid (md/mget td :sid)))))))}
                   (fx/text {:style (p/TextStyle
                                      .fontFamily "Helvetica Neue"
                                      .color (todo/title-red)
                                      .fontWeight m.FontWeight/w200
                                      .fontSize 20.0)}
                     "X"))

       :title    (cF (let [ldg (md/mget me :leading)
                           title (md/mget (md/mget me :todo) :title)]
                       (fx/text!
                         {:style (cF (if (md/mget ldg :value)
                                       (p/TextStyle
                                         .color m.Colors/grey
                                         .decoration p.TextDecoration/lineThrough)
                                       (p/TextStyle .color m.Colors/black)))}
                         title)))}
      {:name :my-list-tile
       :todo todo})))

(defn- commit-to-do-editing
  ([me todo]
   (let [tx-con ^m/TextEditingController (mget me :controller)]
     (commit-to-do-editing me todo (.-text tx-con))))
  ;--------
  ([me todo value]
   (let [sid (mget todo :sid)
         trimmed (str/trim value)]
     (if (str/blank? trimmed)
       (do
         (md/mswap! (md/fasc :app) :todo-db
           ;; todo roll this up into a todo utility
           (partial remove (fn [td]
                             (= sid (md/mget td :sid))))))
       (do
         (md/mset! todo :title trimmed)                     ;; two dataflow triggers
         (md/mset! (md/fasc :item-control) :editing? false))))))

(defn to-do-editor [me todo]
  (fx/list-tile
    {:title (cF (let [tile me
                      title (md/mget todo :title)]
                  (fx/focus-scope
                    ;; focus subtlety: we want the newly created TextField to autofocus, but
                    ;; the to-do input field is already focused, and autofocus does not jump those
                    ;; unless in a fresh scope. So we Lego in a scope.
                    {:onFocusChange (cF (fx/with-ctx+as-is [me ctx]
                                          (fn [focused?]
                                            (when (not focused?)
                                              ;; spec says commit on blur...
                                              (commit-to-do-editing (md/fm* :todo-editor) todo)
                                              (md/mset! (md/fasc :item-control) :editing? false)))))}
                    {:owner tile} ;; this scope widget is a delegate, not a child, so we record the ListTile as the "owner",
                    ;; and modified navigation to try any owner if parent is nil while searching up the Matrix.
                    (fx/container
                      {:margin (.only m/EdgeInsets .left 52)}
                      (fx/material {:elevation   3.0
                                    :color       m.Colors/white
                                    :shadowColor m.Colors/black}
                        ;; doing our best ^^^^ to emulate official TodoMVC styling.
                        (fx/text-field {:autofocus   true
                                        :focusNode   (cF (m/FocusNode
                                                           .onKeyEvent (fn [node ^m/KeyEvent event]
                                                                         ;; spec says to abandon edit if Escape key pressed
                                                                         (cond
                                                                           (and (dart/is? event srvc/KeyDownEvent)
                                                                             (= "Escape" (.-keyLabel (.-logicalKey event))))
                                                                           (do
                                                                             (md/mset! (md/fasc :item-control) :editing? false)
                                                                             m/KeyEventResult.handled)
                                                                           :else m/KeyEventResult.ignored))))
                                        :decoration  (m/InputDecoration
                                                       .border (m/OutlineInputBorder
                                                                 .borderRadius ^:const (m.BorderRadius/all
                                                                                         (m.Radius/circular 0.0)))
                                                       .contentPadding (m.EdgeInsets/all 9.0))
                                        :onSubmitted (cF (fx/with-ctx+as-is [me ctx]
                                                           (fn [value]
                                                             ;; spec says to commit on Enter
                                                             (commit-to-do-editing me todo value))))
                                        :controller  (cFonce
                                                       ;; cFonce is a rarely used rule generator for a rule guaranteed
                                                       ;; to run only once, on instance initialization, even if
                                                       ;; reactive values used by the rule change.
                                                       ;; We want the rule not for reactivity, rather so we can
                                                       ;; reference "me" (self) in the initform.
                                                       ;; In this case we just want the initial value
                                                       ;; so we can initialize the controller, and we do not
                                                       ;; want to create controllers on every keystroke.
                                                       (m/TextEditingController
                                                         .text (md/mget me :value)))}
                          {:name  :todo-editor
                           :value (cI title)}))))))}
    {:todo  todo
     :owner me}))

(defn todo-list-item [todo]
  (fx/visibility!
    {:key               (m/ValueKey. (md/mget todo :sid))
     :visible           (cF (case (md/fmuval :completions :selection)
                              :all true
                              :active (not (mget todo :completed))
                              :done (mget todo :completed)))
     :maintainSize      false
     :maintainAnimation true
     :maintainState     true}
    (fx/gesture-detector
      {:onDoubleTap (fx/with-ctx+as-is [me ctx]
                      (fn []
                        (dp :on-double-tap!!!!!!!)
                        (when (not (mget me :editing))
                          ;; todo fix double-taps not seen during editing
                          (mset! me :editing? true))))}
      {:name     :item-control
       :editing? (cI false)}
      (if (mget me :editing?)
        (to-do-editor me todo)
        (to-do-display todo)))))
