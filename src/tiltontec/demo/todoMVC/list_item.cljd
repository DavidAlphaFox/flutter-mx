(ns tiltontec.demo.todoMVC.list-item
  (:require
    [clojure.string :as str]
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn to-do-display [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/list-tile
      {:leading  (fx/check-box
                   {:value     (cF (or (md/mget todo :completed) false))
                    :shape     (fx/rounded-rectangle-border
                                 {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
                    :onChanged (cF (fx/->CBAsIs
                                     (fn [value]
                                       (md/mset! todo :completed value))))})
       :trailing (fx/text-button
                   {:onPressed (fx/cb-with-ctx [me ctx]
                                 (fx/->CBAsIs
                                   (fn []
                                     (md/mswap! (md/fasc :app) :todo-db
                                       (partial remove (fn [td]
                                                         (= sid (md/mget td :sid))))))))}
                   (fx/text {:style (p/TextStyle
                                      .fontFamily "Helvetica Neue"
                                      .color (todo/title-red)
                                      .fontWeight m.FontWeight/-w200
                                      .fontSize 20.0)}
                     "X"))

       :title    (cF (let [ldg (md/mget me :leading)
                           title (md/mget (md/mget me :todo) :title)]
                       (fx/text!
                         {:style (cF (if (md/mget ldg :value)
                                       (p/TextStyle
                                         .color m.Colors/-grey
                                         .decoration p.TextDecoration/-lineThrough)
                                       (p/TextStyle .color m.Colors/-black)))}
                         title)))}
      {:name :my-list-tile
       :todo todo})))

(defn to-do-editor [me todo]
  ;; todo have input field UN-focus
  (fx/list-tile
    {:title (cF (let [tile me
                      title (md/mget todo :title)
                      ;;focus (m/FocusNode)
                      sid (md/mget todo :sid)]
                  (fx/focus
                    {:onFocusChange (cF (fx/cb-with-ctx [me ctx]
                                          (fx/->CBAsIs
                                            (fn [value]
                                              (dp :focuschange!!!!!! value title)
                                              (when (not value)
                                                (let [gd (md/fasc :todo-gd)]
                                                  (assert gd "cannot find gestured")
                                                  ;; todo save or delete as if onSubmit
                                                  (md/mset! gd :editing? false)))))))}
                    {:owner tile}
                    (fx/container
                      {:margin (.only m/EdgeInsets .left 52)}
                      (fx/material {:elevation   3.0
                                    :color       m.Colors/-white
                                    :shadowColor m.Colors/-black}
                        (fx/text-field {;;:autofocus   true
                                        :focusNode   (m/FocusNode
                                                       .onKeyEvent (fn [node ^m/KeyEvent event]
                                                                     (dp :onkeyevent!!!! event)
                                                                     (dp :keyevent??? (dart/is? event m/KeyEvent))
                                                                     ;;(dp :keyevent??? (dart/is? event m/KeyDownEvent))

                                                                     ;; todo handle Escape semantics
                                                                     ;(dp :keydown??? (dart/is? event m/RawKeyDownEvent))
                                                                     (dp :onkeyevent-logkey!!!! (.-logicalKey event))
                                                                     (dp :onkeyevent-logkey-label!!!! (.-keyLabel
                                                                                                        (.-logicalKey event)))
                                                                     m/KeyEventResult.-ignored))
                                        :decoration  (m/InputDecoration
                                                       .border (m/OutlineInputBorder
                                                                 .borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 0.0)))
                                                       .contentPadding (m.EdgeInsets/all 9.0))
                                        ;; todo handle onBlur
                                        :onSubmitted (cF (fx/cb-with-ctx [me ctx]
                                                           (fx/->CBAsIs
                                                             (fn [value]
                                                               (let [trimmed (str/trim value)]
                                                                 (if (str/blank? trimmed)
                                                                   (do
                                                                     ;; todo modify navig to search owners and owned (as an option?)
                                                                     (md/mswap! (md/fasc :app (mget me :owner)) :todo-db
                                                                       (partial remove (fn [td]
                                                                                         (= sid (md/mget td :sid))))))
                                                                   (let [gd (md/fasc :todo-gd)]
                                                                     (assert gd "cannot find gestured")
                                                                     ;; todo confirm written to storage
                                                                     (md/mset! todo :title trimmed) ;; dataflow trigger
                                                                     (md/mset! gd :editing? false))))))))
                                        :controller  (cFonce (let [c (m/TextEditingController .text (md/mget me :value))]
                                                               ;; todo package this as a reusable
                                                               (.addListener c
                                                                 (fn []
                                                                   (let [value (.-text c)]
                                                                     (dp (str "todo input field listener sees: " value))
                                                                     (md/mset! me :value value)))) ;; dataflow trigger
                                                               c))}
                          {:name  :todo-editor
                           :value (cI title)}))))))}
    {:todo  todo
     :owner me}))

(defn todo-list-item [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/visibility!
      {:key                   (m/ValueKey. (md/mget todo :sid))
       :visible               (cF (case (md/fmuval :completions :selection)
                                    :all true
                                    :active (not (mget todo :completed))
                                    :done (mget todo :completed)))
       :maintainSize          false
       :maintainSemantics     false
       :maintainInteractivity false
       :maintainAnimation     true
       :maintainState         true}
      (fx/gesture-detector
        {:onDoubleTap (fx/cb-with-ctx [me ctx]
                        (fx/->CBAsIs
                          (fn [] (dp :doubletap!!!!!!!!!!!!!! :old (mget me :editing?))
                            (mswap! me :editing? not))))}
        {:name     :todo-gd                                 ;; todo make better
         :editing? (cI false)}
        (if (mget me :editing?)
          (to-do-editor me todo)
          (to-do-display todo))))))

;;; --- archive code -----------------------------------------------------------

#_(fx/icon-button
    {:onPressed (fx/cb-with-ctx [me ctx]
                  (fx/->CBAsIs
                    (fn []
                      (md/mswap! (md/fasc :app) :todo-db
                        (partial remove (fn [td]
                                          (= sid (md/mget td :sid))))))))
     :icon      (m/Icon m.Icons/-delete .color (-> m/Colors .-grey .-shade600))
     :color     (fx/cb-with-ctx [me ctx]
                  (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})