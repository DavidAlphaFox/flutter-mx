(ns tiltontec.demo.todoMVC.list-item
  (:require
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn todo-list-item [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (dp :building-list-item sid title)
    (fx/visibility!
      {:key               (m/ValueKey. sid)
       :visible           (cF (let [comps (md/fmu :completions)
                                    #_(md/fm-navig (fn [node]
                                                     (dpx :VIZ! (minfo node)
                                                       :ikeys (:fx$ikeys @node)
                                                       #_#_:meta (meta node))
                                                     (= :completions (mget node :name)))
                                        me :me? false :up? true :inside? false)]
                                (assert comps)
                                (let [select (mget comps :selection)]
                                  (case select
                                    :all true
                                    :active (not (mget todo :completed))
                                    :done (mget todo :completed)))))
       :maintainSize      false
       :maintainSemantics false
       :maintainInteractivity false
       :maintainAnimation true
       :maintainState     true}
      {:name :todo-item-visi}
      (fx/list-tile
        {:key      (m/ValueKey. sid)
         :leading  (fx/check-box
                     {:value     (cF (or (md/mget todo :completed) false))
                      :shape     (fx/rounded-rectangle-border
                                   ;; todo get size to work or use whole new approach to rendering
                                   {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))
                                    #_(m.BorderRadius/circular 16.0)})
                      :onChanged (cF (fx/->CBAsIs
                                       (fn [value]
                                         (md/mset! todo :completed value))))}
                     {:name :da-checkbox})
         :trailing (fx/icon-button
                     {:onPressed (fx/cb-with-ctx [me ctx]
                                   (fx/->CBAsIs
                                     (fn []
                                       (dp :deleting!!!! sid)
                                       (let [app (md/fasc :app)]
                                         (assert app)
                                         (dp :app (minfo app))
                                         (dp :todos (map minfo (mget app :todo-db)))
                                         (let [new-todos (remove (fn [td]
                                                                   (dp :maybe-del sid (minfo td))
                                                                   (dp :maybe-del sid (mget td :sid))
                                                                   (= sid (mget td :sid)))
                                                           (mget app :todo-db))]
                                           (dp :new!! (map minfo new-todos))
                                           (md/mset! app :todo-db new-todos)
                                           #_(md/mswap! (md/fasc :app) :todo-db
                                               #(remove (fn [td]
                                                          (dp :maybe-del sid (mget td sid))
                                                          (= sid (md/mget td :sid))) %)))))))
                      :icon      (m/Icon m.Icons/delete :color m.Colors/orange)
                      :color     (fx/cb-with-ctx [me ctx]
                                   (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})

         :title    (cF (let [ldg (md/mget me :leading)
                             title (md/mget (md/mget me :todo) :title)]
                         (fx/text!
                           {:style (cF (if (md/mget ldg :value)
                                         (p/TextStyle
                                           :color m.Colors/grey
                                           :decoration p.TextDecoration/lineThrough)
                                         (p/TextStyle :color m.Colors/black)))}
                           title)))}
        {:name :my-list-tile
         :todo todo}))))