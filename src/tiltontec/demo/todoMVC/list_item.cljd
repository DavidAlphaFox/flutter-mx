(ns tiltontec.demo.todoMVC.list-item
  (:require
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn todo-list-item [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/visibility!
      {:key                   (m/ValueKey. (md/mget todo :sid))
       :visible               (cF (case (md/fmuval :completions :selection)
                                    :all true
                                    :active (not (mget todo :completed))
                                    :done (mget todo :completed)))
       :maintainSize          false
       :maintainSemantics     false
       :maintainInteractivity false
       :maintainAnimation     true
       :maintainState         true}
      (fx/list-tile
        {:leading  (fx/check-box
                     {:value     (cF (or (md/mget todo :completed) false))
                      :shape     (fx/rounded-rectangle-border
                                   {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
                      :onChanged (cF (fx/->CBAsIs
                                       (fn [value]
                                         (md/mset! todo :completed value))))})
         :trailing (fx/text-button
                     {:onPressed (fx/cb-with-ctx [me ctx]
                                   (fx/->CBAsIs
                                     (fn []
                                       (md/mswap! (md/fasc :app) :todo-db
                                         (partial remove (fn [td]
                                                           (= sid (md/mget td :sid))))))))}
                     (fx/text {:style (p/TextStyle
                                        .fontFamily "Helvetica Neue"
                                        .color (todo/title-red)
                                        .fontWeight m.FontWeight/-w200
                                        .fontSize 20.0)}
                       "X"))

         :title    (cF (let [ldg (md/mget me :leading)
                             title (md/mget (md/mget me :todo) :title)]
                         (fx/text!
                           {:style (cF (if (md/mget ldg :value)
                                         (p/TextStyle
                                           .color m.Colors/-grey
                                           .decoration p.TextDecoration/-lineThrough)
                                         (p/TextStyle .color m.Colors/-black)))}
                           title)))}
        {:name :my-list-tile
         :todo todo}))))

;;; --- archive code -----------------------------------------------------------

#_(fx/icon-button
    {:onPressed (fx/cb-with-ctx [me ctx]
                  (fx/->CBAsIs
                    (fn []
                      (md/mswap! (md/fasc :app) :todo-db
                        (partial remove (fn [td]
                                          (= sid (md/mget td :sid))))))))
     :icon      (m/Icon m.Icons/-delete .color (-> m/Colors .-grey .-shade600))
     :color     (fx/cb-with-ctx [me ctx]
                  (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})