(ns tiltontec.demo.todoMVC.list-item
  (:require
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/services.dart" :as srvc]
    [clojure.string :as str]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.model.core :refer [mget mswap! mset!] :as md]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.demo.todoMVC.todo :refer [my-todo-list td-ls-id td-completed td-title] :as todo]))

(defn to-do-display [todo]
  (assert todo "no todo todo display")
  (let [title (td-title todo)]

    (fx/list-tile
      {:leading  (fx/check-box
                   {:value     (cF (or (td-completed todo) false))
                    :shape     (fx/rounded-rectangle-border
                                 {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
                    :onChanged (cF (fx/->CBAsIs
                                     (fn [value]
                                       (cty/with-fx-isolation
                                         (md/mset! todo :completed value)))))})
       :trailing (fx/text-button
                   ;; our "delete" icon on each to-do
                   {:onPressed (fx/with-ctx+as-is [me ctx]
                                 (fn []
                                   (cty/with-fx-isolation
                                     (mswap! (my-todo-list) :kids
                                       (fn [coll ls-id]
                                         (remove (fn [td]
                                                   (= ls-id (td-ls-id td))) coll))
                                       (todo/td-ls-id todo)))))}
                   (fx/text {:style (p/TextStyle
                                      .fontFamily "Helvetica Neue"
                                      .color (todo/title-red)
                                      .fontWeight m.FontWeight/w200
                                      .fontSize 20.0)}
                     "X"))

       :title    (cF (let [ldg (md/mget me :leading)
                           #_#_ td (md/mget me :todo)]
                       ;(assert td (str "no td in title rule for me " (minfo me) @me))
                       (fx/text!
                         {:style (cF (if (md/mget ldg :value)
                                       (p/TextStyle
                                         .color m.Colors/grey
                                         .decoration p.TextDecoration/lineThrough)
                                       (p/TextStyle .color m.Colors/black)))}
                         (td-title (md/mget me :todo)))))}
      {:name :my-list-tile
       :todo todo})))

(defn- commit-to-do-editing
  ([me todo]
   (let [tx-con ^m/TextEditingController (mget me :controller)]
     (commit-to-do-editing me todo (.-text tx-con))))
  ;--------
  ([me todo value]
   (let [ls-id (td-ls-id todo)
         trimmed (str/trim value)]
     (if (str/blank? trimmed)
       (do
         (md/mswap! (my-todo-list) :kids
           ;; todo propagate this to other mswaps
           (partial remove (fn [td] (= ls-id (td-ls-id td))))))
       (do
         (md/mset! todo :title trimmed)                     ;; two dataflow triggers
         (md/mset! (md/fasc :item-control) :editing? false))))))

(defn to-do-editor [me todo]
  (assert todo)
  (fx/list-tile
    {:title (cF (let [tile me
                      _ (assert todo "no todo in editor")
                      title (td-title todo)]
                  (fx/focus-scope
                    ;; focus subtlety: we want the newly created TextField to autofocus, but
                    ;; the to-do input field is already focused, and autofocus does not jump those
                    ;; unless in a fresh scope. So ^^^ we throw in a scope.
                    {:onFocusChange (cF (fx/with-ctx+as-is [me ctx]
                                          (fn [focused?]
                                            (cty/with-fx-isolation
                                              (when (not focused?)
                                                ;; spec says commit on blur...
                                                (commit-to-do-editing (md/fm* :todo-editor) todo)
                                                (md/mset! (md/fasc :item-control) :editing? false))))))}
                    {:owner tile}
                    ;; ^^^ this widget is a delegate, not a child, so we record the ListTile as the "owner",
                    ;; and modified navigation to try any owner if "parent" is nil while searching up the Matrix.
                    (fx/container
                      {:margin (.only m/EdgeInsets .left 52)}
                      (fx/material {:elevation   3.0
                                    :color       m.Colors/white
                                    :shadowColor m.Colors/black}
                        ;; doing our best ^^^^ to emulate official TodoMVC styling.
                        (fx/text-field {:autofocus   true
                                        :focusNode   (cF (m/FocusNode
                                                           .onKeyEvent (fn [node ^m/KeyEvent event]
                                                                         ;; spec says to abandon edit if Escape key pressed
                                                                         (cty/with-fx-isolation
                                                                           (cond
                                                                             (and (dart/is? event srvc/KeyDownEvent)
                                                                               (= "Escape" (.-keyLabel (.-logicalKey event))))
                                                                             (do
                                                                               (md/mset! (md/fasc :item-control) :editing? false)
                                                                               m/KeyEventResult.handled)
                                                                             :else m/KeyEventResult.ignored)))))
                                        :decoration  (m/InputDecoration
                                                       .border (m/OutlineInputBorder
                                                                 .borderRadius ^:const (m.BorderRadius/all
                                                                                         (m.Radius/circular 0.0)))
                                                       .contentPadding (m.EdgeInsets/all 9.0))
                                        :onSubmitted (cF (fx/with-ctx+as-is [me ctx]
                                                           (fn [value]
                                                             ;; spec says to commit on Enter
                                                             (cty/with-fx-isolation
                                                               (commit-to-do-editing me todo value)))))
                                        :controller  (cFonce (m/TextEditingController
                                                               .text (md/mget me :value)))}
                          {:name  :todo-editor
                           :value (cI title)}))))))}
    {:todo  todo
     :owner me}))

(defn todo-list-item [todo]
  (fx/visibility!
    {:key               (m/ValueKey. (td-ls-id todo))
     :visible           (cF (case (md/fmuval :completions :selection)
                              :all true
                              ;; todo convert mgets to td-*
                              :active (not (td-completed todo))
                              :done (td-completed todo)))
     :maintainSize      false
     :maintainAnimation true
     :maintainState     true}
    (fx/gesture-detector
      {:onDoubleTap (fx/with-ctx+as-is [me ctx]
                      (fn []
                        (cty/with-fx-isolation
                          (when (not (mget me :editing))
                            ;; todo fix double-taps not seen during editing
                            (mset! me :editing? true)))))}
      {:name     :item-control
       :editing? (cI false)}
      (if (mget me :editing?)
        (to-do-editor me todo)
        (to-do-display todo)))))
