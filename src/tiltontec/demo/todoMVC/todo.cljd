(ns tiltontec.demo.todoMVC.todo
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["dart:convert" :as convert]
    ["package:http/http.dart" :as dht]
    ;;["package:localstore/localstore.dart" :as ls]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [clojure.walk :as walk]

    [tiltontec.util.base :refer [dprn dp dpx]]

    [tiltontec.util.core
     :refer [difference atom? err rmap-setf rmap-meta-setf pln] :as util]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.integrity :as integrity]
    [tiltontec.cell.core :refer [cF cFn cF+ cF_ cI c_F cFonce] :as cells]
    [tiltontec.model.core :refer [mget mpar mkids mname mset! md-reset! mswap!] :as md]
    [tiltontec.mx-flutter.localstorage :as store]
    [tiltontec.demo.todoMVC.store-pref :refer [*pref*] :as stg]))

;;; --- handy accessors ---------------------------------

;; todo try with rmap-slots
(defn td-stg-id [td] (mget td :stg-id))                     ;; LS only?
(defn td-title [td] (or (mget td :title) ""))
(defn td-events [td] (mget td :events))
(defn td-completed [td] (or (mget td :completed) false))
(defn td-created-at [td] (or (mget td :created-at) false))

#_(let [ae-url "https://api.fda.gov/drug/event.json?
                    search=patient.drug.openfda.brand_name:~(~a~)&limit=3"
        ae-uri (.https Uri "api.fda.gov" "drug/event.json"
                 {"limit"  "3"
                  "search" "patient.drug.openfda.brand_name:Advil"})]
    (dp :ae-uri ae-uri)
    (let [r (dht/get ae-uri)]
      (dp :aerwaw r)
      (let [rr (await r)]
        (dp :rr rr)
        (dp :status-c (.-statusCode rr))
        (dp :body (.-bodyBytes rr))
        (let [bbu8 (walk/keywordize-keys
                     (into {}                               ;; converts Dart map to cljd map
                       (convert/jsonDecode
                         (.decode convert/utf8 (.-bodyBytes rr)))))]
          (dp :-----------------------)
          (dp :utf8-bodybytes bbu8)
          (dp :-----------------------)
          (let [rs (:results bbu8)]
            (doseq [r rs]
              (dp :fda! r)))

          (dp :--------------------)
          (let [m (walk/keywordize-keys (into {} (:meta bbu8)))]
            (dp :meta m)
            (dp :meta-res (walk/keywordize-keys (into {} (:results m))))
            )
          )))


    #_#_(dp :ae!!!!!!!!!!!!!!!!!!!!!)
            (let [aer (dht/get ae-url)]
              (dp :raw-aer!!! aer)))
;;; --- FX-level to-dos and to-do list -----------------------------------------

(declare ToDo-update)

(deftype ToDo []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    (when (and (td-stg-id me) (not= cty/unbound prior-value))
      (ToDo-update me))))

(defn make-ToDo
  ([td-lst title completed]
   (make-ToDo td-lst title completed nil nil))
  ([td-lst title completed stg-id created-at]
   (let [created-at (or created-at
                      (.-millisecondsSinceEpoch (.now DateTime)))]
     (md/make
       :par td-lst
       :mx-type (ToDo.)
       :stg-id (or stg-id
                 (stg/td-initialize "todo"
                   {:title      title
                    :created-at created-at
                    :completed  completed}))
       :created-at created-at

       ;--
       :title (cI title)
       :completed (cI completed)))))

(defn ToDo-update [td]
  (let [coll-name (mname (mpar td))]
    (stg/td-rewrite coll-name (select-keys @td [:stg-id :created-at :title :completed]))))

;;; --- higher level ---------------------------

(deftype ToDoList []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    (case slot
      :kids (when (not= cty/unbound prior-value)
              (let [lost (util/difference (set prior-value) (set new-value))]
                (doseq [td lost]
                  (stg/td-delete "todo" (td-stg-id td))))))))

;; todo ??? move fx$state to meta and get out of dataflow
;;      this will entail new way to get controller

(defn make-ToDoList
  ([name] (make-ToDoList name nil))
  ([name existing-todos]
   (md/make
     :mx-type (ToDoList.)
     :name name
     :kids (cFn (mapv (fn [xtd]
                        (let [{:keys [title completed stg-id created-at]} xtd]
                          (make-ToDo me title completed stg-id created-at)))
                  existing-todos)))))


;;; --- even higher level ---------------------------------------

(defn app-todos [app]
  (when-let [td-lst (tiltontec.model.core/mget app :todo-list)]
    ;; we have to wait for todos to be loaded from localstorage
    (assert (cty/md-ref? td-lst) (str "app-todos> td-lst not md-ref? " td-lst))
    (md/mkids td-lst)))