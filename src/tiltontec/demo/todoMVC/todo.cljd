(ns tiltontec.demo.todoMVC.todo
  (:require
    [clojure.walk :as walk]

    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.model.core :refer [mget] :as md]

    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]))

(defn title-red []
  (.fromRGBO m/Color 184 63 69 0.5))

(def todo-sid (atom 0))

(deftype ToDoList []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (dp :REAL-todo-LIST-obs!!!!!!!! slot  :new new-value :sid (md/mget me :sid) (md/mget me :title) (minfo me) #_#_:prior prior-value)
    ))

(defn make-todo-list [name]
  (md/make
    :mx-type (ToDoList.)
    :name name
    :sid (swap! todo-sid inc)
    :kids (cI nil)))

(declare td-upsert)

(deftype ToDo []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (dp :REAL-todo-obs!!!!!!!! slot  :new new-value :sid (md/mget me :sid) (md/mget me :title) (minfo me) #_#_:prior prior-value)
    (when (= slot :sid) ;; arbitrary choice
      (dp :REAL-todo-obs-par!!!!!!!! slot  :par!!! @(:par @me))
      (td-upsert me))))

(defn make-todo [td-list title completed]
  (md/make
    :par td-list
    :mx-type (ToDo.)
    :name :a-todo-item
    :sid (swap! todo-sid inc)
    :title (cI title)
    :completed (cI completed)))

(defn td-list-load [name] )

(defn td-upsert [td]
  (dp :upserting!!!! @td)
  (when-let [par (:par @td)]
    (dp :ups-par @par)
    (.ensureInitialized w/WidgetsFlutterBinding)
    (let [db (.-instance ls/Localstore)
          coll (.collection db (:name @par))
          new-id (.-id (.doc coll))
          new-data (assoc (select-keys [:title :completed :sid] @td)
                     :ls-id new-id)]
      (dp :make-ls-new!! new-id new-data)
      (-> coll
        (.doc new-id)
        (.set (walk/stringify-keys new-data))))))


