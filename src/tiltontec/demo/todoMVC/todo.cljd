(ns tiltontec.demo.todoMVC.todo
  (:require
    [clojure.walk :as walk]

    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.model.core :refer [mget] :as md]

    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]))

(defn title-red []
  (.fromRGBO m/Color 184 63 69 0.5))

(def todo-sid (atom 0))

(deftype ToDoList []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (dp :REAL-todo-LIST-obs!!!!!!!! slot  :new new-value :sid (md/mget me :sid) (md/mget me :title) (minfo me) #_#_:prior prior-value)
    ))

(defn make-todo-list [name]
  (md/make
    :mx-type (ToDoList.)
    :name name
    :sid (swap! todo-sid inc)
    ;;:ls-doc
    :kidct (cF (count (mget me :kids)))
    :kids (cI nil)))

(deftype ToDo []
  :extends cty/Model
  cty/PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (dp :REAL-todo-obs!!!!!!!! slot  :new new-value :sid (md/mget me :sid) (md/mget me :title) (minfo me) #_#_:prior prior-value)
    ))

(defn make-todo [title completed]
  (md/make
    :mx-type (ToDo.)
    :name :a-todo-item
    :sid (swap! todo-sid inc)
    :title (cI title)
    :completed (cI completed)))

(defn td-list-load [name] )



(defn make-ls [& iargs]
  ;;(assert (:mx-type iargs) "make-ls called without")
  #_(let [me (apply md/make iargs)]
      (when-not (md/mget me :lsID)
        (.ensureInitialized w/WidgetsFlutterBinding)
        (let [db (.-instance ls/Localstore)]
          (let [coll (.collection db "todos")
                new-id (.id (.doc coll))
                new-data (assoc (select-keys [:title :completed]))]
            (dp :make-ls-new!! new-id)
            (-> db
              (.collection "todos")
              (.doc new-id)
              (.set {"title" "Todo title Two"})))))))
