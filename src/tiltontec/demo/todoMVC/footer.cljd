(ns tiltontec.demo.todoMVC.footer
  (:require
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.model.core :refer [mget mset! mswap!] :as md]
    [tiltontec.mx-flutter.core :as fx]

    [tiltontec.demo.todoMVC.common :as cmm
     :refer [my-app my-todo-list as-dart-callback]]
    [tiltontec.demo.todoMVC.todo :refer [td-completed] :as todo]))

(defn items-remaining-display []
  (fx/text!
    (let [tds (todo/app-todos (my-app))
          left (remove td-completed tds)]
      (str (count left) " item" (when (not= 1 (count left))
                                  "s")))))

(defn completion-filters []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/spaceEvenly}
    {:name      :completions
     :selection (cI :all)}
    (let [selector me                                       ;; we bind "me" more readably
          choice (fn [completion-enum option$]
                   (fx/ink-well
                     {:onTap (as-dart-callback []
                               (mset! (md/fasc :completions)
                                 :selection completion-enum))}
                     (fx/container
                       {:decoration (cF (when (mget me :selected?)
                                          (m/BoxDecoration
                                            .border (.all m/Border .color (cmm/title-red) .width 0.5)
                                            .borderRadius (m.BorderRadius/all (m.Radius/circular 4.0)))))}
                       {:selected? (cF (= completion-enum
                                         (mget selector :selection)))}
                       (fx/padding
                         {:padding (m.EdgeInsets/all 3.0)}
                         (m/Text option$)))))]
      (list
        (choice :all "All")
        (choice :active "Active")
        (choice :done "Done")))))

(defn clear-completed-button []
  (fx/visibility!
    {:visible           (cF (if-let [tds (todo/app-todos (my-app))]
                              (boolean                      ;; FL wants explicit boolean
                                (some td-completed tds))
                              ;; nb might still be loading initially
                              false))
     ;; todo ugh; can all this be avoided?
     :maintainSize      true
     :maintainAnimation true
     :maintainState     true
     }
    (fx/text-button
      {:onPressed (as-dart-callback []
                    (md/mswap! (my-todo-list) :kids
                      (partial remove td-completed)))}
      (fx/text "Clear done"))))