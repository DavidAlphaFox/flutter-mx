(ns tiltontec.demo.todoMVC.footer
  (:require
    [tiltontec.model.core :refer [mget mset! mswap!] :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]

    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn items-left-display []
  (fx/text! {}
    ;; todo warn (how?) if they use regular text with rule or c-in
    {:name :items-left}
    (let [db (md/fmuval :app :todo-db)
          left (remove #(mget % :completed) db)]
      (dp :items-left-sees!!!! (count left) (doall (map (fn [todo]
                                                          [(mget todo :sid)
                                                           (mget todo :title)])
                                                     left)))
      (str (count left) (if (= 1 (count left))
                          " item" " items")))))

(defn completion-filters []
  ;; todo BUG switching All to Active after any td delete crashes on setState
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/-spaceEvenly}
    {:name      :completions
     :selection (cI :all)}
    (let [choice (fn [option option$]
                   (fx/expanded {:flex 1}
                     (fx/ink-well
                       {:onTap (fx/cb-with-ctx [me ctx]
                                 (fx/->CBAsIs
                                   #(let [comps (md/fasc :completions)]
                                      (mset! comps :selection option))))}
                       (fx/container
                         {:decoration (cF (when (mget me :selected?)
                                            (m/BoxDecoration
                                              :border (.all m/Border :color (.-black m/Colors) :width 1)
                                              :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 3.0)))))

                          }
                         {:enum      option
                          :selected? (cF (= (mget me :enum)
                                           (mget (md/fasc :completions) :selection)))}
                         (fx/center (m/Text option$))))))]
      (list
        (choice :all "All")
        (choice :active "Active")
        (choice :done "Done")))))


(defn clear-completed-button []
  (fx/visibility!
    {:visible           (cF (let [db (md/fmuval :app :todo-db)]
                              (if (some (fn [todo]
                                          (mget todo :completed)) db)
                                true false)))
     :maintainSize      true
     :maintainAnimation true
     :maintainState     true}
    {:name :clear-completed-button}
    (fx/text-button
      {:onPressed (fx/cb-with-ctx [me ctx]
                    (fx/->CBAsIs
                      (fn []
                        (let [app (md/fasc :app)
                              db (mget app :todo-db)
                              remaining (remove #(mget % :completed) db)]
                          (dp :db-in db)
                          (dp :rem remaining)
                          (mset! (md/fasc :app) :todo-db remaining)))))}
      (m/Text "Clear completed"))))