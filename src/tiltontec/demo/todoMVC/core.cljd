(ns tiltontec.demo.todoMVC.core
  (:require
    [tiltontec.model.core :refer [mget mset! mset!x mswap! fasc] :as md]
    [tiltontec.cell.integrity :as integrity]
    [tiltontec.model.base :as mdbase]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.demo.todoMVC.todo :as todo]
    [tiltontec.demo.todoMVC.input :as input]
    [tiltontec.demo.todoMVC.list-item :as item]
    [tiltontec.demo.todoMVC.footer :as footer]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.core :refer [atom?]]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(declare my-app-bar my-fab test-todos)

(defn make-app []
  (let [title "todos"]
    (fx/material-app
      {:title                      title
       :theme                      (m/ThemeData
                                     .fontFamily "Helvetica Neue"
                                     .backgroundColor (.fromRGBO m/Color 245 245 245 1))
       :debugShowCheckedModeBanner false
       :debugShowMaterialGrid      false                    ;; but fun
       }
      {:name           :app
       :todo-db-loader (cF+ [:obs (fn [slot me todos-future _ tdlc]
                                    (dp :tdl-obs-sees-new-future!!!!!! todos-future (minfo me)
                                      cty/*within-integrity* cty/*defer-changes*)
                                    (.then todos-future
                                      (fn [tds]
                                        (dp :tdl-obs-THEN-sees tds cty/*within-integrity*)
                                        (dp :tdl-obs-THEN-sees-defer cty/*defer-changes*)
                                        (dp :tdl-obs-THEN-sees-stack cty/*call-stack*)
                                        (dp :tdl-obs-THEN-sees-depender cty/*depender*)
                                        ; todo can we safely kick off a change?
                                        (binding [cty/*within-integrity* nil
                                                  cty/*depender* nil
                                                  cty/*defer-changes* false
                                                  cty/*call-stack* nil]
                                          (dp :tdl-obs-tdlc-PRE-with-cc!!!!!!!!!!!! cty/*within-integrity*
                                            cty/*defer-changes*)
                                          (do ;; integrity/with-cc :load-todos
                                            ;; should this wrap just the mset!?
                                            (dp :tdl-obs-with-cc-dispatched cty/*within-integrity* cty/*depender*)

                                            (dp :tdl-obs-with-cc-dispatched-me (when (atom? me) @me))
                                            (dp :tdl-obs-with-cc-dispatched-depender
                                              (when (atom? cty/*depender*) (deref cty/*depender*)))
                                            (dp :tdl-obs-with-cc-dispatched-depender-meta (meta cty/*depender*))
                                            (let [tdl (todo/make-todo-list "todo-db-loaded" tds)]
                                              (dp :mset-todo-db!!!!!! (minfo tdl) cty/*within-integrity* cty/*depender*)
                                              (let [ms (mset!x me :todo-db tdl)]
                                                (dp :mset!-tododb-returned!!! (minfo tdl)))))))))]
                         (dp :tdl-runs!!!!!!!!! (count cty/*call-stack*))
                         (let [rad (store/read-all-docs "todo")]
                           (dp :tdl-returns-future!!!!!! rad)
                           rad))
       :todo-db        (cI nil
                         :obs (fn [slot me new old c]
                                (dp :todo-db-OBS!!!!!! new (when (atom? new) @new))))}
      (fx/scaffold
        {:appBar                  (my-app-bar title)
         :backgroundColor         (.fromRGBO m/Color 245 245 245 1)
         #_#_:floatingActionButton (my-fab)
         :persistentFooterButtons [(fx/row
                                     {:mainAxisAlignment m.MainAxisAlignment/center}
                                     (fx/expanded {:flex 1} (footer/items-remaining-display))
                                     (fx/expanded {:flex 2} (footer/completion-filters))
                                     (fx/expanded {:flex 1} (footer/clear-completed-button)))]}
        (fx/ink {:color m.Colors/white}
          (fx/column
            (fx/row
              ; --- they snuck a tool into the new-input area
              (fx/expanded {:flex 1}
                (input/todo-toggle-all))
              ; --- the input ----
              (fx/expanded {:flex 9}
                (fx/padding
                  {:padding ^:const (m.EdgeInsets/all 16.0)}
                  (input/todo-input))))
            ; --- to-do list ------------------
            (fx/expanded
              ;; ^^^ required sizer to join column
              (fx/list-view+separated
                {:padding          ^:const (m.EdgeInsets/all 0.0)
                 :itemCount        (cF (dpx :itemco-entry cty/*within-integrity*)
                                     (dpx :itemco-dep (cinfo cty/*depender*))
                                     (let [app (fasc :app)]
                                         (assert app "no appp")
                                         (let [tds (todo/app-todos app)]
                                           (dpx :itemcount-sees-tds tds)
                                           (count tds))))
                 :separatorBuilder (fx/->CBAsIs
                                     (fn [ctx i] (m/Divider .thickness 0.5)))
                 :itemBuilder      (cF (fx/->CBAsIs
                                         (fn [ctx i]
                                           (fx/fx-render ctx
                                             (nth (mget me :kids) i)))))}
                {}
                (map item/todo-list-item
                  (todo/app-todos (fasc :app)))))))))))

;;; todo credits in alert

(defn my-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 100)}
    (fx/app-bar {:backgroundColor (.fromRGBO m/Color 245 245 245 1)
                 :title           (fx/column
                                    {;;:height 144
                                     :crossAxisAlignment m.CrossAxisAlignment/end,}
                                    (do                     ;;fx/expanded
                                      ;;{:flex 8}
                                      (fx/text
                                        {:style (p/TextStyle
                                                  .fontFamily "Helvetica Neue"
                                                  .color (todo/title-red)
                                                  .fontWeight m.FontWeight/w100
                                                  .fontSize 64.0)}
                                        (str title "/" (rand-int 99))))
                                    ;;#_ ;; todo show about box
                                    #_(fx/gesture-detector
                                        {:onTap (fx/with-ctx+as-is [me ctx]
                                                  #(do (dp :tapped!!!!!) nil))}
                                        (fx/text
                                          {:style (p/TextStyle
                                                    .fontFamily "Helvetica Neue"
                                                    .color m.Colors/black
                                                    .backgroundColor m.Colors/cyan
                                                    .fontWeight m.FontWeight/w100
                                                    .fontSize 16.0)}
                                          "?")))})))

(def test-todos
  ;;[]
  [{:title     "Wash car"
    :completed false}
   {:title     "Wash dog"
    :completed true}
   {:title     "Learn chess"
    :completed false}
   {:title     "X"
    :completed false}
   {:title     "Take nap 42"
    :completed false}])