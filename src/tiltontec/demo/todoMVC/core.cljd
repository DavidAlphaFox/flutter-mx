(ns tiltontec.demo.todoMVC.core
  (:require
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.model.core :refer [mget mset! mset!x mswap! fasc mkids mpar mkids] :as md]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.demo.todoMVC.todo :refer [my-app] :as todo]
    [tiltontec.demo.todoMVC.input :as input]
    [tiltontec.demo.todoMVC.items :as items]
    [tiltontec.demo.todoMVC.footer :as footer]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(declare credits app-bar todo-filters)

(defn make-app []
  (let [title "todo"]
    (fx/material-app
      {:title                      title
       :theme                      (m/ThemeData
                                     .fontFamily "Helvetica Neue"
                                     .backgroundColor (.fromRGBO m/Color 245 245 245 1))
       :debugShowCheckedModeBanner false}
      {:name             :app
       :todo-list        (cI nil)
       :todo-list-loader (cF+ [:obs (fn [_ me load _ _]
                                      (.then ^#/(Future dynamic) load
                                        (fn [tdl]
                                          (cty/with-fx-isolation
                                            (mset! me :todo-list tdl)))))]
                           ;; todo new cFuture cell type
                           ;; next returns an MX proxy of a to-do family, as a future
                           (todo/ToDoList-load "todo"))}
      (fx/scaffold
        {:appBar                  (todo-app-bar title)
         :backgroundColor         (.fromRGBO m/Color 245 245 245 1)
         :persistentFooterButtons [(todo-filters)]}
        (fx/ink {:color m.Colors/white}
          (fx/column
            (input/todo-controls)
            (items/todo-items)
            (about-credits)))))))

;;; -------------------------------------------------------------------------------

(defn todo-filters []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/center}
    (fx/expanded {:flex 1} (footer/items-remaining-display))
    (fx/expanded {:flex 2} (footer/completion-filters))
    (fx/expanded {:flex 1} (footer/clear-completed-button))))

(defn todo-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 80)}
    (fx/app-bar {:backgroundColor (.fromRGBO m/Color 245 245 245 1)
                 :title           (fx/column
                                    {:crossAxisAlignment m.CrossAxisAlignment/end}
                                    (fx/text
                                      {:style (p/TextStyle
                                                .fontFamily "Helvetica Neue"
                                                .color (todo/title-red)
                                                .fontWeight m.FontWeight/w100
                                                .fontSize 64.0)}
                                      title))})))

(defn about-credits []
  (let [faint (p/TextStyle
                .color m.Colors/grey
                .fontSize 14.0)]
    (fx/column
      (fx/text {:style faint}
        "Double-click to edit a todo")
      (fx/text {:style faint} (str "by Kenny Tilton, v." (rand-int 99)))
      (fx/text {:style faint}"Flutter \u2022 Matrix \u2022 ClojureDart")
      ;; todo find a better way for spacing from bottom; padding? container?
      (fx/text ""))))



