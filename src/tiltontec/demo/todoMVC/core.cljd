(ns tiltontec.demo.todoMVC.core
  (:require
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [tiltontec.model.core :refer [mget mset! mset!x mswap! fasc mkids mpar mkids] :as md]
    [tiltontec.cell.core :refer [cF cFn cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.demo.todoMVC.todo :as todo]
    [tiltontec.demo.todoMVC.input :as input]
    [tiltontec.demo.todoMVC.items :as items]
    [tiltontec.demo.todoMVC.footer :as footer]
    [tiltontec.demo.todoMVC.store-pref :as pref]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.integrity :as integrity]))

(declare credits app-bar todo-filters about-credits)

(defn make-app []
  (let [title "todo"]
    (fx/material-app
      {:title                      title
       :theme                      (m/ThemeData
                                     .fontFamily "Helvetica Neue"
                                     .backgroundColor (.fromRGBO m/Color 245 245 245 1))
       :debugShowCheckedModeBanner false}
      {:name         :app
       :db           (cF+ [:future? true]
                       (.getInstance prefs/SharedPreferences))

       :todos        (cF+ [:future? false] ;; hhack
                       (let [db (mget me :db)]
                         (dp :todos-sees-db-1 db)
                         (when (and db (dart/is? db prefs/SharedPreferences))
                           (dp :todos-sees-prefs-db-2 db)
                           (binding [pref/*pref* db]
                             ;; HHACK hardcode
                             (pref/collection-docs "todo")))))
       #_#_ :todos-loader (cF+ [:obs (fn [_ me todos _ _]
                                  (dp :loader-obs-sees-load todos)
                                  (cty/with-fx-isolation
                                    (mset! me :todos todos)))]
                       ;; next returns an MX proxy of a to-do family, as a future
                       (let [db (mget me :db)]
                         (dp :loader-sees-db-1 db)
                         (when (dart/is? db prefs/SharedPreferences)
                           (dp :loader-sees-mget-db-2 db)
                           (binding [pref/*pref* db]
                             ;; HHACK hardcode
                             (pref/collection-docs "todo")))))

       :todo-list    (cF (when-let [todos (mget me :todos)]
                           (binding [pref/*pref* (mget me :db)]
                             (todo/make-ToDoList "todo" todos))))}
      (fx/scaffold
        {:appBar                  (todo-app-bar title)
         :backgroundColor         (.fromRGBO m/Color 245 245 245 1)
         :persistentFooterButtons [(todo-filters)]}
        (fx/ink {:color m.Colors/white}
          (fx/column
            (input/todo-controls)
            (items/todo-items)
            (about-credits)))))))

;;; -------------------------------------------------------------------------------

(defn todo-filters []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/center}
    (fx/expanded {:flex 1} (footer/items-remaining-display))
    (fx/expanded {:flex 2} (footer/completion-filters))
    (fx/expanded {:flex 1} (footer/clear-completed-button))))

(defn todo-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 80)}
    (fx/app-bar {:backgroundColor (.fromRGBO m/Color 245 245 245 1)
                 :title           (fx/column
                                    {:crossAxisAlignment m.CrossAxisAlignment/end}
                                    (fx/text
                                      {:style (p/TextStyle
                                                .fontFamily "Helvetica Neue"
                                                .color (todo/title-red)
                                                .fontWeight m.FontWeight/w100
                                                .fontSize 64.0)}
                                      (str title (rand-int 99))))})))

(defn about-credits []
  (let [faint (p/TextStyle
                .color m.Colors/grey
                .fontSize 14.0)]
    (fx/padding
      {:padding (m.EdgeInsets/all 16.0)}
      {:name          :credits-toggle
       :show-credits? (cI false)}
      (fx/column
        (when (mget (fasc :credits-toggle) :show-credits?)
          (fx/column
            ;; todo does flutter let us place the style higher so referenced just once?
            (fx/text {:style faint}
              "Double-click to edit a todo")
            (fx/text {:style faint}
              "Make title blank to delete")
            (fx/text {:style faint} (str "by Kenneth Tilton, v." (rand-int 99)))
            (fx/text {:style faint} "Flutter \u2022 Matrix \u2022 ClojureDart")))
        (fx/icon-button
          {:onPressed (fx/with-ctx+as-is [me ctx]
                        (fn []
                          (cty/with-fx-isolation
                            (mswap! (fasc :credits-toggle) :show-credits? not))))
           :icon      (cF (fx/cb-with-ctx [me ctx]
                            (let [showing? (mget (fasc :credits-toggle) :show-credits?)]
                              (m/Icon (if showing? m.Icons/info_outline m.Icons/info)
                                .color m.Colors/grey))))})))))

