(ns tiltontec.demo.todoMVC.core
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [tiltontec.model.core :refer [mget mset! mswap! fasc mkids mpar mkids] :as md]
    [tiltontec.cell.core :refer [cF cFn cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :refer [in-my-context] :as fx]
    [tiltontec.demo.todoMVC.common :refer [my-app-db with-db as-dart-callback] :as cmm]
    [tiltontec.demo.todoMVC.todo :as todo]
    [tiltontec.demo.todoMVC.input :as input]
    [tiltontec.demo.todoMVC.items :as items]
    [tiltontec.demo.todoMVC.footer :as footer]
    [tiltontec.demo.todoMVC.store-pref :as pref]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

;;; --- the app bar -----------------------------------------------

(defn todo-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 80)}
    (fx/app-bar {:backgroundColor (.fromRGBO m/Color 245 245 245 1)
                 :title           (fx/column
                                    {:crossAxisAlignment m.CrossAxisAlignment/end}
                                    (fx/text
                                      {:style (p/TextStyle
                                                .fontFamily "Helvetica Neue"
                                                .color (cmm/title-red)
                                                .fontWeight m.FontWeight/w100
                                                .fontSize 64.0)}
                                      title))})))

;;; --- footer filters -------------------------------------------------

(defn todo-filter-group []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/center}
    (fx/expanded {:flex 1} (footer/items-remaining-display))
    (fx/expanded {:flex 2} (footer/completion-filters))
    (fx/expanded {:flex 1} (footer/clear-completed-button))))

;;; --- credits --------------------------------------------------------

(defn about-credits []
  (let [faint (p/TextStyle
                .color m.Colors/grey
                .fontSize 14.0)]
    (fx/padding
      {:padding (m.EdgeInsets/all 16.0)}
      {:name          :credits-toggle
       :show-credits? (cI false)}
      (fx/column
        (when (mget (fasc :credits-toggle) :show-credits?)
          (fx/column
            ;; todo does flutter let us place the style higher so referenced just once?
            (mapv #(fx/text {:style faint} %)
              ["Double-click to edit a todo"
               "Make title blank to delete"
               "by Kenny Tilton"
               "Flutter \u2022 Matrix \u2022 ClojureDart"])))
        (fx/icon-button
          {:onPressed (as-dart-callback []
                        (mswap! (fasc :credits-toggle) :show-credits? not))

           :icon      (cF (in-my-context [me ctx]
                            (m/Icon (if (mget (fasc :credits-toggle) :show-credits?)
                                      m.Icons/info_outline m.Icons/info)
                              .color m.Colors/grey)))})))))

;;; --- the app --------------------------------------------------------

(defn make-app []
  (let [title "todo"]
    (fx/material-app
      {:title                      title
       :theme                      (m/ThemeData
                                     .fontFamily "Helvetica Neue"
                                     .backgroundColor (.fromRGBO m/Color 245 245 245 1))
       :debugShowCheckedModeBanner false}
      {:name      :app
       :db        (cF+ [:future? true]
                    (.getInstance prefs/SharedPreferences))

       :todos     (cF (when-let [db (mget me :db)]          ;; todo have fasc take option to include me so we can use my-app-db
                        ;; wait for future from SP ^^ to complete
                        (with-db db
                          (dp :checking-todos db)
                          (pref/collection-docs "todo"))))

       :todo-list (cF (when-let [todos (mget me :todos)]
                        ;; ^^^ waits todos who wait on future db
                        (dp :got-todos! todos)
                        (with-db (mget me :db)
                          (todo/make-ToDoList "todo" todos))))}
      (fx/scaffold
        {:appBar                  (todo-app-bar title)
         :persistentFooterButtons [(todo-filter-group)]}
        (fx/ink {:color m.Colors/white}
          (fx/column
            (input/todo-controls)
            (items/todo-items)
            (about-credits)))))))
