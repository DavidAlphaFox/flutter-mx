(ns tiltontec.mx.model.peek
  (:require
    [cljd.string :as str]
    ["package:flutter/foundation.dart" :as fd]
    [tiltontec.mx.foundation :refer [MXImplementer PObserver mx-type]]))

;; --- assertions ---------------------------
(defn flutter-release-mode []
  fd/kReleaseMode)

(defn call-chk [condition & bits]
  (when-not condition
    (throw (Exception. (str/join " - " bits)))))

(defmacro chk [test & bits]
  `(when-not (tiltontec.mx.model.peek/flutter-release-mode)
     (tiltontec.mx.model.peek/call-chk ~test ~@bits)))

(defn dp [& bits]
  (when-not false                                           ;; (nil? (first bits))
    (dart:core/print (str/join " - " (list* :DP
                                       (map #(if (nil? %) :NIL %) bits))))))

(defn atom? [x]
  (dart/is? x cljd.core/Atom))

(deftype Model []
  :extends MXImplementer
  PObserver
  (observe [this prop me new-value prior-value cell]
    #_(dp :Model-not-observing (cinfo cell))))

(defn md-type
  ([md] (md-type md :anon))
  ([md tag]
   (chk md
     (str "md-type> argument null: " tag))
   (chk (atom? md)
     (str "md-type> argument not atom " md tag))
   (chk (map? @md)
     (str "md-type> argument atom not map deref: " (or @md :NIL) "<<<<deref: " tag))
   (mx-type md)))

(defn mname [me]
  (:name @me))

;; --- defmodel rizing ---------------------

(defn mref?
  ([x]
   (mref? x :anon))
  #_(when (and x (atom? x))
      (dp :mref-sees (md-type x) (meta x)))
  ([x tag]
   (and x (atom? x)
     (dart/is? (md-type x tag) Model))))

;; --- md-quiesced? ---

(defn md-quiesced? [md]
  (if-let [m (meta md)]
    (= :md-quiesced (:state m))
    false))

(defn minfo
  ([md]
   (minfo md false))
  ([md verbose]
   (cond
     (nil? md) :null-md
     (not (atom? md)) :not-atom-md
     (not (mref? md)) (do (dp :atom-not-md-c @md)
                          :atom-not-md-c)
     :else (if verbose
             [(:name @md) (meta md)]
             [:MI (or (:name @md) :anon)
              :fxc (:fx-class @md)
              :state (:state (meta md))
              :sid (:sid (meta md))
              ;:mxtype (mx-type md)
              ]))))

;; --- quiescing --------------------

(def ^:dynamic *md-quiescing* false)



