(ns tiltontec.bug.benc-quiesce
  (:require
    ["dart:core" :as dc]
    ["dart:core" :as dart]
    ["dart:ui" :as dui]
    ["package:flutter/foundation.dart" :as foundation]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tiltontec.matrix.api :refer [dp dpx cF cF+ cI make mset! mget cFkids fm* fmu fmuv fasc with-cc] :as mx]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :rename {as-dart-callback dfn} :as fx]

    [tiltontec.cell.core :refer [cf-freeze]]
    [tiltontec.flutter-mx.factory :as fxf]

    ["package:flutter/foundation.dart" :as fd]))

(def fn-r-env (mx/make :routes {:route-1 (fn [] (route-1))
                                :route-2 (fn [] (route-2))}
                       :route (cI :route-1)
                       :current-route (cF (get (mget me :routes) (mget me :route)))))

(def once-r-env (mx/make :routes {:route-1 (route-1)
                                  :route-2 (route-2)}
                         :route (cI :route-1)
                         :current-route (cF (get (mget me :routes) (mget me :route)))))

(defn button [title action]
  (fx/gesture-detector
    {:onTap (fx/as-dart-callback [] (action))}
    (fx/center
      (m/Text title .style (m/TextStyle .fontSize 18 .fontWeight m/FontWeight.w800
                                        .color m/Colors.blue)))))

(defn route-1 []
  (fx/column {}{:fx$quiesce :never}
    (fx/text (str "current step: " (mget (fasc :scaffo) :step)))
    (fx/elevated-button {:onPressed (fx/as-dart-callback [] (mset! (fasc :scaffo) :step 2))}
                        (fx/text "Change to next step"))
    (fx/elevated-button {:onPressed (fx/as-dart-callback [] (mset! (fasc :scaffo) :step 1))}
                        (fx/text (str "Change to first step")))
    (fx/elevated-button {:onPressed (fx/as-dart-callback [] (mset! once-r-env :route :route-2))}
                        (fx/text (str "Change to route 2")))

    (case (mget (fasc :scaffo) :step)
      1 (fx/column (fx/text "hi -- ")
                   (button "you'd think this would change" (fn [] (mx/dp :button-1))))
      2 (fx/column (fx/text "howdy -- ")
                   (fx/container (fx/in-my-context [_ ctx] (fx/text (str ctx))))
                   (button "And now it does :)" (fn [] (mx/dp :button-2)))))))

(defn route-2 []
  (fx/column {}{:fx$quiesce :never}
             (fx/text "Hello World")
             (button "route back to 1" (fn [] (mset! once-r-env :route :route-1)))))

(defn make-app []
  (let [title "Why Hello"]
    (fx/material-app
      {:title title}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        {:name          :scaffo
         :step          (cI 1)
         :current-route (cF (mget once-r-env :current-route))}
        (fx/center (do (mx/faprop :current-route me)))))))