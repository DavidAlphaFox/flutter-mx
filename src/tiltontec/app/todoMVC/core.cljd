(ns tiltontec.app.todoMVC.core
  (:require
    [tiltontec.model.core :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.app.todoMVC.todo :as todo]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tiltontec.cell.base :refer [cinfo minfo] :as cty]

    [tiltontec.util.base :refer [dprn dp dpx]]))

(declare my-app-bar my-fab todo-input todo-list-item)

(comment
  (todo/test-store-one-map)
  (todo/load-test-todos)
  (todo/just-hack)
  )

(defn make-app []
  (let [title "todos"]
    (fx/material-app {:title title}
      {:name    :app
       :todo-db (cI [{:title     "Wash car"
                      :completed false
                      :deleted   false}
                     {:title     "Wash dog"
                      :completed true
                      :deleted   false}
                     {:title     "Walk dog"
                      :completed false
                      :deleted   false}])}
      (fx/scaffold
        {:appBar (my-app-bar title)
         :floatingActionButton
         (my-fab)}
        (fx/column
          (fx/padding
            {:padding ^:const (m.EdgeInsets/all 16.0)}
            (todo-input))

          (fx/expanded                                      ;; required sizer to join column
            (fx/list-view
              {:padding m.EdgeInsets/zero}
              (for [{:keys [deleted] :as todo} (md/fmuval :app :todo-db)
                    :when (not deleted)]
                ;; arrange for a key to avoid excess rebuild
                ;; todo NEXT break this out and then evolve the list item
                ;;      make it a row with a "completed" checkbox
                (todo-list-item todo)))))))))

; Text('\$8.99', style: TextStyle(decoration: TextDecoration.lineThrough))
;;; --- breakouts -----------------

(defn todo-list-item [{:keys [title completed deleted] :as todo}]
  (fx/list-tile
    {:leading (fx/check-box
                {:value     (cI completed
                              :obs (fn-obs (dp :completed-OBS-sees-new new)))
                 :shape     (fx/rounded-rectangle-border
                              {:borderRadius #_(m.BorderRadius/all (m.Radius/circular 10.0))
                               (m.BorderRadius/circular 16.0)})
                 :onChanged (cF (fx/->CBAsIs
                                  (fn [value]
                                    (dp :check-box-ONchanged-to!!! value)
                                    (md/mset! me :value value))))})
     :title   (cF (let [ldg (md/mget me :leading)]
                    (dpx :ldg (minfo ldg))
                    (dp :title-sees-ldg-value (md/mget ldg :value) title)


                    ;    styling is not changing when we click the checkbox
                    ; it is computing correctly
                    ; so we just need a setState or sth

                    (fx/text!
                      {:style (cF (if (md/mget ldg :value)
                                    (do (dp :line-thru!!!!!!)
                                        (p/TextStyle
                                          :color m.Colors/grey
                                          :decoration p.TextDecoration/lineThrough))
                                    (p/TextStyle :color m.Colors/black)))}
                      title)

                    #_(m/Text title
                        :style (if (md/mget ldg :value)
                                 (do (dp :line-thru!!!!!!)
                                     (p/TextStyle
                                       :color m.Colors/grey
                                       :decoration p.TextDecoration/lineThrough))
                                 (p/TextStyle :color m.Colors/black)))))
     :onTap   (fx/cb-with-ctx [me ctx]
                (fx/->CBAsIs
                  #(dp :hi-tap title)))}
    {:name :my-list-tile}))

;; ---- below is a circular checkbox for the "completed" checkbox in each row
; Checkbox(
;  shape: RoundedRectangleBorder(
;    borderRadius: BorderRadius.circular(10)),
;)

;; ----- below another oldskool round checkbox
; bool _value = false;
;
;  @override
;  Widget build(BuildContext context) {
;    return Scaffold(
;      appBar: AppBar(
;        title: Text("Circle CheckBox"),
;      ),
;      body: Center(
;          child: InkWell(
;        onTap: () {
;          setState(() {
;            _value = !_value;
;          });
;        },
;        child: Container(
;          decoration: BoxDecoration(shape: BoxShape.circle, color: Colors.blue),
;          child: Padding(
;            padding: const EdgeInsets.all(10.0),
;            child: _value
;                ? Icon(
;                    Icons.check,
;                    size: 30.0,
;                    color: Colors.white,
;                  )
;                : Icon(
;                    Icons.check_box_outline_blank,
;                    size: 30.0,
;                    color: Colors.blue,
;                  ),
;          ),
;        ),
;      )),
;    );
;  }

(defn todo-input []
  (fx/text-field {:decoration  (m/InputDecoration
                                 :hintText "What needs doing?"
                                 :border (m/OutlineInputBorder))
                  :onSubmitted (cF (fx/->CBAsIs
                                     (fn [value]
                                       ;; todo clear the text edit field
                                       (md/mset! me :value value)
                                       (md/mswap! (md/fasc :app) :todo-db conj
                                         {:title     value
                                          :completed false
                                          ;; todo did we get away with omitting :deleted?
                                          }))))
                  :controller  (cFonce (let [c (m/TextEditingController :text (md/mget me :value))]
                                         (.addListener c
                                           (fn []
                                             (let [value (.text c)]
                                               (dp (str "todo input field: " value))
                                               (md/mset! me :value value))))
                                         c))}
    {:name  :todo-input
     :value (cI "start value"
              :obs (fn-obs (dp :val-obs-sees new)))}))

(defn my-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 100)}
    (fx/app-bar {:title (fx/text
                          {:style (p/TextStyle
                                    :fontFamily "RobotoMono"
                                    :color m.Colors/red
                                    :fontWeight m.FontWeight/w100
                                    :fontSize 64.0
                                    ;;:height 4.0
                                    )}
                          title)})))

(defn my-fab []
  (fx/floating-action-button
    {:onPressed (fx/cb-with-ctx [me ctx]
                  (fx/->CBAsIs
                    #(m/showDialog
                       :context ctx
                       :builder (fn [_] (m/AlertDialog
                                          :content (m/Text (.text ^m/TextEditingController
                                                             (md/mget (md/fm* :todo-input) :controller))))))))
     :tooltip   "Show me the value!"}
    (m/Icon m.Icons/text_fields)))