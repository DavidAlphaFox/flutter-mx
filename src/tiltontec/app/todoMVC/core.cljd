(ns tiltontec.app.todoMVC.core
  (:require
    [tiltontec.model.core :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.app.todoMVC.todo :as todo]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.util.base :refer [dprn dp dpx]]))

(declare my-app-bar my-fab todo-input todo-list-item test-todos
  clear-completed-button items-left)

; border: Border.all(
;      color: Colors.black,
;      width: 8,
;    ),
;    borderRadius: BorderRadius.circular(12),

; Border.all( color: Colors.black, width: 8, )
(defn completion-filters []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/spaceEvenly}
    (fx/expanded {:flex 1}
      (fx/container
        {:decoration (m/BoxDecoration
                       :border (.all m/Border :color (.-grey m/Colors) :width 1)
                       :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 3.0)))}

        (fx/center (m/Text "All"))))
    (fx/expanded {:flex 1} (m/Text "Active"))
    (fx/expanded {:flex 1} (m/Text "Fini"))))

(defn make-app []
  (let [title "todos"]
    (fx/material-app
      {:title                      title
       :debugShowCheckedModeBanner false}
      {:name    :app
       ;; todo persist in localstorage
       :todo-db (cI (doall
                      (map (fn [{:keys [title completed]}]
                             (todo/make-todo title completed))
                        test-todos)))}
      (fx/scaffold
        {:appBar                  (my-app-bar title)
         #_#_:floatingActionButton (my-fab)
         :persistentFooterButtons [(fx/row
                                     {:mainAxisAlignment m.MainAxisAlignment/center}
                                     (fx/expanded {:flex 1} (items-left-display))
                                     (fx/expanded {:flex 2} (completion-filters))
                                     (fx/expanded {:flex 1} (clear-completed-button))

                                     )]
         #_[(items-left-display)
            (completion-filters)
            (clear-completed-button)]}
        (fx/column
          (fx/padding
            {:padding ^:const (m.EdgeInsets/all 16.0)}
            (todo-input))

          (fx/expanded                                      ;; required sizer to join column
            (fx/list-view
              {:padding m.EdgeInsets/zero}
              {:name :da-list-view}
              (map todo-list-item
                (md/fmuval :app :todo-db)))))))))

; Scaffold(
;  body: Container(
;    color: Colors.white,
;    child: Center(child: Text("Flutter"),),
;  ),
;  bottomNavigationBar: new Container(
;    padding: EdgeInsets.all(0.0),
;    child: Row(
;      mainAxisSize: MainAxisSize.max,
;      children: <Widget>[
;
;        Expanded(
;          flex: 1,
;          child: FlatButton.icon(
;            onPressed: () {
;            },
;            icon: Icon(Icons.search),
;            label: Text("Search"),
;          ),
;        ),

;;; todo toggle-all chevron
;;; todo delete icon; visible iff selected
;;; todo credits
;;; todo all/completed/open
;;; --- breakouts -----------------

(defn items-left-display []
  (fx/text! {}
    ;; todo warn (how?) if they use regular text with rule or c-in
    {:name :items-left}
    (let [db (md/fmuval :app :todo-db)
          left (remove #(md/mget % :completed) db)]
      (dp :items-left-sees!!!! (count left) (doall (map (fn [todo]
                                                          [(md/mget todo :sid)
                                                           (md/mget todo :title)])
                                                     left)))
      (str (count left) (if (= 1 (count left))
                          " item" " items")))))

(defn clear-completed-button []
  (fx/visibility!
    {:visible           (cF (let [db (md/fmuval :app :todo-db)]
                              (if (some (fn [todo]
                                          (md/mget todo :completed)) db)
                                true false)))
     :maintainSize      true
     :maintainAnimation true
     :maintainState     true}
    {:name :clear-completed-button}
    (fx/text-button
      {:onPressed (fx/cb-with-ctx [me ctx]
                    (fx/->CBAsIs
                      (fn []
                        (let [app (md/fasc :app)
                              db (md/mget app :todo-db)
                              remaining (remove #(md/mget % :completed) db)]
                          (dp :db-in db)
                          (dp :rem remaining)
                          (md/mset! (md/fasc :app) :todo-db remaining)))))}
      (m/Text "Clear completed"))))

(defn todo-list-item [todo]
  (let [title (md/mget todo :title)
        sid (md/mget todo :sid)]
    (fx/list-tile
      {:key     (m/ValueKey. sid)
       :leading (fx/check-box
                  {:value     (cF (or (md/mget todo :completed) false))
                   :shape     (fx/rounded-rectangle-border
                                {:borderRadius #_(m.BorderRadius/all (m.Radius/circular 10.0))
                                 (m.BorderRadius/circular 16.0)})
                   :onChanged (cF (fx/->CBAsIs
                                    (fn [value]
                                      (md/mset! todo :completed value))))}
                  {:name :da-checkbox})
       :trailing (fx/icon-button
                   {:onPressed (fx/cb-with-ctx [me ctx]
                                 (fx/->CBAsIs
                                   (fn []
                                     (let [app (md/fasc :app)
                                           db (md/mget app :todo-db)
                                           remaining (remove #(= sid (md/mget % :sid)) db)]
                                       (dp :db-in db)
                                       (dp :rem remaining)
                                       (md/mset! (md/fasc :app) :todo-db remaining)))))
                    :icon      (m/Icon m.Icons/delete :color m.Colors/orange)
                    :color     (fx/cb-with-ctx [me ctx]
                                 (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})

       :title   (cF (let [ldg (md/mget me :leading)
                          #_#_title (md/mget todo :title)]
                      ;; todo give leading property occupant an mx-name and
                      ;;      modify search to find widgets in places like :leading
                      (fx/text!
                        {:style (cF (if (md/mget ldg :value)
                                      (p/TextStyle
                                        :color m.Colors/grey
                                        :decoration p.TextDecoration/lineThrough)
                                      (p/TextStyle :color m.Colors/black)))}
                        title)))}
      {:name :my-list-tile})))

(defn todo-input []
  (do #_#_fx/focus+focus-node
          {;;:autofocus true
           :focusNode (m/FocusNode :autofocus true)}
    (fx/text-field {:autofocus   true
                    :decoration  (m/InputDecoration
                                   :hintText "What needs doing?"
                                   :border (m/OutlineInputBorder))
                    :onSubmitted (cF (fx/->CBAsIs
                                       (fn [value]
                                         (.clear (md/mget me :controller)) ;; clear the input text field, as per spec
                                         (md/mset! me :value value)
                                         ;; refocus
                                         ;(dp :refocusing!!!!!!!!! (md/mget me :focuser))
                                         ;(.requestFocus (md/mget me :focuser))
                                         ;; make new to-do!!

                                         (md/mswap! (md/fasc :app) :todo-db concat
                                           [(todo/make-todo value false)]))))
                    :controller  (cFonce (let [c (m/TextEditingController :text (md/mget me :value))]
                                           ;; todo package this as a reusable
                                           (.addListener c
                                             (fn []
                                               (let [value (.text c)]
                                                 (dpx (str "todo input field: " value))
                                                 (md/mset! me :value value))))
                                           c))}
      {:name  :todo-input
       :value (cI nil
                #_#_:obs (fn-obs (dp :val-obs-sees new)))
       #_#_:focuser (m/FocusNode)})))

(defn my-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 100)}
    (fx/app-bar {:title (fx/text
                          {:style (p/TextStyle
                                    :fontFamily "RobotoMono"
                                    :color m.Colors/white
                                    :fontWeight m.FontWeight/w100
                                    :fontSize 64.0)}
                          title)})))

#_;; not needed, but save maybe for DB reset?
        (defn my-fab []
          (fx/floating-action-button
            {:onPressed (fx/cb-with-ctx [me ctx]
                          (fx/->CBAsIs
                            #(m/showDialog
                               :context ctx
                               :builder (fn [_] (m/AlertDialog
                                                  :content (m/Text (.text ^m/TextEditingController
                                                                     (md/mget (md/fm* :todo-input) :controller))))))))
             :tooltip   "Show me the value!"}
            (m/Icon m.Icons/text_fields)))

;; todo hide footer if no items
;; todo refocus todo input after clearing

(def test-todos
  ;;[]
  [{:title     "Wash car"
    :completed false}
   {:title     "Wash dog"
    :completed false}
   {:title     "Walk dog"
    :completed false}])