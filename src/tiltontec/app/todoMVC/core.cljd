(ns tiltontec.app.todoMVC.core
  (:require
    [tiltontec.model.core :as md]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI c_F cFonce]]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.app.todoMVC.todo :as todo]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tiltontec.cell.base :refer [cinfo minfo] :as cty]

    [tiltontec.util.base :refer [dprn dp dpx]]))

(declare my-app-bar my-fab todo-input todo-list-item test-todos)

(comment
  (todo/test-store-one-map)
  (todo/load-test-todos)
  (todo/just-hack)
  )

(defn make-app []
  (let [title "todos"]
    (fx/material-app
      {:title                      title
       :debugShowCheckedModeBanner false}
      {:name    :app
       ;; todo persist in localstorage
       :todo-db (cI test-todos)}
      (fx/scaffold
        {:appBar                  (my-app-bar title)
         #_#_:floatingActionButton (my-fab)
         :persistentFooterButtons [(fx/text {}
                                     {:name :items-left}
                                     (let [db (md/fmuval :app :todo-db)
                                           left db]
                                       (assert db)
                                       (dp :todos db)
                                       (str (count db) (if (= 1 (count left))
                                                         " item" " items")
                                         " left")))
                                   (m/Text "All")
                                   (m/Text "Active")
                                   (m/Text "Completed")
                                   (fx/visibility
                                     {:visible (cF (let [db (md/fmuval :app :todo-db)]
                                                     (if (some (fn [todo]
                                                             (dp :2do!! todo)
                                                                 (and (:completed todo)
                                                                   (not (:deleted todo)))) db)
                                                       true false)))
                                      :maintainSize true
                                      :maintainAnimation true
                                      :maintainState true}
                                     (fx/text-button
                                       {:onPressed (fx/cb-with-ctx [me ctx]
                                                     (fx/->CBAsIs
                                                       (fn []
                                                         (dp :BAM-text-button))))}
                                       (m/Text "Clear completed")))]}
        (fx/column
          (fx/padding
            {:padding ^:const (m.EdgeInsets/all 16.0)}
            (todo-input))

          (fx/expanded                                      ;; required sizer to join column
            (fx/list-view
              {:padding m.EdgeInsets/zero}
              (for [{:keys [deleted] :as todo} (md/fmuval :app :todo-db)
                    :when (not deleted)]
                ;; arrange for a key to avoid excess rebuild
                ;; todo NEXT break this out and then evolve the list item
                ;;      make it a row with a "completed" checkbox
                (todo-list-item todo)))))))))

;;; todo toggle-all chevron
;;; todo clear completed button
;;; todo delete icon; visible iff selected
;;; todo credits
;;; todo all/completed/open
;;; --- breakouts -----------------

(defn todo-list-item [{:keys [title completed deleted] :as todo}]
  (fx/list-tile
    {:leading (fx/check-box
                {:value     (cI completed
                              :obs (fn-obs (dpx :completed-OBS-sees-new new)))
                 :shape     (fx/rounded-rectangle-border
                              {:borderRadius #_(m.BorderRadius/all (m.Radius/circular 10.0))
                               (m.BorderRadius/circular 16.0)})
                 :onChanged (cF (fx/->CBAsIs
                                  (fn [value]
                                    (dpx :check-box-ONchanged-to!!! value)
                                    (md/mset! me :value value))))})
     :title   (cF (let [ldg (md/mget me :leading)]
                    (fx/text!
                      {:style (cF (if (md/mget ldg :value)
                                    (p/TextStyle
                                      :color m.Colors/grey
                                      :decoration p.TextDecoration/lineThrough)
                                    (p/TextStyle :color m.Colors/black)))}
                      title)))
     #_#_:onTap (fx/cb-with-ctx [me ctx]
                  (fx/->CBAsIs
                    #(dp :hi-tap title)))}
    {:name :my-list-tile}))

(defn todo-input []
  (do #_#_fx/focus+focus-node
          {;;:autofocus true
           :focusNode (m/FocusNode :autofocus true)}
    (fx/text-field {:autofocus   true
                    :decoration  (m/InputDecoration
                                   :hintText "What needs doing?"
                                   :border (m/OutlineInputBorder))
                    :onSubmitted (cF (fx/->CBAsIs
                                       (fn [value]
                                         (.clear (md/mget me :controller)) ;; clear the input text field, as per spec
                                         (md/mset! me :value value)
                                         ;; refocus
                                         ;(dp :refocusing!!!!!!!!! (md/mget me :focuser))
                                         ;(.requestFocus (md/mget me :focuser))
                                         ;; make new to-do!!
                                         (md/mswap! (md/fasc :app) :todo-db conj
                                           {:title     value
                                            :completed false
                                            ;; todo did we get away with omitting :deleted?
                                            }))))
                    :controller  (cFonce (let [c (m/TextEditingController :text (md/mget me :value))]
                                           ;; todo package this as a reusable
                                           (.addListener c
                                             (fn []
                                               (let [value (.text c)]
                                                 (dp (str "todo input field: " value))
                                                 (md/mset! me :value value))))
                                           c))}
      {:name  :todo-input
       :value (cI nil
                :obs (fn-obs (dp :val-obs-sees new)))
       #_#_:focuser (m/FocusNode)})))

(defn my-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 100)}
    (fx/app-bar {:title (fx/text
                          {:style (p/TextStyle
                                    :fontFamily "RobotoMono"
                                    :color m.Colors/white
                                    :fontWeight m.FontWeight/w100
                                    :fontSize 64.0)}
                          title)})))

#_;; not needed, but save maybe for DB reset?
        (defn my-fab []
          (fx/floating-action-button
            {:onPressed (fx/cb-with-ctx [me ctx]
                          (fx/->CBAsIs
                            #(m/showDialog
                               :context ctx
                               :builder (fn [_] (m/AlertDialog
                                                  :content (m/Text (.text ^m/TextEditingController
                                                                     (md/mget (md/fm* :todo-input) :controller))))))))
             :tooltip   "Show me the value!"}
            (m/Icon m.Icons/text_fields)))

;; todo hide footer if no items
;; todo refocus todo input after clearing

(def test-todos
  [{:title     "Wash dog"
    :completed true
    :deleted   false}]
  #_[{:title     "Wash car"
      :completed false
      :deleted   false}
     {:title     "Wash dog"
      :completed true
      :deleted   false}
     {:title     "Walk dog"
      :completed false
      :deleted   false}])