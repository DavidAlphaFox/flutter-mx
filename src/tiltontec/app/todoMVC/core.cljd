(ns tiltontec.app.todoMVC.core
  (:require
    [tiltontec.model.core :as md]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.store :as store]
    [tiltontec.app.todoMVC.todo :as todo]
    ["dart:convert" :as convert]
    ["package:localstore/localstore.dart" :as ls]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tiltontec.util.base :refer [dprn dp dpx]]))

(defn make-app []

  ;(todo/test-store-one-map)
  ;(todo/load-test-todos)
  ;;(todo/just-hack)

  (let [title "todos"]
    (fx/material-app {:title title}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text
                                       {:style (p/TextStyle
                                                 :fontFamily "RobotoMono"
                                                 :color m.Colors/black
                                                 :fontWeight m.FontWeight/w100
                                                 :fontSize 64.0)}
                                       title)})
         :floatingActionButton
         (fx/floating-action-button
           {:onPressed (fx/cb-with-ctx [me ctx]
                         (fx/->CBAsIs
                           #(m/showDialog
                              :context ctx
                              :builder (fn [_] (m/AlertDialog
                                                 :content (m/Text (.text ^m/TextEditingController
                                                                    (md/mget (md/fm* :test-input) :controller))))))))
            :tooltip   "Show me the value!"}
           (m/Icon m.Icons/text_fields))}
        (fx/column
          (fx/padding
          {:padding ^:const (m.EdgeInsets/all 16.0)}
          (fx/text-field {:decoration (m/InputDecoration
                                        :hintText "What needs doing?"
                                        :border (m/OutlineInputBorder))
                          :controller (m/TextEditingController)}
            ;; todo add to dispose ^^^
            {:name :test-input}))

          (fx/expanded
            (fx/list-view
              {:padding m.EdgeInsets/zero}
              (for [{:keys [title completed deleted]} (store/coll-get-all "todo")
                    :when (not deleted)]
                (fx/list-tile
                  {:title (m/Text title)
                   :onTap (fx/cb-with-ctx [me ctx]
                            (fx/->CBAsIs
                              #(dp :hi-tap)))})))))))))

