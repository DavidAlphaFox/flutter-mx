(ns tiltontec.app.x05-fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.core :as cell :refer [cF c_F cF_ cF+ cI make-c-formula c-fn]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx]

    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]))

(declare fake-item expandable-fab show-action action-button)

(defn make-app []
  (fx/material-app {:title                      "Expandable Fab"
                    :debugShowCheckedModeBanner false}
    {:name :mat-app}
    (fx/scaffold
      {:appBar               (fx/app-bar {:title (fx/text "Expandable FAB")})
       :floatingActionButton (expandable-fab
                               :initial-open? false
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])}
      (fx/list-view+builder
        {:padding     (m.EdgeInsets/symmetric :vertical 8.0)
         :itemCount   25
         :itemBuilder (fx/->cb-as-is
                        (fn [ctx i] (fake-item (odd? i))))}))))

(declare expanding-action-button
  tap-to-close-fab
  tap-to-open-fab)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or {initial-open? false}}]
  (fx/sized-box+expand-ful
    {}                                                      ;; <= necessary placeholder
    {:name             :fab
     ; --- Dart lifecycle ---------------------------
     :dispose          (fx/->cb-as-is
                         (fn [this me]                      ;; todo wrap this
                           (when-let [controller (fx/my-controller)]
                             (.dispose controller))))
     ; --- animation mechanics ----------------------
     :controller       (cF (fx/when-my-state [state]
                             (m/AnimationController
                               :value (if initial-open? 1.0 0.0)
                               :duration ^:const (dart:core/Duration :milliseconds 250)
                               :vsync state)))
     :expand-animation (cF (when-let [c (fx/my-controller)]
                             (m/CurvedAnimation
                               :curve m.Curves/fastOutSlowIn
                               :reverseCurve m.Curves/easeOutQuad
                               :parent c)))
     ; --- behavior -------------------------
     :step             (cF (/ 90.0 (dec (count actions))))
     :open?            (cI initial-open?
                         ;; reactive "observers" are one way changed values turn into app behavior
                         :obs (fn [prop-name me new-value prior-value cell]
                                (when-let [c (fx/my-controller)] ;; not until first render installation
                                  (if new-value
                                    (.forward c)
                                    (.reverse c)))))}
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (doall (do
               (map-indexed
                 (fn [i action]
                   (expanding-action-button me
                     :direction-degrees (* i (fmuv :step :fab))
                     :max-distance distance
                     :progress-key :expand-animation
                     :action action))
                 actions)))
      (tap-to-open-fab me))))

(defn expanding-action-button [me & {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation (mget (md/fasc :fab) :expand-animation)
     :builder   (fx/->cb-as-is
                  ;; "as is"? We need a callback for Flutter itself to hit, so this next fn is passed thru as is
                  (fn [ctx child]
                    (let [progress ^m/CurvedAnimation (mget (md/fasc :fab) :expand-animation)
                          offset (m.Offset/fromDirection
                                   (* direction-degrees (/ math/pi 180.0))
                                   (* (.value progress) max-distance))]
                      ;; alpha widgets are welcome at leaves of the MX tree...
                      (f/widget
                        (f/nest
                          (m/Positioned
                            :right (+ 4.0 (.dx offset))
                            :bottom (+ 4.0 (.dy offset)))
                          (m.Transform/rotate
                            :angle (* (- 1.0 (.value progress))
                                     math/pi 0.5))
                          child)))))}
    {:name :ea-button}
    (fx/fade-transition
      {:opacity (mget (md/fasc :fab) :expand-animation)}
      {:name :fade-trans}
      (action-button
        :icon (:icon action)
        :onPressed (fx/cb-with-ctx [me ctx]
                     (fx/->cb-as-is
                       #(show-action ctx action)))))))

(defn show-action [ctx action]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (fx/render-fx ctx
                 (fx/alert-dialog
                   ;; todo extend resolve to handle vectors then convert VVVV
                   {:actions [(m/TextButton
                                :onPressed #(-> ctx m.Navigator/of .pop)
                                :child ^:const (m/Text "CLOSE"))]}
                   {}
                   (fx/text {} {} (:title action)))))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape        ^:const (m/CircleBorder)
                :clipBehavior m.Clip/antiAlias
                :color        (fx/cb-with-ctx [me ctx]
                                (-> (m.Theme/of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    {}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     (fx/cb-with-ctx [me ctx]
                    (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    {}
    (fx/center {} {}
      (fx/material {:shape        ^:const (m/CircleBorder)
                    :clipBehavior m.Clip/antiAlias
                    :elevation    4.0}
        {}
        (fx/ink-well {:onTap (fx/->cb-as-is #(md/mswap! (md/fasc :fab par) :open? not))} {}
          (fx/padding {:padding ^:const (m.EdgeInsets/all 8.0)} {}
            (fx/icon {:icon  m.Icons/close
                      :color (fx/cb-with-ctx [me ctx]
                               (.primaryColor (m.Theme/of ctx)))} {})))))))

(defn random-to-double [max]
  (.toDouble (rand-int max)))

(defn random-color []
  (m.Color/fromRGBO (rand-int 256)
    (rand-int 256)
    (rand-int 256)
    1))

;;; -------------------------------------------------------------

(defn- tap-to-open-fab [par]
  (fx/ignore-pointer
    {:ignoring (mget (md/fasc :fab par) :open?)}
    (fx/animated-opacity {:opacity  (cF (let [open? (mget (md/fasc :fab par) :open?)]
                                          (if open? 0.0 1.0)))
                          :curve    ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
                          :duration ^:const (dart:core/Duration :milliseconds 250)}
      {}
      (fx/floating-action-button {:onPressed (fx/->cb-as-is
                                               (fn ^void []
                                                 (md/mswap! (md/fasc :fab par) :open? not)))}
        {:name :fab-button-in-fact}
        ;; hhack
        (fx/icon {:icon m.Icons/create} {})))))

;; -- full tap-to-open version, but container breaks it
#_(fx/animated-container {:decoration (cF (m/BoxDecoration
                                            :color (random-color)
                                            :borderRadius (m.BorderRadius/circular (random-to-double 100))))
                          :duration   ^:const (Duration :seconds 1)
                          :curve      m.Curves/fastOutSlowIn}
    #_{:transformAlignment m.Alignment/center
       :transform          (cF (let [open? false #_(mget (md/fasc :fab par) :open?)]
                                 (m.Matrix4/diagonal3Values
                                   (if open? 0.7 1.0)
                                   (if open? 0.7 1.0)
                                   1.0)))
       :duration           ^:const (dart:core/Duration :milliseconds 250)
       :curve              ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut)}
    (fx/animated-opacity {:opacity  (cF (let [open? (mget (md/fasc :fab par) :open?)]
                                          (dp :opacity-sees-open?!!!!!!! open?)
                                          (if open? 0.0 1.0)))
                          :curve    ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
                          :duration ^:const (dart:core/Duration :milliseconds 250)}
      (fx/floating-action-button {:onPressed (fn [me ctx]
                                               (md/mswap! (md/fasc :fab par) :open? not))}
        (fx/icon {:icon m.Icons/create}))))

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 m.Colors/cyan))))

#_(dart:core.Function/apply m/Container nil
    ^#/(Map Symbol dynamic) {:margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
                             :height (if is-big? 128.0 36.0)
                             :decoration
                             (m/BoxDecoration
                               :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
                               :color (.-shade300 Colors/pink))})
