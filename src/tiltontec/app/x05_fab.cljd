(ns tiltontec.app.x05-fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type minfo cinfo unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell :refer [cF c_F cF_ cF+ cI make-c-formula c-fn]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.corex :as fxx]

    [tiltontec.mx-flutter.core :as fx
     :refer [center text scaffold column list-view+builder my-state]]
    [tiltontec.mx-flutter.corex :as fxx]
    ["package:flutter/widgets.dart" :as w
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    [tiltontec.util.core :as util :refer [rmap-meta-setf]]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.cell.integrity :as integrity]
    [tiltontec.mx-flutter.tag :as tag]))

(declare fake-item expandable-fab show-action action-button)

(defn make-app []
  (fxx/material-app {:title                      "Expandable Fab/FXX"
                     ;; save this :theme                      (.dark m/ThemeData)
                     :debugShowCheckedModeBanner false}
    {:name :mat-app}
    (fxx/scaffold {:name :scaff}
      ; todo fxx/app-bar
      {:appBar               (AppBar :title (Text (str "Expandable Fab/FXX " (rand-int 99))))
       :floatingActionButton (expandable-fab
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])}
      (fx/list-view+builder {}                              ;; todo mxify
        {:padding     (m.EdgeInsets/symmetric :vertical 8.0)
         :itemCount   25
         :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

(declare expanding-action-button
  tap-to-close-fab
  tap-to-open-fab)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or [initial-open? false]}]
  (fxx/sized-box+expand-ful
    {}
    {:name             :fab
     :initState        (fn [this me]
                         (binding [cty/*within-integrity* true]
                           (do ;; integrity/with-cc :exfab-inistate!!!!!!!!!!!!!
                             (md/mset! me :fx$state this))))
     :fx$state         (cI nil)
     #_ #_ :fx$ctx           (cF (when-let [st ^State? (fxx/my-state)]
                             (.context st)))
     :controller       (cF (when-let [state (fxx/my-state)]
                             (m/AnimationController
                               :value (if initial-open? 1.0 0.0)
                               :duration ^:const (dart:core/Duration :milliseconds 250)
                               :vsync state)))
     :expand-animation (cF (when-let [c (fxx/my-controller)]
                             (m/CurvedAnimation
                               :curve m.Curves/fastOutSlowIn
                               :reverseCurve m.Curves/easeOutQuad
                               :parent c)))
     :dispose          (fn [this me]
                         (when-let [controller (fx/my-controller)]
                           (.dispose controller)))

     :step             (cF (/ 90.0 (dec (count actions))))
     :open?            (cI initial-open?
                         :obs (fn [prop-name me new-value prior-value cell]
                                (when-let [c (fxx/my-controller)] ;; not until first render installation
                                  (if new-value
                                    (.forward c)
                                    (.reverse c)))))}
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (doall (do
               (map-indexed
                 (fn [i action]
                   (expanding-action-button me
                     :direction-degrees (* i (fmuv :step :fab))
                     :max-distance distance
                     :progress-key :expand-animation
                     :action action))
                 actions)))
      (tap-to-open-fab me))))

(defn expanding-action-button [me & {:keys [action direction-degrees max-distance progress-key]}]
  (md/make
    :name :ea-button
    :kids (cFkids (action-button
                    :icon (:icon action)
                    :onPressed (fn ^void []
                                 ;; todo roll up into (with-context (ctx) ....)
                                 (let [^State state (mget me :fx$state)]
                                   (assert state)
                                   (assert (.context state))
                                   (show-action (.context state) action))
                                 nil)))
    :initState (fn [this me]
                 (md/mset! me :fx$state this))
    :fx$state (cI nil)
    :fx$ctx (cF (when-let [st (fxx/my-state)]
                  (.context ^State st)))
    :fx-gen (fn [ctx me]
              (reify :extends m/StatefulWidget              ;; m/AnimatedBuilder
                (createState [this]
                  (reify :extends w/State                   ;; #/(w/State m/AnimatedBuilder)
                    ^:mixin m/SingleTickerProviderStateMixin
                    (^void initState [this]
                      (.initState ^super this)
                      (md/mset! me :fx$state this))
                    (build [this ctx]
                      (assert (mget (md/fasc :fab) :expand-animation))
                      (assert (first (md/md-kids me)))
                      (m/AnimatedBuilder
                        :animation (mget (md/fasc :fab) :expand-animation)
                        :child (fxx/extract-widget :fab me ctx (first (md/md-kids me)))
                        :builder (fn [ctx child]
                                   (assert ctx "anibuilder-NOT-seeing-ctx")
                                   (let [progress ^m/CurvedAnimation (mget (md/fasc :fab) :expand-animation)
                                         _ (assert progress)
                                         offset (m.Offset/fromDirection
                                                  (* direction-degrees (/ math/pi 180.0))
                                                  (* (.value progress) max-distance))]
                                     (f/widget
                                       (f/nest
                                         (m/Positioned
                                           :right (+ 4.0 (.dx offset))
                                           :bottom (+ 4.0 (.dy offset)))
                                         (m.Transform/rotate
                                           :angle (* (- 1.0 (.value progress))
                                                    math/pi 0.5))
                                         child))))))))))))


(defn show-action [ctx action]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (m/AlertDialog
                 :content (m/Text (:title action))
                 :actions [(m/TextButton
                             :onPressed #(-> ctx m.Navigator/of .pop)
                             :child ^:const (m/Text "CLOSE"))]))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape        ^:const (m/CircleBorder)
                :clipBehavior m.Clip/antiAlias
                ;; todo get to ctx without lazy
                :color        #_ (tag/with-ctx [ctx me]
                                (-> (Theme/of ctx) .-colorScheme .-secondary))
                #_m.Colors/blue
                #_(cF_ [] (when-let [ctx (fxx/my-ctx)]
                            (dp :BAM!!!-lazy-color!!!!)
                            (-> (Theme/of ctx) .-colorScheme .-secondary)))
                (fn [me ctx]
                    (-> (Theme/of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     #_ m.Colors/white (cF_ [] (when-let [ctx (fxx/my-ctx)]
                                         (-> (Theme/of ctx) .-colorScheme .-onSecondary)))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    (fx/center
      (fx/material {:shape        ^:const (m/CircleBorder)
                    :clipBehavior m.Clip/antiAlias
                    :elevation    4.0}
        (fx/ink-well {:onTap #(md/mswap! (md/fasc :fab par) :open? not)}
          (fx/padding {:padding ^:const (m.EdgeInsets/all 8.0)}
            (fx/icon {:icon  m.Icons/close
                      :color (fn [me ctx]
                               (dp :icon-color-callled!!!! (.primaryColor (Theme/of ctx)))
                               ;; fyi, this goes not work well in dark mode: bkg goes black like icon, almost
                               (.primaryColor (Theme/of ctx)))

                      #_ (cF (let [ctx (fxx/my-ctx)]
                                   (if ctx
                                     (do
                                         ;(dp :icon-sees-me!! (minfo me))
                                         (dp :icon-sees-ctx!! ctx)
                                         ;(dp :sees-color (.primaryColor (Theme/of ctx)))
                                         (.primaryColor (Theme/of ctx)))
                                     (do
                                       (dp :icon-no-see-context!!!! (minfo me))
                                       m.Colors/red)
                                     )))}
              {:name :iconic})))))))


(defn random-to-double [max]
  (-> max rand-int .toDouble))

(defn random-color []
  (m.Color/fromRGBO (rand-int 256)
    (rand-int 256)
    (rand-int 256)
    1))

#_(defn- tap-to-open-fab [par]
    ;; version from std fab sample to show Non-MX components are welcome at leaves of MX components
    (f/nest
      (m/IgnorePointer :ignoring (boolean (mget (md/fasc :fab par) :open?)))
      (m/AnimatedContainer
        :transformAlignment m.Alignment/center
        :transform (let [open? (mget (md/fasc :fab par) :open?)]
                     (dp :tap2-pen-sees-open open?)
                     (m.Matrix4/diagonal3Values
                       (if open? 0.7 1.0)
                       (if open? 0.7 1.0)
                       1.0))
        :duration ^:const (dart:core/Duration :milliseconds 250)
        :curve ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut))
      (m/AnimatedOpacity
        :opacity (if (mget (md/fasc :fab par) :open?) 0.0 1.0)
        :curve ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
        :duration ^:const (dart:core/Duration :milliseconds 250))
      (m/FloatingActionButton :onPressed #(md/mswap! (md/fasc :fab par) :open? not))
      (m/Icon m.Icons/create)))



;;; -------------------------------------------------------------

(defn- tap-to-open-fab [par]
  (fx/animated-opacity {:opacity  (cF (let [open? (mget (md/fasc :fab par) :open?)]
                                        (if open? 0.0 1.0)))
                        :curve    ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
                        :duration ^:const (dart:core/Duration :milliseconds 250)}
    {:name :tap2open}
    (fx/floating-action-button {:onPressed (fn [me ctx]
                                             (md/mswap! (md/fasc :fab par) :open? not))}
      (fx/icon {:icon m.Icons/create}))))

;; -- full version, but container breaks it
#_(fx/animated-container {:width      32.0
                          :height     42.0
                          :decoration (cF (m/BoxDecoration
                                            :color (random-color)
                                            :borderRadius (m.BorderRadius/circular (random-to-double 100))))
                          :duration   ^:const (Duration :seconds 1)
                          :curve      m.Curves/fastOutSlowIn}
    #_{:transformAlignment m.Alignment/center
       :transform          (cF (let [open? false #_(mget (md/fasc :fab par) :open?)]
                                 (m.Matrix4/diagonal3Values
                                   (if open? 0.7 1.0)
                                   (if open? 0.7 1.0)
                                   1.0)))
       :duration           ^:const (dart:core/Duration :milliseconds 250)
       :curve              ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut)}
    (fx/animated-opacity {:opacity  (cF (let [open? (mget (md/fasc :fab par) :open?)]
                                          (dp :opacity-sees-open?!!!!!!! open?)
                                          (if open? 0.0 1.0)))
                          :curve    ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
                          :duration ^:const (dart:core/Duration :milliseconds 250)}
      (fx/floating-action-button {:onPressed (fn [me ctx]
                                               (md/mswap! (md/fasc :fab par) :open? not))}
        (fx/icon {:icon m.Icons/create}))))
#_(do                                                       ;; fx/ignore-pointer {:ignoring (cF (boolean (mget (md/fasc :fab par) :open?)))}
    (fx/animated-container {:transformAlignment m.Alignment/center
                            :transform          (let [open? false #_(mget (md/fasc :fab par) :open?)] ;; HHAACK
                                                  (m.Matrix4/diagonal3Values
                                                    (if open? 0.7 1.0)
                                                    (if open? 0.7 1.0)
                                                    1.0))
                            :duration           ^:const (dart:core/Duration :milliseconds 250)
                            :curve              ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut)}
      (fx/animated-opacity {:opacity  (if (mget (md/fasc :fab par) :open?) 0.0 1.0)
                            :curve    ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
                            :duration ^:const (dart:core/Duration :milliseconds 250)}
        (fx/floating-action-button {:onPressed (fn [me ctx]
                                                 (md/mswap! (md/fasc :fab par) :open? not))}
          (m/Icon m.Icons/create) #_(fx/icon {:icon m.Icons/create})))))

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 Colors/cyan))))

#_(defn fake-item [is-big?]
    (dart:core.Function/apply m/Container nil
      {(dart:core/Symbol. "margin") 42.0
       (dart:core/Symbol. "height") 36.0}))

#_(dart:core.Function/apply m/Container nil
    ^#/(Map Symbol dynamic) {:margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
                             :height (if is-big? 128.0 36.0)
                             :decoration
                             (m/BoxDecoration
                               :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
                               :color (.-shade300 Colors/pink))})
