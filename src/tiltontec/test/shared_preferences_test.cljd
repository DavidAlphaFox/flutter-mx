(ns tiltontec.test.shared-preferences-test
  (:require
    ["dart:developer" :as dev]
    ["dart:math" :as mth]
    ["dart:convert" :as convert]
    ["package:flutter/widgets.dart" :as w]
    ["package:path/path.dart" :as path]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.util.core :as util]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.model.core :refer [mget mset! mset!x mswap! fasc mkids mpar] :as md]
    [tiltontec.mx-flutter.core :as fx]

    [tiltontec.mx-flutter.shared-pref :as stg]
    [tiltontec.demo.todoMVC.store-pref :as pref]
    [tiltontec.demo.todoMVC.todo :refer [my-app] :as todo]
    [clojure.walk :as walk]
    ))


#_(defn ^:async read-all-docs [collection-name]
    (let [db (await (stg/get-db))]
      (let [all (into #{} (.getKeys ^prefs/SharedPreferences db))]
        (dp :allkeys!!!!! all)
        (doall
          (for [tdk all]
            (do (dp :radoc tdk (string? tdk))
                (let [td (.getString db tdk)]
                  (dp :reread-raw-done)
                  (dp :reread-raw td)
                  (dp :reread (convert/jsonDecode td))
                  (convert/jsonDecode td))))))))

(defn test []
  (dp :prefs-test-2!!!!!!)
  ;(dp :json? (convert/jsonEncode {"a" 42}))
  ;(dp :json? (convert/jsonEncode (walk/stringify-keys {:a 42})))
  ;(dp :json? (convert/jsonEncode {:sid 42 :title "walk dog" :completed false}))
  (.ensureInitialized w/WidgetsFlutterBinding)

  (let [db ^prefs/SharedPreferences (await (stg/get-db))]
    (dp :got-db!!! db)
    (let [all (into #{} (.getKeys ^prefs/SharedPreferences db))]
      (dp :allkeys!!!!! all)
      (doall
        (for [tdk all]
          (when true ;; (some #{tdk} ["counter" "todo/00042"])
            (dpx :radoc tdk (string? tdk))
            (let [td (.get db tdk)]
              (dpx :reread-raw tdk td (int? td) (string? td))
              (when (string? td)
                (let [d (util/dart-map->cljd-map (convert/jsonDecode td))]
                  (dp :reread-jsontd  d (map? d) (keys d)))))
            #_(let [td (.getString db tdk)]
                (dp :reread-raw-done)
                (dp :reread-raw td)
                (dp :reread (convert/jsonDecode td))
                (convert/jsonDecode td)))))))

  (pref/delete-all-docs "todo")


  #_(let [prefs (await (.getInstance prefs/SharedPreferences))]
      (dp :got-dbi! prefs)
      ;; await prefs.setInt('counter', counter);
      (.setInt prefs "counter" 42)
      (.setInt prefs "weight" 164)
      (.setString prefs "todo/00042" (convert/jsonEncode
                                       (walk/stringify-keys
                                         {:sid 42 :title "walk dog" :completed false})))
      (let [td (.getString prefs "todo/00042")]
        (dp :reread-raw td)
        (dp :reread (convert/jsonDecode td)))

      (let [all (into #{} (.getKeys prefs))]
        (dp :all all)
        (doseq [k all]
          (dp :deleting k)
          (.remove prefs k)))

      (let [all (into #{} (.getKeys prefs))]
        (dp :post-delete-all all))

      )
  )