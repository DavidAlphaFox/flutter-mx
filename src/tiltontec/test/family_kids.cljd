(ns tiltontec.test.family-kids
  (:require
    [tiltontec.matrix.foundation :refer [ mx-type]]
    [tiltontec.matrix.base
     :refer [trx dp prog1 *trx?*]]
    [tiltontec.cell.base
     :refer [without-c-dependency cells-init c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input?
             c-model  c-valid? c-useds c-ref?
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             unlink-from-callers *causation*
             c-prop-name c-synaptic?
             c-pulse c-pulse-last-changed c-ephemeral? c-prop c-props
             c-lazy] :as cty]
    [tiltontec.cell.integrity :refer [with-integrity]]
    [tiltontec.cell.observer
     :refer [ fn-obs]]
    [tiltontec.cell.core
     :refer [cF cF+ c-reset-next! cFonce cFn
             cI creset! make-cell make-c-formula]]
    [tiltontec.cell.evaluate :refer [cget ]]
    [tiltontec.model.peek :refer [mref?]]
    [tiltontec.model.base :refer [md-cz md-cell]]
    [tiltontec.model.core
     :refer [the-kids mdv! mget  fm! make mset!]
     :as md]
    ))

(defn k-notq2be []
  (let [f (md/make-family
            :ee (cI 2)
            :kids (cF (the-kids
                        (when (odd? (mget me :ee))
                          (md/make
                            :name :yep
                            :value (cF (do
                                         (let [par (:parent @me)]
                                           (let [ee (mget par :ee)]
                                             (* 14 ee))))))))))]
    (assert (dart/is? (mx-type f) md/Family)
      (str "k-notq2be bad family"))
    (assert (empty? (mget f :kids)))

    (do
      (mset! f :ee 3)
      (assert (not (empty? (mget f :kids))))
      (assert (= 42 (mdv! :yep :value f)))

      (dp :ok-42!!!!!!!!)
      (let [dmw (first (mget f :kids))]
        (assert (mref? dmw))
        (mset! f :ee 0)
        (assert (empty? (mget f :kids)))

        (dp :dmw @dmw :meta (meta dmw))
        ;; todo get kids observe to quiesce kids

        (assert (nil? @dmw))
        (assert (= :quiesced (:state (meta dmw))))))))

(defn run-tests []
  (k-notq2be)
  (dp :family-kids-OK))


