(ns tiltontec.matrix.api
  (:require
    [clojure.string :as str]
    [tiltontec.matrix.base :refer [mx-throw]]
    [tiltontec.matrix.util :as util]
    [tiltontec.cell.base :as cb]
    [tiltontec.model.peek :as mpeek]
    [tiltontec.model.core :as md]))

(def unbound cb/unbound)

(defmacro dp [& bits]
  `(cb/without-c-dependency
     (dart:core/print (clojure.string/join " " (list* :DPR>
                                                 (map #(if (nil? %) :NIL %) (vector ~@bits)))))
     nil))

(defmacro dpx [& bits]
  `(do))

(defn rmap-meta-set! [[prop ref] new-value]
  (util/rmap-meta-set! [prop ref] new-value))

(defn rmap-set! [[prop ref] new-value]
  (util/rmap-set! [prop ref] new-value))

(defn pulse-now []
  (cb/pulse-now))
;;; --- accessors -----------------------------------

(defn mset! [me prop new-value]
  (md/mset! me prop new-value))

(defn mswap! [me prop swap-fn & swap-fn-args]
  (apply md/mswap! me prop swap-fn swap-fn-args))

(defn mget [me prop]
  (tiltontec.model.core/mget me prop))

(defn mget? [me prop & [alt-value]]
  (tiltontec.model.core/mget? me prop alt-value))

;;; ---- lifecycle ---------------------------------
;; --- md-quiesce --

(defn md-quiesce-feature? []
  (md/md-quiesce-feature?))

(defn md-quiesce!
  ([me] (md/md-quiesce! me))
  ([me force?]
   (md/md-quiesce! me force?)))

(defn md-quiesce-if-owned! [owner me]
  (md/md-quiesce-if-owned! owner me))

;;; --- navigation ---------------------------------

(defn mname [me]
  (:name @me))

(defn mkids [me] (tiltontec.model.core/mget? me :kids))

(defmacro mpar [& [me]]
  (let [me (or me 'me)]
    `(:parent @~me)))

(defn mhost [md]
  (md/mhost md))

(defmacro with-par [meform & body]
  `(tiltontec.model.core/with-par ~meform
     ~@body))

(defn fm-navig [what where & options]
  (apply md/fm-navig what where options))

(defmacro fasc "Search strictly up"
  ;; todo -- conform to CLJC version
  [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (tiltontec.model.core/fm-ascendant name# ~me-ref))))
;
;(defmacro fmu [name & [me]]
;  "Search matrix ascendents from node 'me' (defaulting to 'me in current scope) looking for element with given name"
;  (let [me-ref (or me 'me)]
;    `(let [name# ~name]
;       (tiltontec.model.core/fm-navig #(= name# (tiltontec.model.core/mget? % :name))
;         ~me-ref :me? false :up? true :inside? false))))

;(defn fm!
;  "Search matrix ascendents and descendents from node 'where', for 'what', throwing an error when not found"
;  [what where]
;  (md/fm! what where))

(defn fm! [what where]
  (fm-navig what where :me? false :inside? true :must? true :up? true))

;(defn mxu-find-type
;  "Search matrix ascendants from node 'me' for first with given tag"
;  [me type]
;  (chk me)
;  (fasc (fn [visited]
;          (= type (mx-type visited))) me))

(defmacro mdv!
  "Search matrix ascendents from node 'me' looking for `what`, and extract `slot`"
  [what slot & [me]]
  (let [me (or me 'me)]
    `(tiltontec.model.core/mget (tiltontec.model.core/fm! ~what ~me) ~slot)))

;;; --- cell factories -----------------------------------------

(defn cI [value & option-kvs]
  (apply tiltontec.cell.core/make-cell
    :value value
    :input? true
    option-kvs))

(defmacro cF [& body]
  `(tiltontec.cell.core/make-c-formula
     :code '~body
     :rule (tiltontec.cell.core/c-fn ~@body)))

(defmacro cF+ [[& options] & body]
  `(tiltontec.cell.core/make-c-formula
     ~@options
     :code '~body
     :rule (tiltontec.cell.core/c-fn ~@body)))

(defmacro cFn [& body]
  `(tiltontec.cell.core/make-c-formula
     :code '(tiltontec.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tiltontec.cell.core/c-fn (tiltontec.cell.base/without-c-dependency ~@body))))

(defmacro cF+n [[& options] & body]
  `(tiltontec.cell.core/make-c-formula
     ~@options
     :code '(tiltontec.cell.base/without-c-dependency ~@body)
     :input? true
     :rule (tiltontec.cell.core/c-fn (tiltontec.cell.base/without-c-dependency ~@body))))

(defmacro cFonce [& body]
  `(tiltontec.cell.core/make-c-formula
     :code '(tiltontec.cell.base/without-c-dependency ~@body)
     :input? nil
     :rule (tiltontec.cell.core/c-fn (tiltontec.cell.base/without-c-dependency ~@body))))

(defmacro cF1 [& body]
  `(tiltontec.cell.core/cFonce ~@body))

;;; --- fm navig ---------------------------------------------------------------

(defmacro mdv! [what prop & [me]]
  (let [me (or me 'me)]
    `(tiltontec.model.core/mget (tiltontec.model.core/fm! ~what ~me) ~prop)))

(defn mxu-find-name
  "Search up the matrix from node 'where' looking for element with given name"
  [where name]
  (fm-navig #(= name (mget? % :name))
    where :me? false :up? true :inside? false))

(defmacro my-value []
  `(tiltontec.model.core/mget ~'me :value))

(defmacro fmu [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (fm-navig #(= name# (mget? % :name))
         ~me-ref :me? false :up? true :inside? false))))

(defmacro fmuinc [name & [me]]
  ;; fmu "inclusive" of the starting node "me"
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (fm-navig #(= name# (mget? % :name))
         ~me-ref :me? true :up? true :inside? false))))

(defmacro fasc "Search strictly up"
  [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (tiltontec.model.core/fm-ascendant name# ~me-ref))))

(defn faprop "Search strictly up and mget value of first asc w that property"
  ([prop-name md]
   (faprop prop-name md md))
  ([prop-name md start]
   (cond
     (contains? @md prop-name)
     (mget md prop-name)
     :else (if-let [par (mpar md)]
             (recur prop-name par start)
             (mx-throw (str "faprop> did not find model with property " prop-name
                            " searching up from " (tiltontec.model.peek/mname md)
                            " seeking property " ~prop-name " value."))))))

(defmacro fmav "Search strictly up and mget value"
  [name prop-name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name
           md# (tiltontec.model.core/fm-ascendant name# ~me-ref)]
       (if (nil? md#)
         (mx-throw (str "fascv> did not find model " name#
                     " searching up from " (tiltontec.model.peek/mname md#)
                     " seeking property " ~prop-name " value."))
         (if (contains? @md# ~prop-name)
           (tiltontec.model.core/mget md# ~prop-name)
           (mx-throw (str "fascv> " ~name " lacks " ~prop-name " property")))
         (mget md# ~prop-name)))))

(defn fmo [me id-name]
  (or (mxu-find-name me id-name)
    (mxu-find-id me id-name)
    (mx-throw (str "fmo> not id or name " id-name))))

(defn fmov
  ([me id-name]
   (fmov me id-name :value))
  ([me id-name prop-name]
   (when-let [mx (fmo me id-name)]
     (if (contains? @mx prop-name)
       (mget mx prop-name)
       (mx-throw (str "fmov> " id-name " lacks " prop-name " property"))))))

(defmacro fm* [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (tiltontec.model.core/fm-navig
         #(do (= name# (mget? % :name)))
         ~me-ref :me? true :up? true :inside? true))))

(defmacro fm*val [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tiltontec.model.core/fm-navig (fn [node#] (= ~name (tiltontec.model.core/mget? node# :name)))
                    ~me-ref :me? true :up? true :inside? true)]
       (tiltontec.model.peek/chk other# (str "fm*val did not find other named " ~name " seeking property " ~prop))
       (tiltontec.model.core/mget other# ~prop))))

(defmacro fmuv [name prop & [me]]
  (let [me-ref (or me 'me)]
    `(let [other# (tiltontec.model.core/fm-navig (fn [node#] (= ~name (mget? node# :name)))
                    ~me-ref :me? false :up? true :inside? false)]
       (tiltontec.model.peek/chk other# (str "fmuv> did not find other named " ~name " seeking property " ~prop))
       (tiltontec.model.core/mget other# ~prop))))

(defmacro fmuval [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tiltontec.model.core/fm-navig (fn [node#] (= ~name (mget? node# :name)))
                    ~me-ref :me? false :up? true :inside? false)]
       (tiltontec.model.peek/chk other# (str "fmuv> did not find other named " ~name " seeking property " ~prop))
       (tiltontec.model.core/mget other# ~prop))))

(defn mxu-find-id
  "Search up the matrix from node 'where' looking for element with given id"
  [where id]
  (fm-navig #(= id (mget % :id))
    where :me? false :up? true :inside? false))

;;; --- f/mx issues ----------------------------------------------
(defn mref?
  ([x]
   (mref? x :anon))
  ([x tag]
   (mpeek/mref? x tag)))

(defn make [& arg-list]
  (apply tiltontec.model.core/make arg-list))

(defmacro with-mx-isolation [& body]
  `(binding [tiltontec.cell.base/*within-integrity* nil
             tiltontec.cell.base/*depender* nil
             tiltontec.cell.base/*defer-changes* false
             tiltontec.cell.base/*call-stack* nil]
     ~@body))

(defmacro def-mx-props [reader-prefix & slots]
  `(do
     ~@(map (fn [prop#]
              `(defn ~(symbol (str (or reader-prefix "")
                                prop#))
                 [~'ref]
                 (tiltontec.model.core/mget ~'ref ~(keyword prop#)))) slots)))

(defmacro cFkids [& tree]
  `(cF (tiltontec.model.core/the-kids ~@tree)))


(defmacro with-integrity [[opcode info] & body]
  `(tiltontec.cell.integrity/with-integrity [~opcode ~info]
     ~@body))

(defmacro with-cc [id & body]
  `(tiltontec.cell.integrity/with-cc ~id
     ~@body))

(defmacro without-integrity [& body]
  `(tiltontec.cell.integrity/without-integrity
     ~@body))

;;; --- debug -------------------------------

(defn minfo
  ([md]
   (minfo md false))
  ([md verbose]
   (mpeek/minfo md verbose)))