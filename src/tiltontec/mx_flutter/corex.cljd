(ns tiltontec.mx-flutter.corex
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.core :as cell :refer [cF cF+ cI c_F]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))

(defmacro material-app [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx-gen (fn [ctx me]
               (reify :extends m/MaterialApp #_m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends #/(w/State m/MaterialApp) #_w/State
                       (~'build [_# ctx]
                         (m/MaterialApp
                           :home (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval ctx me
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defn extract-widget [dbg-key me ctx fab]
  (cond
    (nil? fab)
    (do                                                     ;; (dp :exwid-sees-nil-fab dbg-key)
      nil)

    (dart/is? fab m/Widget)
    (do                                                     ;; (dp :fab-is-widget fab)
      fab)

    (fn? fab)
    (do                                                     ;; (dp :ew-sees-fn dbg-key fab)
      (recur [dbg-key :fn] me ctx (fab me ctx)))

    (cty/md-ref? fab)
    (do
      (recur [dbg-key :renfx] me ctx
        (render-fx ctx fab)))

    :default (throw (Exception. (str "fxx/extract-widget stuck after " dbg-key " on " fab)))))



(defmacro scaffold [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx-gen (fn [ctx me]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (m/Scaffold
                           :appBar (let [abar# (mget me :appBar)]
                                     ;; todo convert to, and create, universal extract-widget
                                     (dp :abar!!!!! abar#)
                                     (if (dart/is? abar# m/AppBar)
                                       abar#
                                       (tiltontec.mx-flutter.tag/render-fx ctx abar#)))
                           :body (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           :floatingActionButton (let [button (mget me :floatingActionButton)]
                                                   (dp :fab!!!! button)
                                                   (extract-widget :scaffold-fab me ctx button)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro textless [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx-gen (fn [ctx me]
                 (w/Text (first (md/md-kids me))            ;; need a render-fx here?
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defmacro text [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx-gen (fn [ctx me]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (w/Text (first (md/md-kids me))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval ctx me
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

#_
(defmacro textwow [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :dartstate (tiltontec.cell.core/cF
                  (reify :extends w/State
                    (~'build [_# ctx]
                      (w/Text (first (md/md-kids ~'me))
                        ~@(let [kvs (for [[k# _#] fx-props]
                                      [k# `(tiltontec.mx-flutter.tag/fx-eval ctx ~'me
                                             (tiltontec.model.core/mget ~'me ~k#))])]
                            (apply concat kvs))))))
     :dartctx (tiltontec.cell.core/cF ;;(.context ^w/State (tiltontec.model.core/mget ~'me :dartstate))
                (let [st ^w/State (tiltontec.model.core/mget ~'me :dartstate)]
                  (assert st "state not available")
                  (dp :ctx-sees-st!! st)
                  (.context st)))
     :dartwidget (tiltontec.cell.core/cF (reify :extends m/StatefulWidget
                                           (~'createState [_#]
                                             (tiltontec.model.core/mget ~'me :dartstate))))

     :fx-gen (fn [ctx me]
               (assert (tiltontec.model.core/mget me :dartwidget))
               (tiltontec.model.core/mget me :dartwidget))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro centerless [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx-gen (fn [ctx me]
                 ; (m/Center
                 ;        :child (render-fx ctx (first (tiltontec.model.core/md-kids me))))
                 (m/Center
                   :child (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defmacro column [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx-gen (fn [ctx me]
                 (m/Column
                   :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defn ctx-nearest [me]
  (cond
    (nil? me) (do (dp :ctx-nearest-sees-nil-me)
                  nil)
    :else (or (mget me :dartctx) ;; todo why does this not cycle?
            (recur (:par @me)))))
