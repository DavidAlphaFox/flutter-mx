(ns tiltontec.mx-flutter.corex
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.core :as cell :refer [cF cF+ cI cF_]]
            [tiltontec.cell.observer :refer [fn-obs]]

            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))


;(defmacro mmeta [] `(meta ~'me))
(defmacro my-ctx [] `(ctx-nearest ~'me))
(defmacro my-nav [] `(m.Navigator/of (ctx-nearest ~'me)))

(defmacro my-controller []
  `^m/AnimationController? (tiltontec.model.core/mget ~'me :controller))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tiltontec.model.core/mget ~'me :animation))

(defmacro my-state []
  `(tiltontec.model.core/mget ~'me :fx$state))

;;; --- make fxx ------------------------------------------

(defn make-fxx [mx-type fx-props custom-props cFkids-form]
  (dpx :make-fxx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    :fx-prop-keys (keys fx-props)                           ;; todo lose if never needed
    :fx$state (cI nil)
    :initState (fn [this me]
                 (md/mset! me :fx$state this))
    :fx$ctx (cF_ []
              ;; on-handlers do not get context, so we have "me" keep a pointer
              (when-let [st (my-state)]
                (.context ^State st)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(deftype FXXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (when-not (some #{slot} [:fx$ctx :fx$state])
      (when-not (= prior-value cty/unbound)
        ;;(dprn :FXDartWidget-observing!!!  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
        (if-let [^State state (mget me :fx$state) #_(:state-ref (meta me))]
          (do (dpx :settingimmediatestate slot new-value #_(meta me) (minfo me) state (.mounted state))
              (.setState state (fn [] (do))))
          (if-let [^State state (tag/fx-state-nearest me)]
            (do

                (dpx :obs-FXXD-uses-nearest-state state (.mounted state) :slot slot :new-prio new-value prior-value)
                (.setState state (fn [] (do))))
            (dpx :NOT-settingstate-on-stateless slot new-value (minfo me))))))))

;;; --- WIDGETS -------------------------------------------------
(defmacro material-app [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State? state (mget me :fx$state)]
                      (do (dpx :matapp-setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :MATAPP=observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (reify :extends m/MaterialApp #_m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends #/(w/State m/MaterialApp) #_w/State
                       (~'build [_# ctx]
                         (md/mset! me :fx$ctx ctx)
                         (m/MaterialApp
                           :home (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defn fx-resolve
  ([me ctx widget-value]
   (fx-resolve :anon me ctx widget-value))
  ([slot me ctx widget-value]
   (dp :resolving slot (minfo me) widget-value)
   (cond
     (nil? widget-value)
     (do
       (dp :exwid-sees-nil-widget-value!!!!!!!!!! slot (minfo me))
       nil)

     (dart/is? widget-value tag/MXFXAsIs)
     (do
       (dp :fx-reseolve-as-ising!!!!!!!!! slot (minfo me) widget-value)
       (.-value ^tag/MXFXAsIs widget-value))

     (dart/is? widget-value tag/MXFXCallback)
     (do
       (dp :fx-reso-calling-back!!!!!!! slot (minfo me) widget-value)
       (let [cb-val (.-value ^tag/MXFXCallback widget-value)]
         (dp :mxfxcallbackyields cb-val)
         (recur slot me ctx cb-val)))

     (dart/is? widget-value m/Widget)
     (do
       (dp :widget-value-is-widget widget-value)
       widget-value)

     (fn? widget-value)
     (do                                                    ;; (dp :ew-sees-fn widget-value)
       (dp :fxres-calling-fn?-blind widget-value)
       (let [v (widget-value me ctx)]
         (dp :recuring-unwrapped-fn?-return-val v)
         (recur slot me ctx v)))

     (cty/md-ref? widget-value)
     (do (dp :rfxing-md (minfo widget-value))
         (let [fx (render-fx ctx widget-value)]
           (dp :rfxing-yielded-flutter fx)
           fx))

     :default (do (dp :resolve-fall-thru-used widget-value)
                  widget-value))))

(defmacro scaffold [fx-props mx-props & children]
  ;; todo today convert to make-fxx
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State state (mget me :fx$state)]
                      (do (dpx :setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (util/rmap-meta-setf [:context me] ctx)
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (util/rmap-meta-setf [:context me] ctx)
                         (md/mset! me :fx$ctx ctx)
                         #_(m/Scaffold
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [k# `(tiltontec.mx-flutter.corex/fx-resolve me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))

                         (m/Scaffold
                           :appBar (tag/fx-resolve :appBar me ctx (mget me :appBar))
                           :drawer (tag/fx-resolve :drawer me ctx (mget me :drawer))
                           :body (tag/fx-resolve :body me ctx (or (mget me :body)
                                                          (first (md/md-kids me))))
                           :floatingActionButton (fx-resolve :floatingActionButton me ctx
                                                   (mget me :floatingActionButton)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro animated-builder [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [~'me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (reify :extends w/State
                     ^:mixin m/SingleTickerProviderStateMixin
                     (^void ~'initState [~'this]
                       ;;(.initState ~'^super ~'this)
                       (when-let [init (mget ~'me :initState)]
                         (init ~'this ~'me)))
                     (~'build [_# ctx]
                       (tiltontec.model.core/mset! ~'me :fx$ctx ctx)
                       (m.SizedBox/expand
                         :child (tiltontec.mx-flutter.corex/fx-resolve :kid1 ~'me ctx
                                  (first (tiltontec.model.core/md-kids ~'me)))
                         ~@(let [kvs (for [[k# _#] fx-props]
                                       [k# `(tiltontec.mx-flutter.corex/fx-resolve ~k# ~'me ctx
                                              (tiltontec.model.core/mget ~'me ~k#))])] ;; todo call if fn?
                             (apply concat kvs))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

;;; --- stateless ---------------------------------------

(defmacro sized-box+expand [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [me ctx]
               (md/mset! me :fx$ctx ctx)
               (m.SizedBox/expand
                 ;; todo roll this up as a sub-macro
                 :child (tiltontec.mx-flutter.corex/fx-resolve :kid1 me ctx
                          (first (tiltontec.model.core/md-kids me)))
                 ~@(let [kvs (for [[k# _#] fx-props]
                               [k# `(tiltontec.mx-flutter.corex/fx-resolve ~k# me ctx
                                      (tiltontec.model.core/mget me ~k#))])]
                     (apply concat kvs))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

;;; ---- FXX New gen -----------------------------------------------------------------------

(defmacro k1-child-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class
                     :child (tiltontec.mx-flutter.corex/fx-resolve :kid1 me ctx
                                (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   ;; todo need the ultimate value extractor FN
                                   [k# `(tiltontec.mx-flutter.corex/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-content-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class
                     :content (let [con (tiltontec.mx-flutter.corex/fx-resolve :kid1 me ctx
                                          (first (tiltontec.model.core/md-kids me)))]
                                (dp :k1-con-less=content con)
                                con)
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   ;; todo need the ultimate value extractor FN
                                   [k# `(tiltontec.mx-flutter.corex/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro alert-dialog [fx-props mx-props & children]
  `(k1-content-stateless m/AlertDialog ~fx-props ~mx-props ~@children))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class
                     :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))
                     #_~@(when children
                           (dp :yep-children children)
                           `(:children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.mx-flutter.corex/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

(defmacro flutter-logo [fx-props mx-props]
  `(childless-stateless m/FlutterLogo ~fx-props ~mx-props))

(defmacro k1-param1-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-param1-stateful [fx-constructor fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (reify :extends m/StatefulWidget
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (md/mset! me :fx$state this)
                           #_(when-let [init (mget m e :initState)]
                               (init this me)))
                         (~'build [_# ctx]
                           (md/mset! me :fx$ctx ctx)
                           (~fx-constructor (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro prop-param1-childless-stateful [p1-prop-name fx-constructor fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (reify :extends m/StatefulWidget
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (md/mset! me :fx$state this)
                           #_(when-let [init (mget m e :initState)]
                               (init this me)))
                         (~'build [_# ctx]
                           (md/mset! me :fx$ctx ctx)
                           (~fx-constructor (tiltontec.mx-flutter.tag/fx-resolve :kid1 me ctx
                                              (tiltontec.model.core/mget me ~p1-prop-name))
                             ~@(let [kvs (for [[k# _#] (dissoc fx-props p1-prop-name)]
                                           [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(defmacro k1-body-stateful [fx-constructor fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (reify :extends m/StatefulWidget
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (md/mset! me :fx$state this)
                           (when-let [init (mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (md/mset! me :fx$ctx ctx)
                           (let [bod# (tiltontec.mx-flutter.tag/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-constructor
                               ;; todo throw error if they specify :body explicitly, for now
                               :body bod#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                                    (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-child-stateful [fx-constructor fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (reify :extends m/StatefulWidget
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin ;; todo make optional
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (md/mset! me :fx$state this)
                           (when-let [init (mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (md/mset! me :fx$ctx ctx)
                           (let [k1# (tiltontec.mx-flutter.tag/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-constructor
                               ;; todo throw error if they specify :body explicitly, for now
                               :child k1#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                                    (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro prop-param1-childless-stateless [prop fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (md/mset! me :fx$ctx ctx)
                   (~fx-class (tiltontec.mx-flutter.tag/fx-resolve ~prop me ctx
                                (tiltontec.model.core/mget me ~prop))
                     ~@(let [kvs (for [[k# _#] (dissoc fx-props prop)]
                                   [k# `(tiltontec.mx-flutter.tag/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

;;; -----------------------------------------------------------
;;; --- childless stateless --------------------------------------------------------

(defmacro icon-button [& vargs]
  (let [[fx-props mx-props] vargs]
    `(childless-stateless m/IconButton ~fx-props ~mx-props)))

(defmacro app-bar [& vargs]
  (let [[fx-props mx-props] vargs]
    `(childless-stateless m/AppBar ~fx-props ~mx-props)))

(defmacro list-view+builder [& vargs]
  (let [[fx-props mx-props] vargs]
    `(childless-stateless m.ListView/builder ~fx-props ~mx-props)))

;;; -------------------------------------------------------------

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(k1-child-stateful m.SizedBox/expand ~fx-props ~mx-props ~@children))

;;; --- next two not yet confirmed in practice
(defmacro positioned [fx-props mx-props & children]
  `(k1-child-stateful m/Positioned ~fx-props ~mx-props ~@children))
(defmacro transorm+rotate-ful [fx-props mx-props & children]
  `(k1-child-stateful m.Transform/rotate ~fx-props ~mx-props ~@children))

(defmacro animated-builder [fx-props mx-props & children]
  `(k1-child-stateful m/AnimatedBuilder ~fx-props ~mx-props ~@children))

(defmacro scaffold [fx-props mx-props & children]
  `(k1-body-stateful m/Scaffold ~fx-props ~mx-props ~@children))

(defmacro icon [fx-props mx-props]
  `(prop-param1-childless-stateful :icon m/Icon ~fx-props ~mx-props))

(defmacro text! [fx-props mx-props & children]
  `(k1-param1-stateful m/Text ~fx-props ~mx-props ~@children))

(defmacro center [fx-props mx-props & children]
  `(k1-child-stateless m/Center ~fx-props ~mx-props ~@children))

(defmacro material [fx-props mx-props & children]
  `(k1-child-stateless m/Material ~fx-props ~mx-props ~@children))

(defmacro fade-transition [fx-props mx-props & children]
  `(k1-child-stateless m/FadeTransition ~fx-props ~mx-props ~@children))

(defmacro padding [fx-props mx-props & children]
  `(k1-child-stateless m/Padding ~fx-props ~mx-props ~@children))

(defmacro ink-well [fx-props mx-props & children]
  `(k1-child-stateless m/InkWell ~fx-props ~mx-props ~@children))

;;; --- meta meta meta ---------------------------------------------

(defmacro deftagx [tag fx-type-name expander]
  (prn :deftag-entry!!!!!!! tag fx-type-name)
  `(defmacro ~tag [& vargs#]
     ;;(dprn :expanding-deftag '~tag)
     (let [fx-type# '~fx-type-name]
       (cond
         (nil? vargs#)
         `(~'~expander fx-type# {} {} nil)

         (not (map? (first vargs#)))
         (do                                                ;;(dprn :just-kids!!!!!!!! '~tag)
           ;; we must have justkids
           `(~'~expander fx-type# {} {}
              (tiltontec.model.core/cFkids ~@vargs#)))

         (map? (second vargs#))
         ;; full spec, maybe kids
         (do                                                ;;(dprn :full-spec!!!!!!!!!!!! (second vargs#))
           `(~'~expander fx-type#
              ~(first vargs#)
              ~(second vargs#)
              ~(when-let [kids# (seq (nthrest vargs# 2))]
                 `(tiltontec.model.core/cFkids ~@kids#))))

         :else
         ;; just first map of fx props and maybe kids
         `(~'~expander fx-type#
            ~(first vargs#)
            {}
            ~(when-let [kids# (seq (nthrest vargs# 1))]
               `(tiltontec.model.core/cFkids ~@kids#)))))))

#_
(deftagx sized-box m/SizedBox k1-child-stateless)


;     current mission ^^^^^ of this which works....


(defmacro sized-box [fx-props mx-props & children]
  `(k1-child-stateless m/SizedBox ~fx-props ~mx-props ~@children))

(defmacro animated-opacity [fx-props mx-props & children]
  `(k1-child-stateless m/AnimatedOpacity ~fx-props ~mx-props ~@children))

(defmacro floating-action-button [fx-props mx-props & children]
  `(k1-child-stateless m/FloatingActionButton ~fx-props ~mx-props ~@children))

(defmacro align [fx-props mx-props & children]
  `(k1-child-stateless m/Align ~fx-props ~mx-props ~@children))



(defmacro stack [fx-props mx-props & children]
  `(children-stateless m/Stack ~fx-props ~mx-props ~@children))

(defmacro column [fx-props mx-props & children]
  `(children-stateless m/Column ~fx-props ~mx-props ~@children))

(defmacro ignore-pointer [fx-props mx-props & children]
  `(k1-child-stateless m/IgnorePointer ~fx-props ~mx-props ~@children))

(defmacro text [fx-props mx-props & children]
  `(k1-param1-stateless m/Text ~fx-props ~mx-props ~@children))

(defmacro drawer [fx-props mx-props & children]
  ;; todo doesn't a drawer need to have open? state
  `(k1-child-stateless m/Drawer ~fx-props ~mx-props ~@children))

;;; --- utils -------------------------------------

(defn ctx-nearest [me]
  (cond
    (nil? me) (do                                           ;; (dp :ctx-nearest-sees-nil-me-out-top?)
                nil)
    :else (do
            (assert (cty/md-ref? me) "ctx-nearest passed non-md")
            (or (mget me :fx$ctx)
              (recur (:par @me))))))
