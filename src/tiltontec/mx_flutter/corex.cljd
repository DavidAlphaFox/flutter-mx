(ns tiltontec.mx-flutter.corex
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.core :as cell :refer [cF cF+ cI c_F]]
            [tiltontec.cell.observer :refer [fn-obs]]

            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))


;(defmacro mmeta [] `(meta ~'me))
(defmacro my-ctx [] `(ctx-nearest ~'me))
(defmacro my-nav [] `(m.Navigator/of (ctx-nearest ~'me)))

(defmacro my-controller []
  `^m/AnimationController? (mget ~'me :controller))

(defmacro my-animation []
  ;; uncast since type will vary
  `(mget ~'me :animation))

(defmacro my-state []
  `(mget ~'me :fx$state))

(defmacro material-app [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State? state (mget me :fx$state)]
                      (do (dpx :matapp-setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :MATAPP=observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (reify :extends m/MaterialApp #_m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends #/(w/State m/MaterialApp) #_w/State
                       (~'build [_# ctx]
                         (m/MaterialApp
                           :home (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval me ctx
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defn extract-widget [dbg-key me ctx fab]
  (cond
    (nil? fab)
    (do
      (dp :exwid-sees-nil-fab!!!!!!!!!! dbg-key (minfo me))
      nil)

    (dart/is? fab m/Widget)
    (do                                                     ;; (dp :fab-is-widget fab)
      fab)

    (fn? fab)
    (do                                                     ;; (dp :ew-sees-fn dbg-key fab)
      (recur [dbg-key :fn] me ctx (fab me ctx)))

    (cty/md-ref? fab)
    (do
      (recur [dbg-key :renfx] me ctx
        (render-fx ctx fab)))

    :default (throw (Exception. (str "fxx/extract-widget stuck after " dbg-key " on " fab)))))

(defmacro scaffold [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State state (mget me :fx$state)]
                      (do (dpx :setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (util/rmap-meta-setf [:context me] ctx)
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (util/rmap-meta-setf [:context me] ctx)
                         (m/Scaffold
                           :appBar (fx/extract-widget :core-appbar me ctx (mget me :appBar))
                           :drawer (fx/extract-widget :core-appbar me ctx (mget me :drawer))
                           :body (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           :floatingActionButton (let [button (mget me :floatingActionButton)]
                                                   (extract-widget :scaffold-fab me ctx button)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro textless [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx$ctx (tiltontec.cell.core/cI nil)                 ;; set at start of build
       :fx-gen (fn [me ctx]
                 (w/Text (first (md/md-kids me))            ;; need a render-fx here?
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defmacro text [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx-gen (fn [me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (tiltontec.model.core/mset! me :fx$ctx ctx)
                         (w/Text (first (md/md-kids me))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval me ctx
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [~'me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (reify :extends w/State
                     ^:mixin m/SingleTickerProviderStateMixin
                     (^void ~'initState [~'this]
                       ;;(.initState ~'^super ~'this)
                       (when-let [init (mget ~'me :initState)]
                         (init ~'this ~'me)))
                     (~'build [_# ctx]
                       (tiltontec.model.core/mset! ~'me :fx$ctx ctx)
                       (m.SizedBox/expand
                         :child (tiltontec.mx-flutter.corex/extract-widget :sizedboxexpand ~'me ctx
                                  (first (tiltontec.model.core/md-kids ~'me)))
                         ~@(let [kvs (for [[k# _#] fx-props]
                                       [k# `(tiltontec.model.core/mget ~'me ~k#)])] ;; todo call if fn?
                             (apply concat kvs))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

#_(deftype FXAnimatedBuilder []
    :extends FXDartWidget
    ;;:type-only true
    PDartWidget
    (parts [this]
      [:animation :child])
    (beefer [this]
      (fn [me ctx]
        (m/AnimatedBuilder
          :animation (let [ani (mget me :animation)]
                       (assert ani "anibuilder sees null :animation property")
                       (dp :anibuilder-sees-ani ani)
                       (if (fn? ani)
                         (ani me ctx)
                         ^#/(m/Animation double) ani))
          :child (let [childer (mget me :animated-child)]
                   (assert childer "Animated builder requires :animated-child property")
                   (render-fx ctx (if (fn? childer)
                                    (childer me ctx)
                                    childer)))
          :builder (fn [ctx child]
                     (let [beefer (mget me :ani-beefer)]
                       (assert beefer (str "Animated builder " #_(minfo me) " lacks required beefer callback "))
                       (render-fx ctx (beefer me ctx child))))))))


(defmacro animated-builder [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [~'me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (reify :extends w/State
                     ^:mixin m/SingleTickerProviderStateMixin
                     (^void ~'initState [~'this]
                       ;;(.initState ~'^super ~'this)
                       (when-let [init (mget ~'me :initState)]
                         (init ~'this ~'me)))
                     (~'build [_# ctx]
                       (tiltontec.model.core/mset! ~'me :fx$ctx ctx)
                       (m.SizedBox/expand
                         :child (tiltontec.mx-flutter.corex/extract-widget :sizedboxexpand ~'me ctx
                                  (first (tiltontec.model.core/md-kids ~'me)))
                         ~@(let [kvs (for [[k# _#] fx-props]
                                       [k# `(tiltontec.model.core/mget ~'me ~k#)])] ;; todo call if fn?
                             (apply concat kvs))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))
;;; --- stateless ---------------------------------------

(defmacro sized-box+expand [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [me ctx]
               (m.SizedBox/expand
                 :child (tiltontec.mx-flutter.corex/extract-widget :sizedboxexpand me ctx
                          (first (tiltontec.model.core/md-kids me)))
                 ~@(let [kvs (for [[k# _#] fx-props]
                               [k# `(tiltontec.model.core/mget me ~k#)])] ;; todo call if fn?
                     (apply concat kvs))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro center [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx-gen (fn [me ctx]
                 (m/Center
                   :child (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defmacro column [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx-gen (fn [me ctx]
                 (m/Column
                   :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

(defmacro drawer [fx-props mx-props & children]
  (let []
    `(apply tiltontec.model.core/make
       :kids (tiltontec.model.core/cFkids ~@children)
       :fx$ctx (tiltontec.cell.core/cI nil)                 ;; set at start of build
       :fx-gen (fn [me ctx]
                 (util/rmap-meta-setf [:context me] ctx)
                 (tiltontec.model.core/mset! me :fx$ctx ctx)
                 (m/Drawer
                   :child (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                   ~@(let [kvs (for [[k# _#] fx-props]
                                 [k# `(tiltontec.model.core/mget me ~k#)])]
                       (apply concat kvs))))
       (concat
         (vec (apply concat (seq ~fx-props)))
         (vec (apply concat (seq ~mx-props)))))))

;;; --- utils -------------------------------------

(defn ctx-nearest [me]
  (cond
    (nil? me) (do (dp :ctx-nearest-sees-nil-me-out-top?)
                  nil)
    :else (do
            (assert (cty/md-ref? me) "ctx-nearest passed non-md")
            ;; todo lose meta ctx used elsewhere once sure not needed
            (or (mget me :fx$ctx)
              (recur (:par @me))))))
