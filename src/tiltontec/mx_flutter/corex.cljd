(ns tiltontec.mx-flutter.corex
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.core :as cell :refer [cF cF+ cI c_F]]
            [tiltontec.cell.observer :refer [fn-obs]]

            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))


;(defmacro mmeta [] `(meta ~'me))
(defmacro my-ctx [] `(ctx-nearest ~'me))
(defmacro my-nav [] `(m.Navigator/of (ctx-nearest ~'me)))

(defmacro my-controller []
  `^m/AnimationController? (tiltontec.model.core/mget ~'me :controller))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tiltontec.model.core/mget ~'me :animation))

(defmacro my-state []
  `(tiltontec.model.core/mget ~'me :fx$state))

;;; --- make fxx ------------------------------------------

(defn make-fxx [mx-type fx-props custom-props cFkids-form]
  (dpx :make-fxx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    #_ #_ :initState (fn [this me]
                 (md/mset! me :fx$state this))
    :fx-prop-keys (keys fx-props)                           ;; todo lose if never needed
    :fx$state (cI nil)
    :fx$ctx (cF (when-let [st (my-state)]                   ;; todo lose this?
                  (.context ^State st)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(deftype FXXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; no need to observer initial value observation, when prior is unbound
    (when-not (= prior-value cty/unbound)
      ;;(dprn :FXDartWidget-observing!!!  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
      (if-let [^State state (mget me :fx$state) #_ (:state-ref (meta me))]
        (do (dp :settingimmediatestate slot new-value #_(meta me) (minfo me) state)
            (.setState state (fn [] (do))))
        ;; todo search up to find nearest state
        (if-let [^State state (tag/fx-state-nearest me)]
          (do (dp :obs-FXXD-uses-nearest-state (minfo me))
              (.setState state (fn [] (do))))
          (dp :NOT-settingstate-on-stateless slot new-value (minfo me)))))))

;;; --- WIDGETS -------------------------------------------------
(defmacro material-app [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State? state (mget me :fx$state)]
                      (do (dpx :matapp-setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :MATAPP=observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (reify :extends m/MaterialApp #_m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends #/(w/State m/MaterialApp) #_w/State
                       (~'build [_# ctx]
                         (m/MaterialApp
                           :home (tiltontec.mx-flutter.tag/render-fx ctx (first (md/md-kids me)))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval me ctx
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defn extract-widget [me ctx fab]
  (cond
    (nil? fab)
    (do
      (dp :exwid-sees-nil-fab!!!!!!!!!! (minfo me))
      nil)

    (dart/is? fab m/Widget)
    (do                                                     ;; (dp :fab-is-widget fab)
      fab)

    (fn? fab)
    (do                                                     ;; (dp :ew-sees-fn fab)
      (recur me ctx (fab me ctx)))

    (cty/md-ref? fab)
    (render-fx ctx fab)

    :default (throw (Exception. (str "fxx/extract-widget stuck after on " fab)))))

(defmacro scaffold [fx-props mx-props & children]
  ;; todo today convert to make-fxx
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)                   ;; set at start of build
     :fx$observer (fn [slot me new-val old-val c]
                    (if-let [^w/State state (mget me :fx$state)]
                      (do (dpx :setting-FX-state slot new-val (cty/minfo me))
                          (.setState state (fn [] (do))))
                      (dpx :observe-sees-no-state (cty/minfo me))))
     :fx-gen (fn [me ctx]
               (util/rmap-meta-setf [:context me] ctx)
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (util/rmap-meta-setf [:context me] ctx)
                         #_(m/Scaffold
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [k# `(tiltontec.mx-flutter.corex/extract-widget me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))

                         (m/Scaffold
                           :appBar (tag/extract-widget me ctx (mget me :appBar))
                           :drawer (tag/extract-widget me ctx (mget me :drawer))
                           :body (tag/extract-widget me ctx (or (mget me :body)
                                                              (first (md/md-kids me))))
                           :floatingActionButton (extract-widget me ctx
                                                   (mget me :floatingActionButton)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [~'me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (reify :extends w/State
                     ^:mixin m/SingleTickerProviderStateMixin
                     (^void ~'initState [~'this]
                       ;;(.initState ~'^super ~'this)
                       (when-let [init (mget ~'me :initState)]
                         (init ~'this ~'me)))
                     (~'build [_# ctx]
                       (tiltontec.model.core/mset! ~'me :fx$ctx ctx)
                       (m.SizedBox/expand
                         :child (tiltontec.mx-flutter.corex/extract-widget ~'me ctx
                                  (first (tiltontec.model.core/md-kids ~'me)))
                         ~@(let [kvs (for [[k# _#] fx-props]
                                       [k# `(tiltontec.model.core/mget ~'me ~k#)])] ;; todo call if fn?
                             (apply concat kvs))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defmacro animated-builder [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [~'me ctx]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (reify :extends w/State
                     ^:mixin m/SingleTickerProviderStateMixin
                     (^void ~'initState [~'this]
                       ;;(.initState ~'^super ~'this)
                       (when-let [init (mget ~'me :initState)]
                         (init ~'this ~'me)))
                     (~'build [_# ctx]
                       (tiltontec.model.core/mset! ~'me :fx$ctx ctx)
                       (m.SizedBox/expand
                         :child (tiltontec.mx-flutter.corex/extract-widget ~'me ctx
                                  (first (tiltontec.model.core/md-kids ~'me)))
                         ~@(let [kvs (for [[k# _#] fx-props]
                                       [k# `(tiltontec.model.core/mget ~'me ~k#)])] ;; todo call if fn?
                             (apply concat kvs))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

;;; --- stateless ---------------------------------------

(defmacro sized-box+expand [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx$ctx (tiltontec.cell.core/cI nil)
     :fx-gen (fn [me ctx]
               (m.SizedBox/expand
                 :child (tiltontec.mx-flutter.corex/extract-widget me ctx
                          (first (tiltontec.model.core/md-kids me)))
                 ~@(let [kvs (for [[k# _#] fx-props]
                               ;; todo need the ultimate value extractor FN
                               [k# `(tiltontec.model.core/mget me ~k#)])]
                     (apply concat kvs))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

;;; ---- FXX New gen -----------------------------------------------------------------------

(defmacro k1-child-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (~fx-class
                     :child (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (~fx-class
                     :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))
                    #_  ~@(when children
                         (dp :yep-children children)
                         `(:children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.mx-flutter.tag/render-fx ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

(defmacro flutter-logo [fx-props mx-props]
  `(childless-stateless m/FlutterLogo ~fx-props ~mx-props))


(defmacro k1-param1-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (~fx-class (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [k# `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-param1-stateful [fx-constructor fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.corex/make-fxx (new FXXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-gen (fn [me ctx]
                   (reify :extends m/StatefulWidget
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (md/mset! me :fx$state this)
                           #_ (when-let [init (mget m e :initState)]
                                (init this me)))
                         (~'build [_# ctx]
                           (~fx-constructor (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [k# `(tiltontec.mx-flutter.tag/fx-eval me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       (tiltontec.model.core/cFkids ~@children))))

;;;
;;; -------------------------------------------------------
;;;

(defmacro text! [fx-props mx-props & children]
  ;; todo Text has children?!
  `(k1-param1-stateful m/Text ~fx-props ~mx-props ~@children))

(defmacro center [fx-props mx-props & children]
  `(k1-child-stateless m/Center ~fx-props ~mx-props ~@children))

(defmacro align [fx-props mx-props & children]
  `(k1-child-stateless m/Align ~fx-props ~mx-props ~@children))

(defmacro app-bar [fx-props mx-props]
  `(childless-stateless m/AppBar ~fx-props ~mx-props))

(defmacro column [fx-props mx-props & children]
  `(children-stateless m/Column ~fx-props ~mx-props ~@children))

(defmacro ignore-pointer [fx-props mx-props & children]
  `(k1-child-stateless m/IgnorePointer ~fx-props ~mx-props ~@children))

(defmacro text [fx-props mx-props & children]
  `(k1-param1-stateless m/Text ~fx-props ~mx-props ~@children))

(defmacro drawer [fx-props mx-props & children]
  ;; todo doesn't a drawer need to have open? state
  `(k1-param1-stateless m/Text ~fx-props ~mx-props ~@children))

;;; --- utils -------------------------------------

;; todo now explore all such remaining vestiges of cached ctx and make sure they are solved
(defn ctx-nearest [me]
  (cond
    (nil? me) (do ;; (dp :ctx-nearest-sees-nil-me-out-top?)
                  nil)
    :else (do
            (assert (cty/md-ref? me) "ctx-nearest passed non-md")
            ;; todo lose meta ctx used elsewhere once sure not needed
            (or (mget me :fx$ctx)
              (recur (:par @me))))))
