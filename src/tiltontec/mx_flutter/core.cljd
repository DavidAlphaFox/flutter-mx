(ns tiltontec.mx-flutter.core
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))

(defmacro my-controller []
  `^m/AnimationController (:controller (meta ~'me)))

(defmacro my-state []
  `^State (:state-ref (meta ~'me)))

#_
(defmacro my-ctx []
  `(.context ^State (:state-ref (meta ~'me))))

(defmacro my-ctx [& [me]]
  (let [me-ref (or me 'me)]
    `(do (assert (:state-ref (meta ~me-ref)) (str "state ref not bound for " (minfo ~me-ref)))
         (.context ^State (:state-ref (meta ~me-ref))))))

#_ (defmacro fmu [name & [me]]
     (let [me-ref (or me 'me)]
       `(let [name# ~name]
          (fm-navig #(= name# (md-get % :name))
            ~me-ref :me? false :up? true :inside? false))))

(defn ctx-page-push [ctx fx-page-def]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.push (-> ctx m.Navigator/of)
    (#/(m/MaterialPageRoute Object)
      :builder (fn [_]
                 (render-fx fx-page-def)))))

(defn ctx-page-pop [ctx]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.pop (-> ctx m.Navigator/of)))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    ;; todo find better way to reduce observing
    (when true                                              ;; (some #{slot} (:fx-prop-keys @me))
      ;;(dprn :FXDartWidget-observing!!!  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
      (when-let [^State state (:state-ref (meta me))]
        (.setState state (fn [] (do))))))

  PDartWidget
  (parts [this]
    [:no-parts])

  (fx-genner [this]
    nil)

  (beefer [this]
    (fn [me ctx]
      (if-let [beefer (mget me :beefer)]
        (do (dp :ad-hoc-widget-found-custom-beefer (minfo me) beefer)
            (beefer me ctx))
        (throw (Exception. "Property :beefer must be provided for ad hoc widgets"))))))

(deftag widget tiltontec.mx-flutter.core/FXDartWidget)


;;; --- extract widget --------------------------------------

(defn extract-widget [dbg-key me ctx fab]
  (cond
    (nil? fab)
    (do (dp :exwid-sees-nil-fab dbg-key)
        nil)

    (dart/is? fab m/Widget)
    (do ;; (dp :fab-is-widget fab)
        fab)

    (fn? fab)
    (do (dp :ew-sees-fn dbg-key fab)
        (recur [dbg-key :fn] me ctx (fab me ctx)))

    (and (cty/md-ref? fab)
      (dart/is? (mx-type fab) fx/FXDartWidget))
    (do
      (recur [dbg-key :renfx] me ctx
        (render-fx fab)))

    :default (throw (Exception. (str "extract-widget stuck after " dbg-key " on " fab)))))

;;; --- material app ---------------------------------------

(deftype FXMaterialApp []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/MaterialApp
        :title (or (mget me :title) "")
        :theme (mget me :theme)
        :home (render-fx (first (md-kids me)))))))

(deftag material-app tiltontec.mx-flutter.core/FXMaterialApp)

;;; --- material ---------------------------------------
(deftype FXMaterial []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      ; :shape ^:const (m/CircleBorder)
      ;    :clipBehavior m.Clip/antiAlias
      ;    :color (-> (Theme/of ctx) .-colorScheme .-secondary)
      ;    :elevation 4.0
      ;    :child

      (m/Material
        :shape (mget me :shape)
        :clipBehavior (mget me :clipBehavior)
        ;; todo write call-or-get-property or sth
        :color (let [color (mget me :color)]
                 (if (fn? color)
                   (color me ctx)
                   color))
        :elevation (mget me :elevation)
        :child (render-fx (first (md-kids me)))))))
(deftag material tiltontec.mx-flutter.core/FXMaterial)

;;; --- icon button ------------------------------------

(deftype FXIconButton []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell])
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/IconButton
        :icon (mget me :icon)
        :onPressed (mget me :onPressed)
        :color (let [color (mget me :color)]
                 (if (fn? color)
                   (color me ctx)
                   color))))))
(deftag icon-button tiltontec.mx-flutter.core/FXIconButton)

;;; --- scaffold ---------------------------------------

(deftype FXScaffold []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:appBar :body :actionButton])
  (beefer [this]
    (fn [me ctx]
      (m/Scaffold
        :appBar (let [abar (mget me :appBar)]
                  ;; todo convert to, and create, universal extract-widget
                  (if (dart/is? abar m/AppBar)
                    abar
                    (tag/render-fx abar)))
        :body (render-fx (first (md/md-kids me)))
        :floatingActionButton
        ;; todo this too s/b render-fx
        (let [button (mget me :floatingActionButton)]
          (extract-widget :scaffold-fab me ctx button))))))

(deftag scaffold tiltontec.mx-flutter.core/FXScaffold)

;;; ---

(deftype FXAppBar []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXAppBar-NULL-observing!!! slot))
  PDartWidget
  (parts [this]
    [:title])
  (beefer [this]
    (fn [me ctx]
      (m/AppBar
        :title (let [title (mget me :title)]
                 (if (string? title)
                   (m/Text (str "Yikes-1" title))
                   title)))))
  (fx-genner [this]
    ;; Scaffolds require appBar objects to be PreferredSizeWidgets.
    ;; The default fx gen uses an anonymous StatefulWidget.
    ;; So we have to override fx gen (so AppBars (PSWs) go out unwrapped and thus OK to Scaffold.
    (fn [me]
      (reify :extends m/AppBar
        (createState [this]
          (util/rmap-meta-setf [:state-ref me]
            (reify :extends #/(w/State m/AppBar)
              (build [this ctx]
                (if-let [bldr (mget me :beefer)]
                  (bldr me ctx)
                  (let [type-beefer (beefer (FXAppBar))]
                    (type-beefer me ctx))))
              (^void initState [this]
                (.initState ^super this)
                (rmap-meta-setf [:context me] (.context this))
                (when-let [init (mget me :initState)]
                  (init this me)))
              (^void dispose [this]
                (when-let [orride (mget me :dispose)]
                  (orride this me))
                (.dispose ^super this)))))))))


(deftag app-bar tiltontec.mx-flutter.core/FXAppBar)

;;; --- single-child scroll view ----------------------------
(deftype FXSingleChildScrollView []
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/SingleChildScrollView
        :scrollDirection (md/mget me :scrollDirection)
        :child (render-fx (first (md/md-kids me)))))))
(deftag single-child-scroll-view tiltontec.mx-flutter.core/FXSingleChildScrollView)

;;; --- data table  ----------------------------
(deftype FXDataTable []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:headingTextStyle :columnSpacing :sortColumnIndex :sortAscending :showBottomBorder :columns :rows])
  (beefer [this]
    (fn [me ctx]
      (m/DataTable
        :headingTextStyle (md/mget me :headingTextStyle)
        :showBottomBorder (md/mget me :showBottomBorder)
        :columns (md/mget me :columns)
        :rows (md/mget me :rows)))))
(deftag data-table tiltontec.mx-flutter.core/FXDataTable)

;;; --- floating action button

(deftype FXFloatingActionButton []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:onPressed :tooltip :child])
  (beefer [this]
    (fn [me ctx]
      (m/FloatingActionButton
        :onPressed (fn []
                     (when-let [op (mget me :onPressed)]
                       (op me ctx)))
        :tooltip (md/mget me :tooltip)
        :child (render-fx (first (md/md-kids me)))))))

(deftag floating-action-button tiltontec.mx-flutter.core/FXFloatingActionButton)

;;; --- default tab controller -----------------------

(deftype FXDefaultTabController []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:appBar :body :actionButton])
  (beefer [this]
    (fn [me ctx]
      (m/DefaultTabController
        :length (mget me :length)
        :child (render-fx (first (md/md-kids me)))))))

(deftag default-tab-controller tiltontec.mx-flutter.core/FXDefaultTabController)

;;; --- center ---------------------------------------

(deftype FXCenter []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Center
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag center tiltontec.mx-flutter.core/FXCenter)

;;; --- padding ---------------------------------------

(deftype FXPadding []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:padding])
  (beefer [this]
    (fn [me ctx]
      (m/Padding
        :padding (mget me :padding)
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag padding tiltontec.mx-flutter.core/FXPadding)

;;; --- gesture detector

(deftype FXGestureDetector []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/GestureDetector
        :onPanDown (fn [^m/DragDownDetails details]
                     (when-let [pan (mget me :onPanDown)]
                       (pan me ctx details)))
        :onPanUpdate (fn [^m/DragUpdateDetails details]
                       (when-let [pan (mget me :onPanUpdate)]
                         (pan me ctx details)))
        :onPanEnd (fn [^m/DragEndDetails details]
                    (when-let [pan (mget me :onPanEnd)]
                      (pan me ctx details)))
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag gesture-detector tiltontec.mx-flutter.core/FXGestureDetector)

;;; --- align ----------------------
(deftype FXAlign []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (let [a (mget me :alignment)]
        ;;(dprn :FXAlign-beefer-sees-align a)
        (m/Align
          :alignment a
          :child (render-fx (first (tiltontec.model.core/md-kids me))))))))

(deftag align tiltontec.mx-flutter.core/FXAlign)

;;; --- card -------------------------------------------

(deftype FXCard []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Card
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag card tiltontec.mx-flutter.core/FXCard)

;;; --- animated container -------------------------------------------

(deftype FXAnimatedContainer []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:height :width :color :border-radius])
  (beefer [this]
    (fn [me ctx]
      (m/AnimatedContainer
        :width (md/mget me :width)
        :height (md/mget me :height)
        :decoration (md/mget me :decoration)
        :duration ^:const (md/mget me :duration)
        :curve (md/mget me :curve)))))

(deftag animated-container tiltontec.mx-flutter.core/FXAnimatedContainer)

;;; --- animated builder -------------------------------------------

(deftype FXAnimatedBuilder []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:animation :child])
  (beefer [this]
    (fn [me ctx]
      (m/AnimatedBuilder
        :animation (let [ani (mget me :animation)]
                     (assert ani "anibuilder sees null :animation property")
                     (if (fn? ani)
                       (ani me ctx)
                       ^#/(m/Animation double) ani))
        :child (let [childer (mget me :animated-child)]
                 (assert childer "Animated builder requires :animated-child property")
                 (render-fx (if (fn? childer)
                              (childer me ctx)
                              childer)))
        :builder (fn [ctx child]
                   (let [beefer (mget me :ani-beefer)]
                     (assert beefer (str "Animated builder " (minfo me) " lacks required beefer callback "))
                     (render-fx (beefer me ctx child))))))))

(deftag animated-builder tiltontec.mx-flutter.core/FXAnimatedBuilder)

;;; --- fade transition -------------------------------------------

(deftype FXFadeTransition []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:opacity :child])
  (beefer [this]
    (fn [me ctx]
      (apply m/FadeTransition
        :opacity (let [op (mget me :opacity)]
                   (if (fn? op)
                     (op me ctx)
                     op))
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))
(deftag fade-transition tiltontec.mx-flutter.core/FXFadeTransition)

;;; --- expanded ---------------------------------------

(deftype FXExpanded []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Expanded
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag expanded tiltontec.mx-flutter.core/FXExpanded)

;;; --- column ---------------------------------------

(deftype FXColumn []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Column.
        :mainAxisAlignment (md/mget me :mainAxisAlignment)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (md/md-kids me))))))
(deftag column tiltontec.mx-flutter.core/FXColumn)

;;; --- row ---------------------------------------

(deftype FXRow []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Row
        :mainAxisAlignment (tiltontec.model.core/mget me :mainAxisAlignment)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (tiltontec.model.core/md-kids me))))))
(deftag row tiltontec.mx-flutter.core/FXRow)

;;; --- stack ---------------------------------------

(deftype FXStack []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Stack.
        :alignment (tiltontec.model.core/mget me :alignment)
        :clipBehavior (tiltontec.model.core/mget me :clipBehavior)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (md/md-kids me))))))

(deftag stack tiltontec.mx-flutter.core/FXStack)


;;; --- text ---------------------------------------

(deftype FXText []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child :style])
  (beefer [this]
    (fn [me ctx]
      ;; (dart:core/print (str "FXText Type REBUILDING " (cty/minfo me)))
      (w/Text (first (md/md-kids me))
        :style (let [style (mget me :style)]
                 (if (fn? style)
                   (style me ctx)
                   style))))))

(deftag text tiltontec.mx-flutter.core/FXText)

;;; --- text ---------------------------------------

(deftype FXTextField []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:controller])
  (beefer [this]
    (fn [me ctx]
      (m/TextField
        :onChanged (fn [text]
                     (when-let [handler (mget me :onChanged)]
                       (handler me ctx text)))
        :controller (when-let [con (mget me :controller)]
                      (assert (dart/is? con m/TextEditingController))
                      con)))))

(deftag text-field tiltontec.mx-flutter.core/FXTextField)

;;; --- elevated button  ---------------------------------------

(deftype FXElevatedButton []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/ElevatedButton
        :onPressed (fn []
                     (when-let [op (mget me :onPressed)]
                       (dp :FXelev-onpressing me :ctx ctx)
                       (op me ctx)))
        :child (tiltontec.mx-flutter.tag/render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag elevated-button tiltontec.mx-flutter.core/FXElevatedButton)

;;; --- GridView/counter -------------------------------------

(deftype FXGridView+count []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m.GridView/count
        :crossAxisCount (mget me :crossAxisCount)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (md-kids me))))))
(deftag grid-view+count tiltontec.mx-flutter.core/FXGridView+count)

;;; --- ListView/builder -----------------------------------------
;; todo can this be FXListView+Builder or FXListView.Builder or sth?
(deftype FXListView+builder []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXListView+builder-obs!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m.ListView/builder
        :padding (mget me :padding)
        :itemCount (mget me :itemCount)
        :itemBuilder (mget me :itemBuilder)))))

(deftag list-view+builder tiltontec.mx-flutter.core/FXListView+builder)

;;; --- flutter logo -----------------------------------------------------
; todo how could we do this without creating a custom type?
(deftype FXFlutterLogo []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/FlutterLogo
        :size (or (mget me :size) 128.0)))))

(deftag flutter-logo tiltontec.mx-flutter.core/FXFlutterLogo)

;;; --- ---------------------------------------

(deftype FXSizedBox+expand []
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (let [child (first (tiltontec.model.core/md-kids me))]
        (m.SizedBox/expand
          :child (render-fx child))))))

(deftag sized-box+expand tiltontec.mx-flutter.core/FXSizedBox+expand)
