(ns tiltontec.mx-flutter.core
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type unbound minfo cinfo Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget beefer render-fx] :as tag]))

(defmacro my-controller []
  `^m/AnimationController? (:controller (meta ~'me)))

(defmacro my-state []
  `^State? (:state-ref (meta ~'me)))

(defmacro my-ctx [& [me]]
  (let [me-ref (or me 'me)]
    `(do (assert (:state-ref (meta ~me-ref)) (str "state ref not bound for " (minfo ~me-ref)))
         (.context ^State (:state-ref (meta ~me-ref))))))

(defn ctx-page-push [ctx fx-page-def]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.push (-> ctx m.Navigator/of)
    (#/(m/MaterialPageRoute Object)
      :builder (fn [_]
                 (render-fx ctx fx-page-def)))))

(defn ctx-page-pop [ctx]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.pop (-> ctx m.Navigator/of)))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    ;; (dprn :FXDartWidget-observing???  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
    (when true
      ;; todo find better way to reduce observing:
      ;;      (some #{slot} (:fx-prop-keys @me))
      ;;(dprn :FXDartWidget-observing!!!  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
      (if-let [^State state (:state-ref (meta me))]
        (do (dpx :settingstate slot new-value #_ (meta me) (minfo me) state)
            (.setState state (fn [] (do))))
        (when-not (= prior-value cty/unbound)
          (dp :NOT-settingstate slot new-value (minfo me))))))

  PDartWidget
  (parts [this]
    [:no-parts])

  (fx-genner [this]
    nil)

  (beefer [this]
    (fn [me ctx]
      (if-let [beefer (mget me :beefer)]
        (do (dp :ad-hoc-widget-found-custom-beefer (minfo me) beefer)
            (beefer me ctx))
        (throw (Exception. "Property :beefer must be provided for ad hoc widgets"))))))

(deftag widget tiltontec.mx-flutter.core/FXDartWidget)

;;; --- material app ---------------------------------------

(deftype FXMaterialApp []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/MaterialApp
        :title (or (mget me :title) "")
        :theme (mget me :theme)
        :home (render-fx ctx (first (md-kids me)))))))

(deftag material-app tiltontec.mx-flutter.core/FXMaterialApp)

(defmacro material-app-F [fx-props mx-props & children]
  (prn :fxp fx-props)
  (prn :mxp mx-props)
  (prn :kids children)
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx-gen (fn [me ctx]
               (reify :extends #_ m/MaterialApp m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends #_ #/(w/State m/AppBar) w/State
                       (~'build [_# ctx]
                         (m/MaterialApp
                           :home (render-fx ctx (first (md/md-kids me)))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-resolve me ctx
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

;;; --- material ---------------------------------------
(deftype FXMaterial []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (let [color (mget me :color)]
        (m/Material
          :shape (mget me :shape)
          :clipBehavior (mget me :clipBehavior)
          :color (if (fn? color)
                   (color me ctx)
                   color)
          :elevation (mget me :elevation)
          :child (render-fx ctx (first (md-kids me))))))))

(deftag material tiltontec.mx-flutter.core/FXMaterial)

;;; --- icon button ------------------------------------

(deftype FXIconButton []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell])
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/IconButton
        :icon (mget me :icon)
        :onPressed (mget me :onPressed)
        :color (let [color (mget me :color)]
                 (if (fn? color)
                   (color me ctx)
                   color))))))
(deftag icon-button tiltontec.mx-flutter.core/FXIconButton)

;;; --- icon  ------------------------------------

(deftype FXIcon []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell])
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/Icon (mget me :icon)
        :color (let [color (mget me :color)]
                 (if (fn? color)
                   (color me ctx)
                   color))))))
(deftag icon tiltontec.mx-flutter.core/FXIcon)

;;; --- ink well ------------------------------------

(deftype FXInkWell []
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell])
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/InkWell
        :onTap (mget me :onTap)
        :child (render-fx ctx (first (md-kids me)))))))
(deftag ink-well tiltontec.mx-flutter.core/FXInkWell)

;;; --- scaffold ---------------------------------------

(deftype FXScaffold []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:appBar :body :actionButton])
  (beefer [this]
    (fn [me ctx]
      (m/Scaffold
        :appBar (tag/fx-resolve me ctx (mget me :appBar))
        :body (render-fx ctx (first (md/md-kids me)))
        :floatingActionButton
        (let [button (mget me :floatingActionButton)]
          (tag/fx-resolve me ctx button))))))

(deftag scaffold tiltontec.mx-flutter.core/FXScaffold)

;;; ---

(deftype FXAppBar []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXAppBar-NULL-observing!!! slot))
  PDartWidget
  (parts [this]
    [:title])
  (beefer [this]
    (fn [me ctx]
      (m/AppBar
        :title (let [title (mget me :title)]
                 (if (string? title)
                   (m/Text (str "Yikes-1" title))
                   title)))))
  (fx-genner [this]
    ;; Fact: Scaffolds require appBar objects to be PreferredSizeWidgets (PSW). AppBar is a PSW.
    ;; Problem: The default fx gen uses an anonymous StatefulWidget (not a PSW) as a wrapper.
    ;; Solution: override fx gen (so AppBars go out unwrapped and thus acceptable to Scaffold.
    (fn [me ctx]
      (reify :extends m/AppBar
        (createState [this]
          (util/rmap-meta-setf [:state-ref me]
            (reify :extends #/(w/State m/AppBar)
              (build [this ctx]
                (if-let [bldr (mget me :beefer)]
                  (bldr me ctx)
                  (let [type-beefer (beefer (FXAppBar))]
                    (type-beefer me ctx))))
              (^void initState [this]
                (.initState ^super this)
                (rmap-meta-setf [:context me] (.context this))
                (when-let [init (mget me :initState)]
                  (init this me)))
              (^void dispose [this]
                (when-let [orride (mget me :dispose)]
                  (orride this me))
                (.dispose ^super this)))))))))


(deftag app-bar tiltontec.mx-flutter.core/FXAppBar)

;;; --- single-child scroll view ----------------------------
(deftype FXSingleChildScrollView []
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/SingleChildScrollView
        :scrollDirection (md/mget me :scrollDirection)
        :child (render-fx ctx (first (md/md-kids me)))))))
(deftag single-child-scroll-view tiltontec.mx-flutter.core/FXSingleChildScrollView)

;;; --- data table  ----------------------------
(deftype FXDataTable []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:headingTextStyle :columnSpacing :sortColumnIndex :sortAscending :showBottomBorder :columns :rows])
  (beefer [this]
    (fn [me ctx]
      (m/DataTable
        :headingTextStyle (md/mget me :headingTextStyle)
        :showBottomBorder (md/mget me :showBottomBorder)
        :columns (md/mget me :columns)
        :rows (md/mget me :rows)))))
(deftag data-table tiltontec.mx-flutter.core/FXDataTable)

;;; --- floating action button

(deftype FXFloatingActionButton []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:onPressed :tooltip :child])
  (beefer [this]
    (fn [me ctx]
      (m/FloatingActionButton
        :onPressed (fn []
                     (when-let [op (mget me :onPressed)]
                       (op me ctx)))
        :tooltip (md/mget me :tooltip)
        :child (render-fx ctx (first (md/md-kids me)))))))

(deftag floating-action-button tiltontec.mx-flutter.core/FXFloatingActionButton)

;;; --- default tab controller -----------------------

(deftype FXDefaultTabController []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:appBar :body :actionButton])
  (beefer [this]
    (fn [me ctx]
      (m/DefaultTabController
        :length (mget me :length)
        :child (render-fx ctx (first (md/md-kids me)))))))

(deftag default-tab-controller tiltontec.mx-flutter.core/FXDefaultTabController)

;;; --- center ---------------------------------------

(deftype FXCenter []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Center
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag center tiltontec.mx-flutter.core/FXCenter)

;;; --- padding ---------------------------------------

(deftype FXPadding []
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:padding])
  (beefer [this]
    (fn [me ctx]
      (m/Padding
        :padding (mget me :padding)
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag padding tiltontec.mx-flutter.core/FXPadding)

;;; --- gesture detector

(deftype FXGestureDetector []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/GestureDetector
        :onPanDown (fn [^m/DragDownDetails details]
                     (when-let [pan (mget me :onPanDown)]
                       (pan me ctx details)))
        :onPanUpdate (fn [^m/DragUpdateDetails details]
                       (when-let [pan (mget me :onPanUpdate)]
                         (pan me ctx details)))
        :onPanEnd (fn [^m/DragEndDetails details]
                    (when-let [pan (mget me :onPanEnd)]
                      (pan me ctx details)))
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag gesture-detector tiltontec.mx-flutter.core/FXGestureDetector)

;;; --- align ----------------------
(deftype FXAlign []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (let [a (mget me :alignment)]
        ;;(dprn :FXAlign-beefer-sees-align a)
        (m/Align
          :alignment a
          :child (render-fx ctx (first (tiltontec.model.core/md-kids me))))))))

(deftag align tiltontec.mx-flutter.core/FXAlign)

;;; --- card -------------------------------------------

(deftype FXCard []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Card
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag card tiltontec.mx-flutter.core/FXCard)

;;; --- animated container -------------------------------------------

(deftype FXAnimatedContainer []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:height :width :color :border-radius])
  (beefer [this]
    (fn [me ctx]
      (if-let [tfa (md/mget me :transformAlignment)]
        (m/AnimatedContainer
          :duration ^:const (md/mget me :duration)
          :curve (md/mget me :curve)
          :transformAlignment (md/mget me :transformAlignment)
          :transform (md/mget me :transform))
        (m/AnimatedContainer
          :width (md/mget me :width)
          :height (md/mget me :height)
          :decoration (md/mget me :decoration)
          :duration ^:const (md/mget me :duration)
          :curve (md/mget me :curve))))))

(deftag animated-container tiltontec.mx-flutter.core/FXAnimatedContainer)

;;; --- animated opacity -------------------------------------------

(deftype FXAnimatedOpacity []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child :opacity :curve :duration :onEnd])
  (beefer [this]
    (fn [me ctx]
      (m/AnimatedOpacity
        :opacity (md/mget me :opacity)
        :duration ^:const (md/mget me :duration)
        :curve (md/mget me :curve)
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag animated-opacity tiltontec.mx-flutter.core/FXAnimatedOpacity)

;;; --- ignore pointer -------------------------------------------

(deftype FXIgnorePointer []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:ignoring :ignoringSemantics])
  (beefer [this]
    (fn [me ctx]
      (m/IgnorePointer
        :ignoring (md/mget me :ignoring)
        :ignoringSemantics (md/mget me :ignoringSemantics)
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag ignore-pointer tiltontec.mx-flutter.core/FXIgnorePointer)

;;; --- animated builder -------------------------------------------

(deftype FXAnimatedBuilder []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:animation :child])
  (beefer [this]
    (fn [me ctx]
      (m/AnimatedBuilder
        :animation (let [ani (mget me :animation)]
                     (assert ani "anibuilder sees null :animation property")
                     (dp :anibuilder-sees-ani ani)
                     (if (fn? ani)
                       (ani me ctx)
                       ^#/(m/Animation double) ani))
        :child (let [childer (mget me :animated-child)]
                 (assert childer "Animated builder requires :animated-child property")
                 (render-fx ctx (if (fn? childer)
                              (childer me ctx)
                              childer)))
        :builder (fn [ctx child]
                   (let [beefer (mget me :ani-beefer)]
                     (assert beefer (str "Animated builder " #_(minfo me) " lacks required beefer callback "))
                     (render-fx ctx (beefer me ctx child))))))))

(deftag animated-builder tiltontec.mx-flutter.core/FXAnimatedBuilder)

;;; --- fade transition -------------------------------------------

(deftype FXFadeTransition []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:opacity :child])
  (beefer [this]
    (fn [me ctx]
      (m/FadeTransition
        :opacity (let [op (mget me :opacity)]
                   (if (fn? op)
                     (op me ctx)
                     op))
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))
(deftag fade-transition tiltontec.mx-flutter.core/FXFadeTransition)

;;; --- expanded ---------------------------------------

(deftype FXExpanded []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/Expanded
        :child (render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag expanded tiltontec.mx-flutter.core/FXExpanded)

;;; --- column ---------------------------------------

(deftype FXColumn []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Column.
        :mainAxisAlignment (md/mget me :mainAxisAlignment)
        :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))))))
(deftag column tiltontec.mx-flutter.core/FXColumn)

;;; --- row ---------------------------------------

(deftype FXRow []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Row
        :mainAxisAlignment (tiltontec.model.core/mget me :mainAxisAlignment)
        :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (tiltontec.model.core/md-kids me))))))
(deftag row tiltontec.mx-flutter.core/FXRow)

;;; --- stack ---------------------------------------

(deftype FXStack []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (beefer [this]
    (fn [me ctx]
      (m/Stack.
        :alignment (tiltontec.model.core/mget me :alignment)
        :clipBehavior (tiltontec.model.core/mget me :clipBehavior)
        :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md/md-kids me))))))

(deftag stack tiltontec.mx-flutter.core/FXStack)


;;; --- text ---------------------------------------

(deftype FXText []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child :style])
  (beefer [this]
    (fn [me ctx]
      ;; (dart:core/print (str "FXText Type REBUILDING " (cty/minfo me)))
      (w/Text (first (md/md-kids me))
        :style (let [style (mget me :style)]
                 (if (fn? style)
                   (style me ctx)
                   style))))))

(deftag text tiltontec.mx-flutter.core/FXText)

;;; --- text field ---------------------------------------

(deftype FXTextField []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:controller])
  (beefer [this]
    (fn [me ctx]
      (m/TextField
        :onChanged (fn [text]
                     (when-let [handler (mget me :onChanged)]
                       (handler me ctx text)))
        :controller (when-let [con (mget me :controller)]
                      (assert (dart/is? con m/TextEditingController))
                      con)))))

(deftag text-field tiltontec.mx-flutter.core/FXTextField)

;;; --- elevated button  ---------------------------------------

(deftype FXElevatedButton []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (beefer [this]
    (fn [me ctx]
      (m/ElevatedButton
        :onPressed (fn []
                     (when-let [op (mget me :onPressed)]
                       (dp :FXelev-onpressing me :ctx ctx)
                       (op me ctx)))
        :child (tiltontec.mx-flutter.tag/render-fx ctx (first (tiltontec.model.core/md-kids me)))))))

(deftag elevated-button tiltontec.mx-flutter.core/FXElevatedButton)

;;; --- GridView/counter -------------------------------------

(deftype FXGridViewCount []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m.GridView/count
        :crossAxisCount (mget me :crossAxisCount)
        :children (mapv (partial tiltontec.mx-flutter.tag/render-fx ctx) (md-kids me))))))
(deftag grid-view+count tiltontec.mx-flutter.core/FXGridViewCount)

;;; --- ListView/builder -----------------------------------------
(deftype FXListViewBuilder []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXListViewBuilder-obs!! slot))
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m.ListView/builder
        :padding (mget me :padding)
        :itemCount (mget me :itemCount)
        :itemBuilder (mget me :itemBuilder)))))

(deftag list-view+builder tiltontec.mx-flutter.core/FXListViewBuilder)

;;; --- flutter logo -----------------------------------------------------

(deftype FXFlutterLogo []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (m/FlutterLogo
        :size (or (mget me :size) 128.0)))))

(deftag flutter-logo tiltontec.mx-flutter.core/FXFlutterLogo)

;;; --- ---------------------------------------

(deftype FXSizedBox []
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (let [child (first (tiltontec.model.core/md-kids me))]
        (m/SizedBox
          :width (mget me :width)
          :height (mget me :height)
          :child (render-fx ctx child))))))

(deftag sized-box tiltontec.mx-flutter.core/FXSizedBox)

;;; --- ---------------------------------------

(deftype FXSizedBoxExpand []
  :extends FXDartWidget
  PDartWidget
  (beefer [this]
    (fn [me ctx]
      (let [child (first (tiltontec.model.core/md-kids me))]
        (m.SizedBox/expand
          :child (render-fx ctx child))))))

(deftag sized-box+expand tiltontec.mx-flutter.core/FXSizedBoxExpand)
