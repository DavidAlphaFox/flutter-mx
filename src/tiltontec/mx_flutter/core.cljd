(ns tiltontec.mx-flutter.core
  (:require [clojure.string :as str]
            ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.util.core
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.base :refer [mx-type unbound  cinfo Model PObserver observe md-ref?] :as cty]
            [tiltontec.cell.integrity :as integrity]

            [tiltontec.cell.core :as cell :refer [cF cF+ cI cF_]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [clojure.string :as str]))

(deftype CBAsIs [value]
  ;; tells fx-resolve to leave mx value untouched
  ;; used originally so a FX callback (the builder for AnimatedBuilder) was not
  ;; treated as callback to MX to get the resolved value.
  :extends cty/MXImplementer)

(deftype CBToResolve [value]
  ;; tells fx-resolve to call the mx value as a function of ctx and me.
  ;; used where app needs to see the Flutter context to decide a value
  :extends cty/MXImplementer)

(defn fx-resolve
  ([me ctx widget-value]
   (fx-resolve :anon me ctx widget-value))
  ([slot me ctx widget-value]
   ;(dp :resolving slot (tiltontec.cell.base/minfo me) widget-value)
   (cond
     (nil? widget-value)
     (do
       ;(dp :exwid-sees-nil-widget-value!!!!!!!!!! slot (tiltontec.cell.base/minfo me))
       nil)

     (dart/is? widget-value CBAsIs)
     (do
       (dpx :fx-resolve-as-ising!!!!!!!!! slot (tiltontec.cell.base/minfo me) widget-value)
       (.-value ^CBAsIs widget-value))

     (dart/is? widget-value CBToResolve)
     (let [val ^CBToResolve widget-value]
       (dpx :fx-reso-calling-back!!!!!!! slot (tiltontec.cell.base/minfo me) widget-value)
       (let [cb-val (.-value val)]                          ;; ^CBToResolve widget-value)]
         (dpx :CBToResolveyields cb-val)
         (recur slot me ctx cb-val)))

     (dart/is? widget-value m/Widget)
     (do
       ;;(dp :widget-value-is-widget widget-value)
       widget-value)

     (fn? widget-value)
     (do                                                    ;; (dp :ew-sees-fn widget-value)
       (dpx :fxres-calling-fn?-blind widget-value)
       (let [v (widget-value me ctx)]
         (dpx :recuring-unwrapped-fn?-return-val v)
         (recur slot me ctx v)))

     (cty/c-ref? widget-value)
     (throw (Exception. (str "fx-resolve sees Cell! " (cinfo widget-value))))

     (cty/md-ref? widget-value)
     (do
       (let [fx (fx-render ctx widget-value)]
         (dpx :rfx-mdref-yielded-flutter fx)
         fx))

     (vector? widget-value)
     (do (dpx :BAM-vector!!!!!!! widget-value)
         (let [rzd (doall (map (partial fx-resolve me ctx) widget-value))]
           (dpx :vec-rez rzd)
           rzd))

     :default (do #_(dp :resolve-fall-thru-used slot (tiltontec.cell.base/minfo me) widget-value
                      (when (atom? widget-value)
                        (deref widget-value)))
                widget-value))))


(defn ctx-page-push [ctx fx-page-def]
  (.push (-> ctx m.Navigator/of)
    (#/(m/MaterialPageRoute Object)
      .builder (fn [_]
                 (fx-render ctx fx-page-def)))))

(defn ctx-page-pop [ctx]
  (.pop (-> ctx m.Navigator/of)))

(defn fx-render [ctx fx]
  (dpx :render-entry ctx (tiltontec.cell.base/minfo fx))
  (cond
    (not (md-ref? fx))
    (cond
      (cty/c-ref? fx) (throw (Exception. (str "fx-render passed Cell " (deref fx))))
      :default (do
                 (dpx :render-sees-not-md-ref?-passing-thru fx)
                 fx))
    :else (let [gen (mget fx :fx-gen)]
            (dpx :render-sees-gen!! gen)
            (assert gen "OBAD: fx-render of model finds no fx-gen: ")
            (let [g (gen fx ctx)]
              (dpx :render-genned!!! g)
              (rmap-meta-setf [:fx-dom fx] g)
              g))))

(defmacro cb-with-ctx [[me-var ctx-var] & body]
  `(tiltontec.mx-flutter.core/->CBToResolve
     (fn [~me-var ~ctx-var]
       ~@body)))

(defn fx-state-nearest [me]
  (dpx :state-nearest-entry (tiltontec.cell.base/minfo me))
  (when me
    (or ^State? (mget me :fx$state)
      (when-let [st (fx-state-nearest (md/mpar))]
        (dp :got-nearest-st-JIT st (tiltontec.cell.base/minfo me))
        ;; todo memoize instead
        ;; (md/mset! me :fx$state st)                            ;; for next time
        st))))

(defmacro when-my-state [[state-var] & body]
  `(when-let [~state-var (tiltontec.mx-flutter.core/my-state)]
     ~@body))

(defn ctx-nav [ctx]
  (m.Navigator/of ctx))

(defmacro my-controller []
  `^m/AnimationController? (tiltontec.model.core/mget ~'me :controller))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tiltontec.model.core/mget ~'me :animation))

(defmacro my-state []
  `(tiltontec.model.core/mget ~'me :fx$state))

;;; --- make fxx ------------------------------------------

(defn make-fx [mx-type fx-props custom-props cFkids-form]
  (dpx :make-fx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    :fx$state (cI nil)
    ;; todo move next two to meta
    :fx$ikeys (remove #{:fx-class :fx-gen :name :key}
                (concat (keys fx-props) (keys custom-props)))
    :initState (fn [this me]                                ;; this one too
                 #_ (do
                      (dp :initstate-cb!!!!!!!!!-saves-state)
                      (md/mset! me :fx$state this)
                      (dp :initstate-cb!!!!!!!!!-fini)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(defn state-set [^State state]
  ; the todos demo failed trying to setState a list item that was unmounted
  ; it may be that the widget saw it needed to redraw at the same time it was getting tossed
  ; disable this safeguard vvv and follow this sequence to recreate:
  ;    start the todos demo
  ;    hit clear completed to lose a td
  ;    click "Active", but not "Done" for some reason
  ;    get nice error from Flutter
  (if (.-mounted state)
    (.setState state (fn [] (do)))
    (dp :NOT_SETSTATE-NOT_MOUNTED state)))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    ;; no need to observer initial value observation, when prior is unbound
    (when-not (some #{slot} [:par :name :mx-type :not-to-be :initState :fx-class :cells-flushed
                             :fx$state :fx$ikeys :fx$notifier :fx$observer])
      (when-not (= prior-value cty/unbound)
        (dpx :FXDartWidget-observing!!! slot new-value prior-value (tiltontec.cell.base/minfo me) (cinfo cell))
        (dpx :FXDartWidget-observing-md!!! slot (tiltontec.cell.base/minfo me) :deref @me)
        (dpx :FXDartWidget-observing-cell!!! slot (cinfo cell) @cell)
        (when-let [noter (mget me :fx$notifier)]
          (.notifyListeners ^m/ChangeNotifier noter))

        (if-let [^State state (mget me :fx$state)]
          (do (dpx :settingimmediatestate slot new-value #_(meta me) (md/mget me :sid) (tiltontec.cell.base/minfo me) state (.-mounted state))
              (state-set state))
          (if-let [^State state (fx-state-nearest me)]
            (do
              (dpx :obs-FXD-uses-nearest-state state (.-mounted state) :sid (md/mget me :sid)
                :slot slot :new-prio new-value prior-value)
              (state-set state))
            (dp :NOT-setting-state-on-stateless slot new-value :sid (md/mget me :sid) (tiltontec.cell.base/minfo me))))))))

;;; ---- sundry factories per Flutter variation ------------------

(defmacro k1-child-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .child (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                              (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-child-stateless-ex [fx-class fx-props mx-props & children]
  (let []
    (prn :k1-child-stateless-ex-entry fx-class fx-props mx-props :kids children)
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .child (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                              (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-child-stateless-dbg [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .child (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                              (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

;(defmacro deftag [factory mx-name]
;  `(defmacro ~mx-name [& vargs#]
;     (let []
;       `(~'~factory ~'(symbol "m" (clojure.string/capitalize (name '~mx-name))) ~fx-props# ~mx-props# ~@children#))))

(defmacro deftag [factory mx-name fx-class & [param-property]]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# & children#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just kids
             (list* nil nil vargs#)

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list* (first vargs#) nil (rest vargs#)))]
       `(~'~factory ~@(when ~param-property
                        [~param-property]) ~'~fx-class ~fx-props# ~mx-props# ~@children#))))

(deftag tiltontec.mx-flutter.core/k1-child-stateless material m/Material)
(deftag tiltontec.mx-flutter.core/k1-child-stateless fade-transition m/FadeTransition)
(deftag tiltontec.mx-flutter.core/k1-child-stateless ink-well m/InkWell)
(deftag tiltontec.mx-flutter.core/k1-child-stateless container m/Container)
(deftag tiltontec.mx-flutter.core/k1-child-stateless card m/Card)
(deftag tiltontec.mx-flutter.core/k1-child-stateless padding m/Padding)
(deftag tiltontec.mx-flutter.core/k1-child-stateless center m/Center)
(deftag tiltontec.mx-flutter.core/k1-body-stateful scaffold m/Scaffold)

(defmacro deftagnokids [factory mx-name fx-class]
  `(defmacro ~mx-name [& vargs#]
     ;; todo user error checking
     (let [[fx-props# mx-props#] vargs#]
       `(~'~factory ~'~fx-class ~fx-props# ~mx-props#))))

(deftagnokids tiltontec.mx-flutter.core/childless-stateless app-bar m/AppBar)
(deftag tiltontec.mx-flutter.core/childless-stateless data-table m/DataTable)

(defmacro k1-content-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .content (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                                (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro alert-dialog [fx-props mx-props & children]
  `(k1-content-stateless m/AlertDialog ~fx-props ~mx-props ~@children))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .children (mapv (partial tiltontec.mx-flutter.core/fx-render ctx) (md/md-kids me))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

(defmacro k1-param1-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class (tiltontec.mx-flutter.core/fx-render ctx (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(deftag tiltontec.mx-flutter.core/k1-param1-stateless text m/Text)

(defn record-state! [me state]
  (dp :reco-state!! (tiltontec.cell.base/minfo me) cty/*defer-changes* cty/*within-integrity*)
  (integrity/with-cc :reco-state
    (md/mset!x me :fx$state state)))

(defmacro k1-param1-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (record-state! me this)

                           #_ ;; HHACK
                                   (when-let [init (mget me :initState)]
                             (dp :calling-initstate-of (tiltontec.cell.base/minfo me))
                             (init this me)))
                         (~'build [_# ctx]
                           (~fx-class (tiltontec.mx-flutter.core/fx-render ctx (first (tiltontec.model.core/md-kids me)))
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateful [fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (record-state! me this)
                           #_(when-let [init (mget me :initState)]
                               (init this me)))
                         (~'build [_# ctx]
                           (~fx-class
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(deftag tiltontec.mx-flutter.core/childless-stateful text-field m/TextField)
(deftag tiltontec.mx-flutter.core/childless-stateful check-box m/Checkbox)

(defmacro prop-param1-childless-stateful [p1-prop-name fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (dp :REIFY-set!fxstate (tiltontec.cell.base/minfo me))
                           (record-state! me this)
                           (when-let [init (mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (~fx-class (tiltontec.mx-flutter.core/fx-resolve :ico-prop me ctx
                                        (tiltontec.model.core/mget me ~p1-prop-name))
                             ~@(let [kvs (for [[k# _#] (dissoc fx-props p1-prop-name)]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                  (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(deftag tiltontec.mx-flutter.core/prop-param1-childless-stateful icon m/Icon :icon)

(defmacro k1-body-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (dp :REIFY-set!fxstate (tiltontec.cell.base/minfo me))
                           (record-state! me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (let [bod# (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               ;; todo throw error if they specify :body explicitly, for now
                               .body bod#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                    (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro make-fx-snackbar [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (~fx-class #_m/SnackBar
                                     ~@(let [kvs (for [[k# _#] fx-props]
                                                   [(symbol (str "." (name k#)))
                                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                          (tiltontec.model.core/mget me ~k#))])]
                                         (apply concat kvs)))
                     ^#/(w/State ~fx-class #_m/SnackBar)
                     (~'createState [_#]
                       (reify :extends #/(w/State #_~'~fx-class m/SnackBar)
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (dp :REIFY-set!fxstate (tiltontec.cell.base/minfo me))
                           (record-state! me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (~fx-class                     ;; /SnackBar
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                               (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))
;; todo does snackbar still need this custom macro?
(deftag tiltontec.mx-flutter.core/make-fx-snackbar snack-bar m/SnackBar)

(defmacro k1-home-stateful [fx-class fx-props mx-props & children]
  (let []
    ;(assert (not (contains? fx-props :home)) "k1-home-stateful passed :home param in FX props, but expects :home as first child")
    ;(assert (not (contains? mx-props :home)) "k1-home-stateful sees :home in MX props, but expects :home as first child")
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (dp :REIFY-set!fxstate (tiltontec.cell.base/minfo me))
                           (record-state! me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (let [bod# (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               .home bod#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#))) ;;k#
                                              `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                 (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-child-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin ;; todo make optional
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (dp :REIFY-set!fxstate (tiltontec.cell.base/minfo me))
                           (record-state! me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (let [k1# (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                                       (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               .child k1#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                    (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro prop-param1-childless-stateless [prop fx-class fx-props mx-props]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class (tiltontec.mx-flutter.core/fx-resolve ~prop me ctx
                                (tiltontec.model.core/mget me ~prop))
                     ~@(let [kvs (for [[k# _#] (dissoc fx-props prop)]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                          (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

;;; --- childless stateless --------------------------------------------------------

(defmacro icon-button [& vargs]
  (let [[fx-props mx-props] vargs]
    `(childless-stateless m/IconButton ~fx-props ~mx-props)))

(defmacro list-view+builder [& vargs]
  (let [[fx-props mx-props] vargs]
    `(childless-stateless m.ListView/builder ~fx-props ~mx-props)))

(defmacro separated-ad-lib [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro list-view+separated [& vargs]
  (let [[fx-props mx-props & children] vargs]
    `(separated-ad-lib m.ListView/separated ~fx-props ~mx-props ~@children)))

;;; -------------------------------------------------------------

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(k1-child-stateful m.SizedBox/expand ~fx-props ~mx-props ~@children))

;;; --- next two not yet confirmed in practice
(defmacro positioned [fx-props mx-props & children]
  `(k1-child-stateful m/Positioned ~fx-props ~mx-props ~@children))
(defmacro transorm+rotate-ful [fx-props mx-props & children]
  `(k1-child-stateful m.Transform/rotate ~fx-props ~mx-props ~@children))



(deftag tiltontec.mx-flutter.core/k1-home-stateful material-app m/MaterialApp)
(deftag tiltontec.mx-flutter.core/k1-param1-stateful text! m/Text)

(deftag tiltontec.mx-flutter.core/childless-stateless rounded-rectangle-border p/RoundedRectangleBorder)
(deftag tiltontec.mx-flutter.core/childless-stateless list-tile m/ListTile)
(deftag tiltontec.mx-flutter.core/childless-stateless flutter-logo m/FlutterLogo)

(defmacro k1-child-stateful-ex [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.mx-flutter.core/make-fx (new FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.mx-flutter.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (record-state! me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (let [k1# (tiltontec.mx-flutter.core/fx-resolve :kid1 me ctx
                                       (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               .child k1#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.mx-flutter.core/fx-resolve ~k# me ctx
                                                    (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(deftag tiltontec.mx-flutter.core/k1-child-stateless single-child-scroll-view m/SingleChildScrollView)
(deftag tiltontec.mx-flutter.core/k1-child-stateless expanded m/Expanded)
(deftag tiltontec.mx-flutter.core/k1-child-stateless preferred-size m/PreferredSize)
(deftag tiltontec.mx-flutter.core/k1-child-stateless animated-opacity m/AnimatedOpacity)
(deftag tiltontec.mx-flutter.core/k1-child-stateless drawer-header m/DrawerHeader)
(deftag tiltontec.mx-flutter.core/k1-child-stateless floating-action-button m/FloatingActionButton)
(deftag tiltontec.mx-flutter.core/k1-child-stateless align m/Align)
(deftag tiltontec.mx-flutter.core/k1-child-stateless ignore-pointer m/IgnorePointer)
(deftag tiltontec.mx-flutter.core/k1-child-stateless visibility m/Visibility)
(deftag tiltontec.mx-flutter.core/k1-child-stateful-ex visibility! m/Visibility)
(deftag tiltontec.mx-flutter.core/k1-child-stateless opacity m/Opacity)
(deftag tiltontec.mx-flutter.core/k1-child-stateful opacity! m/Opacity)
(deftag tiltontec.mx-flutter.core/k1-child-stateful ink m/Ink)
(deftag tiltontec.mx-flutter.core/k1-child-stateful focus m/Focus)

(deftag tiltontec.mx-flutter.core/k1-child-stateful hero m/Hero)
(deftag tiltontec.mx-flutter.core/k1-child-stateful gesture-detector m/GestureDetector)
(deftag tiltontec.mx-flutter.core/k1-child-stateful elevated-button m/ElevatedButton)
(deftag tiltontec.mx-flutter.core/k1-child-stateful default-tab-controller m/DefaultTabController)

(deftag tiltontec.mx-flutter.core/k1-child-stateful focus m/Focus)
(deftag tiltontec.mx-flutter.core/k1-child-stateful focus-scope m/FocusScope)
(deftag tiltontec.mx-flutter.core/k1-child-stateful text-button m/TextButton)
(deftag tiltontec.mx-flutter.core/k1-child-stateful focus+focus-node m.Focus/withExternalFocusNode)
(deftag tiltontec.mx-flutter.core/k1-child-stateful animated-builder m/AnimatedBuilder)
(deftag tiltontec.mx-flutter.core/k1-child-stateful animated-container m/AnimatedContainer)

(deftag tiltontec.mx-flutter.core/children-stateless stack m/Stack)
(deftag tiltontec.mx-flutter.core/children-stateless column m/Column)
(deftag tiltontec.mx-flutter.core/children-stateless row m/Row)
(deftag tiltontec.mx-flutter.core/children-stateless list-view m/ListView)
(deftag tiltontec.mx-flutter.core/children-stateless grid-view+count m.GridView/count)

(deftag tiltontec.mx-flutter.core/k1-child-stateless drawer m/Drawer)
(deftag tiltontec.mx-flutter.core/k1-child-stateless sized-box m/SizedBox)


(defmacro with-ctx+as-is [[me ctx] callback-fn]
  `(tiltontec.mx-flutter.core/cb-with-ctx [~me ~ctx]
     (tiltontec.mx-flutter.core/->CBAsIs
       ~callback-fn)))