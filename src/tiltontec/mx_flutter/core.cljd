(ns tiltontec.mx-flutter.core
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn]]
            [tiltontec.cell.base :refer [mx-type unbound Model PObserver observe] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [tiltontec.mx-flutter.tag :refer [deftag PDartWidget render-fx] :as tag]))

;(deftype TPart []
;  PDartWidget
;  (parts [this]
;    [:no-parts])
;  (parts-ex [this count]
;    [:no-parts (* 2 count)]))

;(deftype StateWTicker []
;  :extends m/State ^:mixin m/SingleTickerProviderStateMixin)

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    (when (some #{slot} (:fx-prop-keys @me))
      ;;(dprn :FXDartWidget-observing!!!  slot (:fx-prop-keys @me) new-value prior-value (cty/minfo me)(cty/cinfo cell))
      (when-let [^State state (:state-ref (meta me))]
        (.setState state (fn [] (do))))))

  PDartWidget
  (parts [this]
    [:no-parts])

  (builder [this]
    (fn [me ctx]
      (dprn :widget-ctx ctx)
      (if-let [builder (mget me :builder)]
        (builder me ctx)
        (throw (Exception. "Property :builder must be provided for ad hoc widgets"))))))

(deftag widget tiltontec.mx-flutter.core/FXDartWidget)

;;; --- material app ---------------------------------------

(deftype FXMaterialApp []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (builder [this]
    (fn [me ctx]
      (dprn :matl-app-ctx ctx)
      (m/MaterialApp
        :title (mget me :title)
        :theme (mget me :theme)
        :home (render-fx (first (md-kids me)))))))

(deftag material-app tiltontec.mx-flutter.core/FXMaterialApp)

;;; --- scaffold ---------------------------------------

(deftype FXScaffold []
  ;;:type-only true
  :extends FXDartWidget
  PDartWidget
  (parts [this]
    [:appBar :body :actionButton])
  (builder [this]
    (fn [me ctx]
      (dprn :scaff-ctx ctx)
      (m/Scaffold
        :appBar (mget me :appBar)                           ;; todo this s/b render-fx
        :body (render-fx (first (md/md-kids me)))
        :floatingActionButton
        ;; todo this too s/b render-fx
        (let [button# (mget me :floatingActionButton)]
          (if (fn? button#)
            (button# me ctx)
            button#))))))

(deftag scaffold tiltontec.mx-flutter.core/FXScaffold)

;;; --- center ---------------------------------------

(deftype FXCenter []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      ;;(dprn (str "Center Type REBUILDING " (cty/minfo me)))
      (m/Center
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag center tiltontec.mx-flutter.core/FXCenter)

;;; --- gesture detector

(deftype FXGestureDetector []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      ;;(dprn (str "Center Type REBUILDING " (cty/minfo me)))
      (m/GestureDetector
        :onPanDown (fn [^m/DragDownDetails details]
                     ;(dprn :pandown-deets details (str details))
                     ;(dprn :pandown-local (-> details .localPosition))
                     ;(dprn :pandown-global (-> details .globalPosition))
                     ;; (dprn "pdown-delta" (-> details .delta))
                     (when-let [pan (mget me :onPanDown)]
                       (pan me ctx details)))
        :onPanUpdate (fn [^m/DragUpdateDetails details]
                       ;(dprn :dragupd-deets details)
                       ;(dprn :dragupd-delta (-> details .delta))
                       (when-let [pan (mget me :onPanUpdate)]
                         (pan me ctx details)))
        :onPanEnd (fn [^m/DragEndDetails details]
                    ;(dprn :panend (str details))
                    (when-let [pan (mget me :onPanEnd)]
                      (pan me ctx details)))
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag gesture-detector tiltontec.mx-flutter.core/FXGestureDetector)

;;; --- align ----------------------
(deftype FXAlign []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      (let [a (mget me :alignment)]
        ;;(dprn :FXAlign-builder-sees-align a)
        (m/Align
          :alignment a
          :child (render-fx (first (tiltontec.model.core/md-kids me))))))))

(deftag align tiltontec.mx-flutter.core/FXAlign)

;;; --- card -------------------------------------------

(deftype FXCard []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      (m/Card
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag card tiltontec.mx-flutter.core/FXCard)

;;; --- expanded ---------------------------------------

(deftype FXExpanded []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      (m/Expanded
        :child (render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag expanded tiltontec.mx-flutter.core/FXExpanded)

;;; --- column ---------------------------------------

(deftype FXColumn []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (builder [this]
    (fn [me ctx]
      ;;(dprn (str "Column Type REBUILDING " (cty/minfo me)))
      (m/Column.
        :mainAxisAlignment (md/mget me :mainAxisAlignment)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (md/md-kids me))))))

(deftag column tiltontec.mx-flutter.core/FXColumn)

;;; --- row ---------------------------------------

(deftype FXRow []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:children])
  (builder [this]
    (fn [me ctx]
      (m/Row
        :mainAxisAlignment (tiltontec.model.core/mget me :mainAxisAlignment)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (tiltontec.model.core/md-kids me))))))

(deftag row tiltontec.mx-flutter.core/FXRow)

;;; --- text ---------------------------------------

(deftype FXText []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child :style])
  (builder [this]
    (fn [me ctx]
      ;; (dart:core/print (str "FXText Type REBUILDING " (cty/minfo me)))
      (w/Text (first (md/md-kids me))
        :style (let [style (mget me :style)]
                 (if (fn? style)
                   (style me ctx)
                   style))))))

(deftag text tiltontec.mx-flutter.core/FXText)

;;; --- elevated button  ---------------------------------------

(deftype FXElevatedButton []
  :extends FXDartWidget
  ;;:type-only true
  PDartWidget
  (parts [this]
    [:child])
  (builder [this]
    (fn [me ctx]
      (m/ElevatedButton
        :onPressed (mget me :onPressed)
        :child (tiltontec.mx-flutter.tag/render-fx (first (tiltontec.model.core/md-kids me)))))))

(deftag elevated-button tiltontec.mx-flutter.core/FXElevatedButton)

;;; --- GridView/counter -------------------------------------

(deftype FXGridViewCount []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    (dprn :FXGridViewCount-obs-IGNORE!! slot))
  PDartWidget
  (builder [this]
    (fn [me ctx]
      (m.GridView/count
        :crossAxisCount (mget me :crossAxisCount)
        :children (mapv tiltontec.mx-flutter.tag/render-fx (md-kids me))))))

(deftag grid-view-count tiltontec.mx-flutter.core/FXGridViewCount)

;;; --- ListView/builder -----------------------------------------

(deftype FXListViewBuilder []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    (dprn :FXListViewBuilder-obs!! slot))
  PDartWidget
  (builder [this]
    (fn [me ctx]
      (m.ListView/builder
        :padding (mget me :padding)
        :itemCount (mget me :itemCount)
        :itemBuilder (mget me :itemBuilder)))))

(deftag list-view-builder tiltontec.mx-flutter.core/FXListViewBuilder)

;;; --- flutter logo -----------------------------------------------------

(deftype FXFlutterLogo []
  ;;:type-only true
  :extends FXDartWidget
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_(dprn :FXMatapp-NULL-observing!!! slot))
  PDartWidget
  (builder [this]
    (fn [me ctx]
      (m/FlutterLogo
        :size (or (mget me :size) 128.0)))))

(deftag flutter-logo tiltontec.mx-flutter.core/FXFlutterLogo)