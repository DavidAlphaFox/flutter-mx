(ns tiltontec.mx-flutter.tag
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State PreferredSizeWidget StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type minfo cinfo unbound Model PObserver observe md-ref?] :as cty]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]))

(defprotocol PDartWidget
  (parts [this] "eg, Scaffold [:appBar :body :floatingActionButton ...]")
  (parts-ex [this count] "Test")
  (beefer [this])
  (fx-genner [this]))

(defn render-fx [fx]
  (cond
    (not (md-ref? fx))
    (do
     ;(dprn :rnfx-sees-not-md-ref?-passing-thru fx)
      fx)

    :else (let [gen (mget fx :fx-gen)]
            (assert gen "OBAD: render-fx of model finds no fx-gen: ")
            (gen fx))))

(defn statefully [me beefer]
  (reify :extends w/StatefulWidget
    (createState [this]
      (util/rmap-meta-setf [:state-ref me]
        (reify :extends w/State
          ^:mixin m/SingleTickerProviderStateMixin          ;; todo make specifiable (macroland?)
          (build [this ctx]
            ;; the current use of statefully is to pass along as the beefer either
            ;; one defined with the MX instance or one provided by the FXType as beefer.
            ;; So can we just let the FXType always define builders?
            ;;
            ;; we include the MX "me" in the generation...
            (beefer me ctx))
          (^void initState [this]
            (.initState ^super this)
            (rmap-meta-setf [:context me] (.context this))
            (when-let [init (mget me :initState)]
              (init this me)))
          (^void dispose [this]
            (when-let [orride (mget me :dispose)]
              (orride this me)) ;; todo why pass this?
            (.dispose ^super this)))))))

(defn make-fx [mx-type fx-props custom-props cFkids-form]
  ;;(dp :make-fx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    :fx-prop-keys (keys fx-props)
    :kids cFkids-form
    :fx-gen (fn [me]
              ;; the default "statefully" works for must Flutter widgets,
              ;; but not all, such as AppBar, so we allow individual widget Types to
              ;; supply their own fx-gen.
              (if-let [type-fx-gen (fx-genner mx-type)]
                (type-fx-gen me)
                ; --- no special fx gen, so...the default:
                (tiltontec.mx-flutter.tag/statefully me
                  (fn [me ctx]
                    (let [beefer (or (mget me :beefer)
                                    (beefer mx-type))]
                      ;; (dp :make-fx-using-beefer!!!!!!!! (minfo me) beefer)
                      (beefer me ctx))))))
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(defmacro deftag [tag fx-type-name]
  ;;(dprn :deftag-entry!!!!!!! tag fx-type-name)
  `(defmacro ~tag [& vargs#]
     ;;(dprn :expanding-deftag '~tag)
     (let [fx-type# '~fx-type-name]
       (cond
         (nil? vargs#)
         `(tiltontec.mx-flutter.tag/make-fx (new ~fx-type#)
            {} {} nil)

         (not (map? (first vargs#)))
         (do                                                ;;(dprn :just-kids!!!!!!!! '~tag)
           ;; we must have justkids
           `(tiltontec.mx-flutter.tag/make-fx (new ~fx-type#)
              {} {}
              (tiltontec.model.core/cFkids ~@vargs#)))

         (map? (second vargs#))
         ;; full spec, maybe kids
         (do                                                ;;(dprn :full-spec!!!!!!!!!!!! (second vargs#))
           `(tiltontec.mx-flutter.tag/make-fx (new ~fx-type#)
              ~(first vargs#)
              ~(second vargs#)
              ~(when-let [kids# (seq (nthrest vargs# 2))]
                 ;;(prn :kids-form-will-be kids#)
                 `(tiltontec.model.core/cFkids ~@kids#))))

         :else                                              ;; just first map of fx props and maybe kids
         `(tiltontec.mx-flutter.tag/make-fx (new ~fx-type#)
            ~(first vargs#)
            {}
            ~(when-let [kids# (seq (nthrest vargs# 1))]
               `(tiltontec.model.core/cFkids ~@kids#)))))))


