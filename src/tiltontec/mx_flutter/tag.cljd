(ns tiltontec.mx-flutter.tag
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.cell.base :refer [mx-type minfo cinfo unbound Model PObserver observe md-ref?] :as cty]
            [tiltontec.cell.core
             :refer [cF cF+ c-reset-next! cFonce cFn cI c-reset! make-cell make-c-formula]]
            [tiltontec.util.core :as util
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]))

(deftype MXFXAsIs [value]
  ;; tells fx-resolve to leave mx value untouched
  ;; used originally so a FX callback (the builder for AnimatedBuilder) was not
  ;; treated as callback to MX to get the resolved value.
  :extends cty/MXImplementer)

(deftype MXFXCallback [value]
  ;; tells fx-resolve to call the mx value as a function of ctx and me.
  ;; used where app needs to see the Flutter context to decide a value
  :extends cty/MXImplementer)

(defn fx-resolve
  ([me ctx widget-value]
   (fx-resolve :anon me ctx widget-value))
  ([slot me ctx widget-value]
   (dp :resolving slot (minfo me) widget-value)
   (cond
     (nil? widget-value)
     (do
       ;(dp :exwid-sees-nil-widget-value!!!!!!!!!! slot (minfo me))
       nil)

     (dart/is? widget-value tag/MXFXAsIs)
     (do
       ;(dp :fx-reseolve-as-ising!!!!!!!!! slot (minfo me) widget-value)
       (.-value ^tag/MXFXAsIs widget-value))

     (dart/is? widget-value tag/MXFXCallback)
     (do
       ;;(dp :fx-reso-calling-back!!!!!!! slot (minfo me) widget-value)
       (let [cb-val (.-value ^tag/MXFXCallback widget-value)]
         ;;(dp :mxfxcallbackyields cb-val)
         (recur slot me ctx cb-val)))

     (dart/is? widget-value m/Widget)
     (do
       ;;(dp :widget-value-is-widget widget-value)
       widget-value)

     (fn? widget-value)
     (do                                                    ;; (dp :ew-sees-fn widget-value)
       ;;(dp :fxres-calling-fn?-blind widget-value)
       (let [v (widget-value me ctx)]
         ;;(dp :recuring-unwrapped-fn?-return-val v)
         (recur slot me ctx v)))

     (cty/md-ref? widget-value)
     (do                                                    ;;(dp :rfxing-md (minfo widget-value))
       (let [fx (render-fx ctx widget-value)]
         ;;(dp :rfxing-yielded-flutter fx)
         fx))

     :default (do #_(dp :resolve-fall-thru-used slot (minfo me) widget-value
                      (when (atom? widget-value)
                        (deref widget-value)))
                widget-value))))


(defn ctx-page-push [ctx fx-page-def]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.push (-> ctx m.Navigator/of)
    (#/(m/MaterialPageRoute Object)
      :builder (fn [_]
                 (render-fx ctx fx-page-def)))))

(defn ctx-page-pop [ctx]
  ;; fx-page-def will be a def (NOT defn) like (def (fx/scaffold....
  (.pop (-> ctx m.Navigator/of)))

(defn render-fx [ctx fx]
  ;; todo reverse params? awkward for many calls where fx is complex
  (dpx :rfx-entry ctx (cty/minfo fx))
  (cond
    (not (md-ref? fx))
    (do
      (dp :rnfx-sees-not-md-ref?-passing-thru fx)
      fx)
    :else (let [gen (mget fx :fx-gen)]
            (assert gen "OBAD: render-fx of model finds no fx-gen: ")
            (gen fx ctx))))

(defmacro with-ctx-cb [[me-var ctx-var] & body]
  `(tiltontec.mx-flutter.tag/MXFXCallback
     (fn [~me-var ~ctx-var]
       ~@body)))

(defn fx-state-nearest [me]
  (when me
    (or ^State? (mget me :fx$state)
      (fx-state-nearest (md/mpar)))))

(defmacro when-my-state [[state-var] & body]
  `(when-let [~state-var (tiltontec.mx-flutter.corex/my-state)]
     ~@body))








