(ns tiltontec.example.counter
  (:require
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cF_ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column]]
    ["package:flutter/widgets.dart" :as w
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

;; todo excess prop
; flutter: :DPR - 0 -  - :NOT-settingstate - :cells-flushed - ([:floatingActionButton 1]) - [nil Instance of 'FXScaffold']
; flutter: :DPR - 0 -  - :NOT-settingstate - :fx-prop-keys - (:floatingActionButton :appBar) - [nil Instance of 'FXScaffold']

(defn make-app []
  (material-app
    {:title "Welcome to mxFlutter World"
     :theme (ThemeData :primarySwatch Colors/blue)}
    (dp :building-app-kids)
    (scaffold
      {:appBar
       (fx/app-bar {:title (cF (dp :appbar-title-recomputes)
                             (m/Text (str "Counter rnd=" (rand-int 1000)
                                       " ctr=" (mget (md/fm* :z-counter) :value))))})
       #_(cF (dp :rebuilding-appbar)
           (AppBar :title (Text (str "mxFlutter Home Page " (rand-int 1000)
                                  " ctr=" (mget (md/fm* :z-counter) :value)))))
       :floatingActionButton (cF (dp :rebuilding-action-button)
                               (FloatingActionButton
                                 :onPressed (fn ^void []
                                              (md/mswap! (md/fm* :z-counter) :value inc))
                                 :tooltip "Increment"
                                 :child (Icon Icons/add :color Colors/black)))}
      (center
        (fx/column
          {:mainAxisAlignment MainAxisAlignment/center}
          (fx/text {:style (TextStyle
                             :color Colors/black
                             :fontSize 18.0)}
            "You clicked the button this many times:")
          ;; take2
          (md/make
            :name :z-counter
            :mx-type (new fx/FXText)

            ;; ^^^ needed to get observe call; can we lose that?

            :value (cI 0)
            :style (fn [ctx me]
                     (.headline4 (.textTheme (Theme/of ctx))))
            :kids (cFkids
                    (str (md/my-val)))
            :fx-gen second(fn [ctx me]
                      (reify :extends m/StatefulWidget
                        (createState [this]
                          (util/rmap-meta-setf [:state-ref me]
                            (reify :extends w/State
                              (build [this ctx]

                                ;; problem is Text is stateless, so we cannot extend Text and use #/(State Text)

                                (m/Text (first (md/md-kids me))
                                  :style ((mget me :style) ctx me)))))))))
          #_(fx/text
              {:style
               #_;; a reactive version tracking another property
                       (cF (TextStyle.
                             :color m.Colors/green
                             :fontSize (+ 24.0 (* 2 (md/my-val)))))

               ;; a version that needs the runtime context, done as a callback (experiemental)
               (fn [me ctx]
                 (.headline4 (.textTheme (Theme/of ctx))))
               ;; or comment out the above entirely and supply a custom builder
               #_#_:beefer (fn [me ctx]
                             (Text (str (md/my-val))
                               :style (.headline4 (.textTheme (Theme/of ctx)))))
               }
              {:name  :z-counter
               :value (cI 0)}
              (str (md/my-val)))

          #_(fx/text {}
              {:value (cF (* 2 (md/fmuval :z-counter)))}
              (str "Button click times two = " (md/my-val))))))))




