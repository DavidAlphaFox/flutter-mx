(ns tiltontec.example.counter
  (:require
    [clojure.string :as string]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx material-app center text scaffold column]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defn make-app []
  (fx/material-app {:name :mat-app}
    {:title "Welcome to mxFlutter World"
     :theme (cF (ThemeData. :primarySwatch m.Colors/blue))}
    (fx/scaffold {:name :scaff}
      {:appBar               (AppBar.
                               :title (Text. "mxFlutter  Home Page"))
       :floatingActionButton (cF (FloatingActionButton.
                                   :onPressed (fn ^void []
                                                ;; todo ugh. navigation.
                                                ;; todo inside is necessary because me is the scaffold
                                                (let [zc (md/fm-navig :z-counter me
                                                           :me? false
                                                           :inside? true :must? true :up? true)]
                                                  (md/mswap! zc :z-count inc)
                                                  nil))
                                   :tooltip "Increment"
                                   :child (Icon. Icons/add :color Colors/black)))}
      (fx/center {:name :center-widget} {}
        (fx/column {:name :ctr-column}
          {:mainAxisAlignment MainAxisAlignment/center}
          (fx/text {:name :you-have} {:style (TextStyle.
                                               :color m.Colors/black
                                               :fontSize 18.0)}
            "You have clicked the button so many times:")
          (fx/text {:name    :z-counter
                    :z-count (cI 0
                               :obs (fn-obs
                                      (when-let [^State state (:state-ref (meta me))]
                                        (.setState state (fn [] (do))))))}
            ;; a custom builder is the best I can think of to make the Dart context
            ;; available to someone coding a Matrix widget
            {:builder (fn [me ctx]
                        (Text. (str (mget me :z-count))
                          :style (.headline4 (.textTheme (Theme/of ctx)))))}
            (str (mget me :z-count)))
          (fx/text
            {:name :z-counter-x4
             :value (cF+ [:obs (fn-obs
                                 (when-let [^State state (:state-ref (meta me))]
                                   (.setState state (fn [] (do)))))]
                      (* 2 (md/fmuv :value :z-counter-x2)))}
            {}
            (str "Button click times eight = " (mget me :value)))
          (fx/text
            {:name :z-counter-x2
             :value (cF+ [:obs (fn-obs
                                 (when-let [^State state (:state-ref (meta me))]
                                   (.setState state (fn [] (do)))))]
                      (* 2 (md/fmuv :z-count :z-counter)))}
            {}
            (str "Button click times eight = " (mget me :value))))))))

