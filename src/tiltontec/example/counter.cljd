(ns tiltontec.example.counter
  (:require
    [clojure.string :as string]
    [tiltontec.cell.base :refer [ia-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx MaterialApp Center TTText]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [any-ref? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defn make-app []
  (fx/MaterialApp {:name :mat-app}
    {:title "Welcome to mxFlutter World"
     :theme (cF (ThemeData. :primarySwatch m.Colors/blue))}
    (fx/Scaffold {:name :scaff}
      {:appBar               (AppBar.
                               :title (Text. "mxFlutter  Home Page"))
       :floatingActionButton (cF (FloatingActionButton.
                                   :onPressed (fn ^void []
                                                ;; todo ugh. navigation.
                                                ;; todo inside is necessary because me is the scaffold
                                                (let [zc (md/fm-navig :z-counter me
                                                           :me? false
                                                           :inside? true :must? true :up? true)]
                                                  (md/mswap! zc :z-count inc)
                                                  nil))
                                   :tooltip "Increment"
                                   :child (Icon. Icons/add :color Colors/black)))}
      (fx/Center {:name :center-widget} {}
        (fx/Column {:name :ctr-column}
          {:mainAxisAlignment MainAxisAlignment/center}
          (fx/Text {:name :you-have} {:style (TextStyle.
                                :color m.Colors/black
                                :fontSize 18.0)}
            "You have clicked the button so many times:")
          (fx/Text {:name    :z-counter
                    :z-count (cI 0
                               :obs (fn-obs
                                      (when-let [^State state (:state-ref (meta me))]
                                        (.setState state (fn [] (do))))))}
            ;; a custom builder is the best I can think of to make the Dart context
            ;; available to someone coding a Matrix widget
            {:builder (fn [me ctx]
                        (Text. (str (mget me :z-count))
                          :style (.headline4 (.textTheme (Theme/of ctx)))))}
            (str (mget me :z-count)))
          (tiltontec.model.core/make :type ::Text
            :name :z-counter-x2
            :zx2 (cF+ [:obs (fn-obs
                              (prn :zx2-observes-!!-old-new old new (meta me))
                              (when-let [^State state (:state-ref (meta me))]
                                (.setState state (fn [] (do)))))]
                   (let [zc (md/fmuv :z-count :z-counter)]
                     (* 2 zc)))
            ;; todo when we get to multi-kids, use keys to make efficient since we do not manipulate DOM
            :kids (md/cFkids
                    (str "Button click times two = " (mget me :zx2)))
            :fx-gen (fn [fx]
                      (do
                        (prn :zx2-fx-gen-entry)
                        (let [rfy (reify :extends StatefulWidget
                                    (createState [this]
                                      (util/rmap-meta-setf [:state-ref fx]
                                        (reify :extends State
                                          (build [this ctx]
                                            (prn :zx2-build)
                                            (Text. (first (md-kids fx))
                                              :style (mget fx :style)))))))]
                          (prn :zx2-fx-gen-exit)
                          rfy)))))))))

