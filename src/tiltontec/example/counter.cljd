(ns tiltontec.example.counter
  (:require
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cF_ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column]]
    [tiltontec.mx-flutter.tag :as tag
     :refer [with-ctx]]
    ["package:flutter/widgets.dart" :as w
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defmacro text-ful [fx-props mx-props & children]
  `(apply tiltontec.model.core/make
     :kids (tiltontec.model.core/cFkids ~@children)
     :fx-gen (fn [ctx me]
               (reify :extends m/StatefulWidget
                 (~'createState [_#]
                   (util/rmap-meta-setf [:state-ref me]
                     (reify :extends w/State
                       (~'build [_# ctx]
                         (w/Text (first (md/md-kids me))
                           ~@(let [kvs (for [[k# _#] fx-props]
                                         [k# `(tiltontec.mx-flutter.tag/fx-eval ctx me
                                                (tiltontec.model.core/mget me ~k#))])]
                               (apply concat kvs)))))))))
     (concat
       (vec (apply concat (seq ~fx-props)))
       (vec (apply concat (seq ~mx-props))))))

(defn make-app []
  (material-app
    {:title "Welcome to mxFlutter World"
     :theme (ThemeData :primarySwatch Colors/blue)}

    (scaffold
      {:appBar
       (fx/app-bar {:title (cF (dp :appbar-title-recomputes)
                             (m/Text (str "Counter rnd=" (rand-int 1000)
                                       " ctr=" (mget (md/fm* :z-counter) :value))))})

       :floatingActionButton (cF (dp :rebuilding-action-button)
                               (FloatingActionButton
                                 :onPressed (fn ^void []
                                              (md/mswap! (md/fm* :z-counter) :value inc))
                                 :tooltip "Increment"
                                 :child (Icon Icons/add :color Colors/black)))}
      (center
        (fx/column
          {:mainAxisAlignment MainAxisAlignment/center}
          (fx/textless {:style (TextStyle
                                 :color Colors/black
                                 :fontSize 18.0)}
            "You clicked the button so many times:")

          (text-ful
            {:style #_ (TextStyle
                      :color Colors/black
                      :fontSize 18.0)
                     #_ (fn [ctx me]
                       (.headline4 (.textTheme (Theme/of ctx))))
             (with-ctx (ctx-2 me)
               (.headline4 (.textTheme (Theme/of ctx-2))))}
            {:name  :z-counter
             :value (cI 0)}
            (str (md/my-val))))))))


#_(fx/text
    {:style
     #_;; a reactive version tracking another property
             (cF (TextStyle.
                   :color m.Colors/green
                   :fontSize (+ 24.0 (* 2 (md/my-val)))))

     ;; a version that needs the runtime context, done as a callback (experiemental)
     (fn [me ctx]
       (.headline4 (.textTheme (Theme/of ctx))))
     ;; or comment out the above entirely and supply a custom builder
     #_#_:beefer (fn [me ctx]
                   (Text (str (md/my-val))
                     :style (.headline4 (.textTheme (Theme/of ctx)))))
     }
    {:name  :z-counter
     :value (cI 0)}
    (str (md/my-val)))

#_(fx/text {}
    {:value (cF (* 2 (md/fmuval :z-counter)))}
    (str "Button click times two = " (md/my-val)))