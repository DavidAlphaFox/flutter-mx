(ns tiltontec.example.x020-reactive-stream
  (:require
    ["dart:async" :as async]
    [clojure.string :as str]
    [tiltontec.matrix.util :refer [rmap-set!]]
    [tiltontec.cell.base :refer [cinfo ]]
    [tiltontec.cell.core :refer [cF cF+ cF+n cF_ cI]]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.model.peek :refer [minfo mref?]]
    [tiltontec.model.core :refer [mget mset! mswap! fm* fmu] :as md]
    [tiltontec.matrix.api :as mx]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.matrix.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo ] :as cty]))

;;; n.b. The astute reader may realize that our use here of the Dart stream could be replaced with a Cell dependency.
;;; That is true. We just want to demonstrate how an _external_ stream can be woven into MX dataflow.

(def the-second-coming
  ;; with apologies to William Butler Yeats, we need a duplicate word sequence to make a point
  (str/split (str "Turning Turning in the widening gyre"
               " The falcon cannot hear the falconer;"
               " Things fall apart; the centre cannot hold;"
               " Mere anarchy is loosed upon the world.") #" "))

(defn the-string [s]
  (when (string? s) s))

(defn make-app []
  (fx/material-app
    {:title "Flutter/MX Stream Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    (fx/scaffold
      {:appBar (fx/app-bar
                 {:title (m/Text "Reactive Streams Demo")})
       :floatingActionButton
       (cF (fx/floating-action-button
             {:onPressed (as-dart-callback []
                           (mswap! me :offset #(if % (inc %) 0)))
              :tooltip   "Send next word of message, looping at end"}
             {:name       :msg-sender
              :offset     (cI nil)
              :next-word  (cF+ [:ephemeral? true
                                :watch (fn [_ me new-word _ _]
                                         (when new-word
                                           (.add (.-sink ^async/StreamController
                                                   ;;^#/(async/StreamController String)
                                                   (mget me :msg-stream))
                                             new-word)))]
                            (when-let [offset (mget me :offset)]
                              (nth the-second-coming (mod offset (count the-second-coming)))))
              :msg-stream (async.StreamController/broadcast) #_ (new #/(async/StreamController String))}
             (m/Icon m.Icons/chat .color
               (if (mget me :offset)
                 m.Colors/white
                 m.Colors/yellow))))}
      (fx/center
        (fx/column
          {:mainAxisAlignment m.MainAxisAlignment/center}
          (fx/text {:style (p/TextStyle .color m.Colors/black
                             .fontSize 36.0)}
            (str "Message " (or (mget (fmu :msg-recipient) :msg-ct) "not") " received:"))

          (fx/check-box
            {:value     (cI true :watch (fn [_ me newv _ _]
                                          (dp :listening-now newv)))
             :shape     (fx/rounded-rectangle-border
                          {:borderRadius (m.BorderRadius/all (m.Radius/circular 20.0))})
             :onChanged (cF (as-dart-callback [value]
                              (mswap! me :value not)))}
            {:name :listening})

          (fx/column {:mainAxisAlignment m.MainAxisAlignment/center}
            (let [listening? (mget (fmu :listening) :value)]
              (when listening?
                (fx/text
                  {:style (fx/in-my-context [me ctx]
                            (.-headline3 (.-textTheme (m.Theme/of ctx))))}
                  {:name     :msg-recipient
                   :msg-rcvd (cF+n [:ephemeral? true
                                    :on-quiesce (fn [cell]
                                                  (when-let [sub (:subscription @cell)]
                                                    (.cancel ^#/(async/StreamSubscription void) sub)))
                                    :watch (fn [_ me new-source old-source cell]
                                             (when (= old-source mx/unbound)
                                               (let [sub (.listen (.-stream ^async/StreamController new-source)
                                                           (fn [^String msg]
                                                             (mset! me :msg-rcvd msg)))]
                                                 (rmap-set! [:subscription cell] sub))))]
                               (mget (fm* :msg-sender) :msg-stream))
                   :msg-ct   (cF (when-let [msg (the-string (mget me :msg-rcvd))]
                                   (when-not (or (str/blank? msg)
                                               (= msg "<none>"))
                                     (if _cache (inc _cache) 1))))}
                  (or (the-string (mget me :msg-rcvd))
                    "RSN")))))

          (fx/text {:style (p/TextStyle .color m.Colors/blue
                             .fontSize 18.0)}
            {:full-text (cF (if (mget (fmu :listening) :value)
                              (conj
                                (if (= _cache cty/unbound) [] _cache)
                                (the-string (mget (fmu :msg-recipient) :msg-rcvd)))
                              _cache))}
            (str/join " " (remove #{"<none>"} (mget me :full-text)))))))))