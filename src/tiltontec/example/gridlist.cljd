(ns tiltontec.example.gridlist
  "Faithful port of https://docs.flutter.dev/cookbook/lists/grid-lists"
  (:require
    [tiltontec.util.base
     :refer [trx wtrx dprn dp dpx nowtrx prog1 dprn dp dpx *trx?* *trdeep* def-rmap-slots]]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.model.core :refer [mget]]
    [tiltontec.mx-flutter.core :as fx
     :refer [builder center column elevated-button expanded grid-view-count material-app row scaffold text]]
    [tiltontec.util.core :as util]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment Colors Theme Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]))

(defn make-app []
  (let [title "Grid List"]
    (material-app
      {:title title}
      (scaffold
        ; we want a matrix incarnation of the AppBar so we have the power of MX if needed.
        ; In this case, we also need to emit a PreferredSizeWidget for the Scaffold appbar.
        ; The current scheme works because we just go with StatefulWidget and State for
        ; all MX-FX proxies, so there is no need to reify the intended specific widget -- we
        ; do that in the build function.
        ;
        ; But Scaffold wants a PSW in the appBar property.
        ;
        {:appBar (fx/app-bar {:title (m/Text "fx gen override wow 0")}
                   {:fx-gen (fn [me]
                              (reify :extends m/AppBar
                                (createState [this]
                                  (util/rmap-meta-setf [:state-ref me]
                                    (reify :extends #/(w/State m/AppBar)
                                      (build [this ctx]
                                        (if-let [bldr (mget me :builder)]
                                          (bldr me ctx)
                                          (do ;;(dp :builder (builder (FXAppBar)))
                                              (m/AppBar :title (m/Text "fake title")))
                                          #_
                                          (let [type-builder ((builder FXAppBar) me)]
                                            (assert type-builder (str "No type builder for FX type " (mx-type me)))
                                            (type-builder me ctx))))
                                      (^void initState [this]
                                          (.initState ^super this)
                                          (when-let [init (mget me :initState)]
                                            (init this me)))
                                      (^void dispose [this]
                                        (when-let [orride (mget me :dispose)]
                                          (orride this me))
                                        (.dispose ^super this)))))))})}
        (fx/center (fx/text "hi mom"))
        #_(grid-view-count
            {:crossAxisCount 2}
            (mapv
              (fn [i] (center
                        (text
                          {:style (fn [me ctx]
                                    (-> (Theme/of ctx) .textTheme .headline3))}
                          (str "Item " i))))
              (range 100)))))))