(ns tiltontec.example.gridlist
  "Faithful port of https://docs.flutter.dev/cookbook/lists/grid-lists"
  (:require
    [tiltontec.util.base
     :refer [trx wtrx dprn dp dpx nowtrx prog1 dprn dp dpx *trx?* *trdeep* def-rmap-slots]]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.model.core :refer [mget]]
    [tiltontec.mx-flutter.core :as fx
     :refer [center column elevated-button expanded grid-view-count material-app row scaffold text]]
    [tiltontec.util.core :as util]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment Colors Theme Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]))

(defn make-app []
  (let [title "Grid List"]
    (material-app
      {:title title}
      (scaffold
        ; we want a matrix incarnation of the AppBar so we have the power of MX if needed.
        ; In this case, we also need to emit a PreferredSizeWidget for the Scaffold appbar.
        ; The current scheme works because we just go with StatefulWidget and State for
        ; all MX-FX proxies, so there is no need to reify the intended specific widget -- we
        ; do that in the build function.
        ;
        ; But Scaffold wants a PSW in the appBar property.
        ;
        {:appBar (fx/app-bar {:title (m/Text "fx gen override wow 0")}
                   {:fx-gen (fn [me]
                             (prn :yep-fx-gen-new!!!!!!!!!!!!!!!!!!!!!!)
                             (let [ab (reify :extends m/AppBar
                               (createState [this]
                                 (util/rmap-meta-setf [:state-ref me]
                                   (reify :extends #/(w/State m/AppBar)
                                     (build [this ctx]
                                       (m/AppBar :title (mget me :title)))
                                     #_ (^void initState [this]
                                          (.initState ^super this)
                                          (when-let [init (mget me :initState)]
                                            (init this me)))
                                     (^void dispose [this]
                                       (when-let [orride (mget me :dispose)]
                                         (orride this me))
                                       (.dispose ^super this))))))]
                               (dp :new-abar ab)
                               ab))})
         #_ (reify :extends m/AppBar
                   (createState [this]
                     (util/rmap-meta-setf [:state-ref me]
                       (reify :extends #/(w/State m/AppBar)
                         (build [this ctx]
                           (m/AppBar :title (m/Text "bs wow 0")))
                         #_ (^void initState [this]
                           (.initState ^super this)
                           (when-let [init (mget me :initState)]
                             (init this me)))
                          (^void dispose [this]
                           (when-let [orride (mget me :dispose)]
                             (orride this me))
                           (.dispose ^super this))))))
         #_(fx/app-bar :title (m/Text title))
         #_ (m/AppBar :title (m/Text title))}
        (fx/center (fx/text "hi mom"))
        #_
        (grid-view-count
          {:crossAxisCount 2}
          (mapv
            (fn [i] (center
                      (text
                        {:style (fn [me ctx]
                                  (-> (Theme/of ctx) .textTheme .headline3))}
                        (str "Item " i))))
            (range 100)))))))