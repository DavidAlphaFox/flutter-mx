(ns tiltontec.example.two-counters
  (:require
    [clojure.string :as str]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :as cell :refer [cF cFnil cI]]
    [tiltontec.model.base :refer [md-cell]]
    [tiltontec.model.core :refer [make mx-par mget md-kids cFkids fmu fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text row expanded elevated-button scaffold column]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment Colors Theme Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]))

(defn- build-counter [counter-key]
  #_(text (str "+" (name counter-key)))
  (expanded
    (fx/column
      {:mainAxisAlignment MainAxisAlignment/center}
      {:name  :ctr-col
       ;; The column maintains its own state, aka "in-place state".
       ;; We find it useful to give every widget a "value" property for holding the primary value of a widget
       :value (cI 0)}
      (text (str/capitalize (name counter-key)))
      (text {:style (fn [me ctx]
                      ;; we hacked the text widget a bit to look for callback functions on "style"
                      ;; so a style formula can tap the runtime context.
                      (-> (Theme/of ctx) .textTheme .displayLarge))}
        (str (md/fmuval :ctr-col)))
      (elevated-button
        {:onPressed (cF (fn ^void [me ctx]
                          ;; no reason we produce the handler in a Cell formula; just a demo that we can
                          (md/mswap! (md/fmu :ctr-col) :value inc)))}
        (text "+")))))

(defn make-app []
  (material-app {:title "Two Counters (MX)"
                 :theme (cF (ThemeData :primarySwatch Colors/blue))}
    (scaffold
      {:appBar (AppBar :title (Text "Two Counters (MX)"))}
      (center
        (row
          {:mainAxisAlignment MainAxisAlignment/center}
          (mapv #(build-counter %)
            [:left :right]))))))