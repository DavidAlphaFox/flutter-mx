(ns tiltontec.example.two-counters
  (:require
    [tiltontec.cell.base :as cty]
    [tiltontec.cell.core :as cell :refer [cF cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmu fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx material-app center text row expanded elevated-button text-ex scaffold column]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment Colors Theme Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]))

(defn my-flux [me]
  (mget (md/fm* :counter-app) :flux-store))

(defn my-counters [me]
  (mget (my-flux me) :counters))

(defn make-app []
  (material-app {:name       :counter-app
                 ; simulating a separate store, we bind a purely independent Matrix data structure that
                 ; must be consulted for values.
                 ;
                 ; The alternative would be a simple mutable input (cI) property:
                 ;   :flux (cI {:counters (cI {:left 0 :right 0})})
                 ;
                 :flux-store (cI {:counters {:left 0 :right 0}})
                 }
    {:title "Two Counters"
     :theme (cF (ThemeData :primarySwatch Colors/blue))}
    (scaffold {}
      {:appBar (AppBar :title (Text "Two Counters"))}
      (center {} {}
        (row {}
          {:mainAxisAlignment MainAxisAlignment/center}
          (mapv (fn [counter-key]
                  (expanded {} {}
                    (column {:name  :counter-col
                             :value (cF (let [app (md/fm-navig (fn [me] (= :counter-app (mget me :name)))
                                                    me :me? false :up? true :inside? false :wocd? true)]
                                          (dart:core/print (str "ctr col got app!!! " app))
                                          (get-in (mget app :flux) [:counters counter-key])))}
                      {:mainAxisAlignment MainAxisAlignment/center}
                      (text {} {} (str counter-key))
                      (text {}
                        {:style (cF (TextStyle
                                      :color Colors/green
                                      :fontSize 48.0))}
                        (str (md/fmuval :counter-col)))
                      (elevated-button {}
                        {:onPressed (cF (fn ^void []
                                          (md/mswap! (my-flux me) :counters
                                            update counter-key inc)))}
                        (text {} {} "+")))))
            [:left :right]))))))