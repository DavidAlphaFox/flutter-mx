(ns tiltontec.example.physics-sim
  (:require
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.util.core :as util]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.core :as cell :refer [cF cI]]
    [tiltontec.model.core :refer [make mx-par mget md-kids cFkids fmu fmuv] :as md]
    [tiltontec.mx-flutter.tag :as tag]
    [tiltontec.mx-flutter.core :as fx]
    [tiltontec.mx-flutter.corex :as fxx]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/physics.dart" :as p]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment MediaQuery Colors Theme Icon AnimationController Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle Alignment]]))

(defn logo-recoil [me ctx ^m/Offset px-per-s]
  (let [size (.size (MediaQuery/of ctx))
        controller (fx/my-controller)
        animation ^#/(m/Animation Alignment) (.drive controller
                                               (m/AlignmentTween
                                                 :begin (mget me :dragAlignment)
                                                 :end m.Alignment/center))
        units-per-s (m/Offset (/ (.dx px-per-s) (.width size))
                      (/ (.dy px-per-s) (.height size)))
        unit-velocity (.distance units-per-s)
        spring ^:const (p/SpringDescription
                         :mass 30
                         :stiffness 1
                         :damping 1)
        simulation (p/SpringSimulation spring 0 1 (- unit-velocity))]
    (doto controller
      .clearListeners
      (.addListener #(md/mset! me :dragAlignment (.value animation))) ;; <==== dataflow trigger
      (.animateWith simulation))))

(defn draggable-card [& {:keys [drag-child]}]
  (fx/gesture-detector
    {:dragAlignment (cI m.Alignment/center)} ;; <=====  Our only reactive data point
    {:name        :draggable-card
     :initState   (fn [this me]
                    ;; we use the meta of the proxy where Dart code uses instance vars
                    (util/rmap-meta-setf [:controller me]
                      (m/AnimationController :vsync this)))
     :onPanDown   (fn [me ctx ^m/DragDownDetails details]
                    (when-let [c ^m/AnimationController (:controller (meta me))]
                      (.stop c)))
     :onPanUpdate (fn [me ctx ^m/DragUpdateDetails details]
                    (let [size (.size (MediaQuery/of ctx))]
                      (md/mswap! me :dragAlignment          ;; <============ MX flow triggered
                        #(.+ ^m/Alignment %
                           (m/Alignment
                             (/ (-> details .delta .dx) (/ (.width size) 2))
                             (/ (-> details .delta .dy) (/ (.height size) 2)))))))
     :onPanEnd    (fn [me ctx ^m/DragEndDetails details]
                    (logo-recoil me ctx (-> details .velocity .pixelsPerSecond)))
     :dispose     (fn [this me]
                    (when-let [con (fx/my-controller)]
                      (.dispose con)))}
    (fx/align
      {:alignment (cF (mget (md/fasc :draggable-card) ;; <========== reactive read
                        :dragAlignment))}
      (fx/card drag-child))))

(defn make-app []
  (let [title "Physics Animation"]
    (fx/material-app {:title title}
      (fx/scaffold
        {:appBar (m/AppBar :title (m/Text title))}
        (draggable-card
          :drag-child (fx/flutter-logo {:size 128.0}))))))