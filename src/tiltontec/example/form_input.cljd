(ns tiltontec.example.form-input
  "Faithful port of https://docs.flutter.dev/cookbook/forms/retrieve-input"
  (:require
    [tiltontec.util.base
     :refer [trx wtrx dprn dp dpx nowtrx prog1 dprn dp dpx *trx?* *trdeep* def-rmap-slots]]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cF_ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fasc fmuv] :as md]
    [tiltontec.mx-flutter.tag :refer [builder] :as tag]
    [tiltontec.mx-flutter.core :as fx
     :refer [center column elevated-button expanded grid-view-count material-app row scaffold text]]

    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment Colors Theme Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]))
#_(defn my-custom-form-state [title]
    (f/widget
      :context ctx
      :with [text-controller (m/TextEditingController)]
      (m/Scaffold
        :appBar (m/AppBar :title (m/Text title))
        :body
        (m/Padding. :padding
          ^:const (m.EdgeInsets/all 16.0)
          :child (m/TextField :controller text-controller))
        :floatingActionButton
        (m/FloatingActionButton
          :onPressed (fn []
                       (m/showDialog
                         :context ctx
                         :builder (fn [_] (m/AlertDialog :content (m/Text (.text text-controller))))) nil
                       )
          :tooltip "Show me the value!"
          :child (m/Icon m.Icons/text_fields)))))

(defn my-custom-form-state [title]
  (fx/scaffold
    {:appBar               (m/AppBar :title (m/Text title))
     :floatingActionButton (fx/floating-action-button
                             {:onPressed (cF (fn ^void [me ctx]
                                               ;; no reason we produce the handler in a Cell formula; just a demo that we can
                                               (dp :onpressed!!!!!!!!!!-me (cty/minfo me))
                                               (dp :onpressed!!!!!!!!!!-ctx ctx)
                                               (dp :onpressed!!!!!!!!!!-par (cty/minfo (:par @me)))
                                               (dp :onpressed!!!!!!!!!!-form (cty/minfo (md/fm* :custom-form)))
                                               (dp :onpressed!!!!!!!!!!-contro (mget (md/fm* :custom-form) :text-controller))
                                               (dp :onpp-text!!!!!!! (.text (mget (md/fm* :custom-form) :text-controller)))
                                               #_
                                               (m/showDialog
                                                 :context ctx
                                                 :builder (fn [_]
                                                            (m/AlertDialog
                                                              :content (m/Text (.text (mget me :text-controller))))))
                                               nil))
                              #_(fn ^void []
                                  (dp :form-show-sees-con (mget me :text-controller))
                                  (dp :form-show-sees-text (.text ^m/TextEditingController (mget me :text-controller)))
                                  (dp :form-show-sees-me (cty/minfo me)))
                              :tooltip   "Show me the value!"}
                             (m/Icon m.Icons/text_fields))}
    {:name            :custom-form
     :text-controller (m/TextEditingController)}
    (fx/padding
      {:padding ^:const (m.EdgeInsets/all 16.0)}
      #_(fx/text "hi mom")
      (fx/text-field {:name :test-input}
        {:controller (cF (let [form (fasc :custom-form)
                               _ (dp :form!!!!!! form)
                               con ^m/TextEditingController (mget form :text-controller)
                               _ (dp :con con)]
                           (assert (dart/is? con m/TextEditingController)
                             "not txcon for fx/text-field controller property")
                           (dp :txcon-cool-pulled-for-textfield-controller con)
                           con))}))))

(defn make-app []
  (let [title "Retrieve text input"]
    (fx/material-app {:title title}
      (my-custom-form-state title))))
