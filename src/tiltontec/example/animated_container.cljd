(ns tiltontec.example.animated-container
  (:require
    ["package:flutter/material.dart" :as m]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [minfo] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column list-view-builder]]))

(defn random-to-double [max]
  (-> max rand-int .toDouble))

(defn random-color []
  (m.Color/fromRGBO (rand-int 256)
    (rand-int 256)
    (rand-int 256)
    1))

(defn animated-container []
  (scaffold
    {:appBar               (m/AppBar :title (m/Text "AnimatedContainer Demo"))
     :floatingActionButton (cF (m/FloatingActionButton
                                 :onPressed #(let [anicon (md/fm* :anicon)]
                                               (md/mswap! anicon :config assoc
                                                 :width (random-to-double 300)
                                                 :height (random-to-double 300)
                                                 :color (random-color)
                                                 :borderRadius (m.BorderRadius/circular (random-to-double 100))))
                                 :child (m/Icon. m.Icons/play_arrow)))}

    (fx/center
      (fx/animated-container
        {:width      (cF (:width (mget me :config)))
         :height     (cF (:height (mget me :config)))
         :decoration (cF (let [config (mget me :config)]
                           (m/BoxDecoration
                             :color (:color config)
                             :borderRadius (:borderRadius config))))
         :duration   ^:const (Duration :seconds 1)
         :curve      m.Curves/fastOutSlowIn}
        {:name   :anicon
         :config (cI {:width         50.0
                      :height        50.0
                      :color         m.Colors/green
                      :borderRadius (m.BorderRadius/circular 8.0)})}))))

(defn make-app []
  (material-app
    (animated-container)))