(ns tiltontec.example.animated-container
  (:require
    ["package:flutter/material.dart" :as m]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type minfo unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column list-view-builder]]))

(defn random-to-double [max]
  (-> max rand-int .toDouble))

(defn random-color []
  (m.Color/fromRGBO (rand-int 256)
    (rand-int 256)
    (rand-int 256)
    1))

(defn animated-container []
  (scaffold
    {:appBar               (m/AppBar :title (m/Text "AnimatedContainer Demo"))
     :floatingActionButton (cF (m/FloatingActionButton
                                 :onPressed #(do
                                               (md/mswap! me :config assoc
                                                 :width (random-to-double 300)
                                                 :height (random-to-double 300)
                                                 :color (random-color)
                                                 :border-radius (m.BorderRadius/circular (random-to-double 100))))
                                 :child (m/Icon. m.Icons/play_arrow)))}
    {:config (cI {:width 50.0 :height 50.0 :color m.Colors/green :border-radius (m.BorderRadius/circular 8.0)})}
    (fx/center
      (let [{:keys [width height color border-radius]} (mget (md/mx-par me) :config)]
        (m/AnimatedContainer
          :width width
          :height height
          :decoration (m/BoxDecoration
                        :color color
                        :borderRadius border-radius)
          :duration ^:const (Duration :seconds 1)
          :curve m.Curves/fastOutSlowIn)))))

(defn make-app []
  (material-app
    (animated-container)))