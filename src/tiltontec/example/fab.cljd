(ns tiltontec.example.fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type minfo cinfo unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.tag :refer [*ctx*]]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column list-view+builder my-ctx my-state]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    [tiltontec.util.core :as util :refer [rmap-meta-setf]]
    [tiltontec.cell.observer :refer [fn-obs]]))

(declare fake-item expandable-fad show-action action-button)

(defn make-app []
  (material-app
    {:title                      (str "Expandable Fab/MX " (rand-int 99))
     ;; save this :theme                      (.dark m/ThemeData)
     :debugShowCheckedModeBanner false}
    {:name :mat-app}

    (scaffold {:name :scaff}
      {:appBar               (AppBar :title (Text (str "Expandable Fab/MX " (rand-int 99))))
       :floatingActionButton (expandable-fab
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])
       }
      (list-view+builder {}
        {:padding     (m.EdgeInsets/symmetric :vertical 8.0)
         :itemCount   25
         :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

(declare expanding-action-button
  tap-to-close-fab
  tap-to-open-fab)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or [initial-open? false]}]
  (fx/sized-box+expand
    {:initState (fn [this me]
                  (dp :all-new-fab-initState!)
                  (let [c (util/rmap-meta-setf [:controller me]
                            (m/AnimationController
                              :value (if initial-open? 1.0 0.0)
                              :duration ^:const (dart:core/Duration :milliseconds 250)
                              :vsync this))]
                    (util/rmap-meta-setf [:expand-animation me]
                      (m/CurvedAnimation
                        :curve m.Curves/fastOutSlowIn
                        :reverseCurve m.Curves/easeOutQuad
                        :parent c))))
     :dispose   (fn [this me]
                  (when-let [controller (:controller (meta me))]
                    (.dispose controller)))}
    {:name  :fab
     :step  (cF (/ 90.0 (dec (count actions))))
     :open? (cI initial-open?
              :obs (fn [prop-name me new-value prior-value cell]
                     (when-let [c (:controller (meta me))]  ;; not until first render installation
                       (if new-value
                         (.forward c)
                         (.reverse c)))))}
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (doall (do (dp :rebuilding-actions!!)
                 (map-indexed
                   (fn [i action]
                     (expanding-action-button me
                       :direction-degrees (* i (fmuv :step :fab))
                       :max-distance distance
                       :progress-key :expand-animation
                       :action action))
                   actions)))
      (tap-to-open-fab me))))

(defn expanding-action-button [me & {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation      (cF
                       ;(dp :ani-rule-fab?! @(md/fm* :fab))
                       ;(dp :ani-rule-sees-meta!!!! (meta (md/fm* :fab)))
                       (fn [me ctx]
                         (progress-key (meta (md/fm* :fab)))))
     ;; todo lose "beefer"
     :ani-beefer     (fn [me ctx child]
                       (let [fab (md/fm* :fab)
                             progress ^m/CurvedAnimation (:expand-animation (meta fab))
                             offset (m.Offset/fromDirection
                                      (* direction-degrees (/ math/pi 180.0))
                                      (* (.value progress) max-distance))]
                         (f/widget
                           (f/nest
                             (m/Positioned
                               :right (+ 4.0 (.dx offset))
                               :bottom (+ 4.0 (.dy offset)))
                             (m.Transform/rotate
                               :angle (* (- 1.0 (.value progress))
                                        math/pi 0.5))
                             child))))
     :animated-child (fn [me ctx]
                       (action-button
                         :icon (:icon action)
                         :onPressed (fn ^void []
                                      ;; todo roll up into (with-context (ctx) ....)
                                      (let [^State state (:state-ref (meta me))]
                                        (assert state)
                                        (assert (.context state))
                                        (show-action (.context state) action))
                                      nil))
                       ;; todo fade transition
                       #_(let [fab (md/fm* :fab)]
                           (dp :fab??????????????? (minfo fab))
                           ))}
    #_(fx/fade-transition
        {:opacity (fn [me ctx]
                    ;; we cannot fm* :fab because we are not a true child
                    ;; todo  consider this in the dispose or not-to-be
                    (assert fab "opacity does not see fab")
                    (let [xani (:expand-animation (meta fab))]
                      (assert xani "opacity cannot get expand ani from meta")
                      xani))}
        (action-button
          :icon (:icon action)
          :onPressed (fn ^void []
                       (show-action ctx action)
                       nil)))))


(defn show-action [ctx action]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (m/AlertDialog
                 :content (m/Text (:title action))
                 :actions [(m/TextButton
                             :onPressed #(-> ctx m.Navigator/of .pop)
                             :child ^:const (m/Text "CLOSE"))]))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape        ^:const (m/CircleBorder)
                :clipBehavior m.Clip/antiAlias
                :color        (fn [me ctx]
                                (-> (Theme/of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     (fn [me ctx]
                    (-> (Theme/of ctx) .-colorScheme .-onSecondary))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    (fx/center
      (fx/material {:shape        ^:const (m/CircleBorder)
                    :clipBehavior m.Clip/antiAlias
                    :elevation    4.0}
        (fx/ink-well {:onTap #(md/mswap! (md/fasc :fab par) :open? not)}
          (fx/padding {:padding ^:const (m.EdgeInsets/all 8.0)}
            (fx/icon {:icon  m.Icons/close
                      :color (fn [me ctx]
                               (dp :callled!!!! (.primaryColor (Theme/of ctx)))
                               ;; fyi, this goes not work well in dark mode: bkg goes black like icon, almost
                               (.primaryColor (Theme/of ctx)))})))))))

(defn- tap-to-open-fab [par]
  ;; version from std fab sample to show Non-MX components are welcome at leaves of MX components
  (f/nest
    (m/IgnorePointer :ignoring (boolean (mget (md/fasc :fab par) :open?)))
    (m/AnimatedContainer
      :transformAlignment m.Alignment/center
      :transform (let [open? (mget (md/fasc :fab par) :open?)]
                   (m.Matrix4/diagonal3Values
                     (if open? 0.7 1.0)
                     (if open? 0.7 1.0)
                     1.0))
      :duration ^:const (dart:core/Duration :milliseconds 250)
      :curve ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut))
    (m/AnimatedOpacity
      :opacity (if (mget (md/fasc :fab par) :open?) 0.0 1.0)
      :curve ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
      :duration ^:const (dart:core/Duration :milliseconds 250))
    (m/FloatingActionButton :onPressed #(md/mswap! (md/fasc :fab par) :open? not))
    (m/Icon m.Icons/create)))

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 Colors/grey))))
