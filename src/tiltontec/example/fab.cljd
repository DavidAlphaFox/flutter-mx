(ns tiltontec.example.fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type minfo cinfo unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column list-view-builder]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(declare fake-item)


(def action-titles ["Create Post" "Upload Photo" "Upload Video"])

(defn show-action [ctx action]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (m/AlertDialog
                 :content (m/Text (:title action))
                 :actions [(m/TextButton
                             :onPressed #(-> ctx m.Navigator/of .pop)
                             :child ^:const (m/Text "CLOSE"))]))))

(defn action-button [& {:keys [on-pressed icon]}]
  ;; todo this needs to pick up color from ctx Theme
  (m/Material
    :shape ^:const (m/CircleBorder)
    :clipBehavior m.Clip/antiAlias
    ;; todo get colors from Ctx and then Theme
    :color Colors/blue
    :elevation 4.0
    :child (m/IconButton
             :onPressed on-pressed
             ; const Icon(Icons.volume_up)
             :icon (m/Icon. m.Icons/play_arrow) ;; Icons/format_size ;; todo icon
             :color Colors/blue)))

;;;
;;; --- the app -----------------------------------------------
;;;
(declare expandable-fab)

(defn make-app []
  (material-app
    {:title                      "Welcome to mxFlutter World"
     :debugShowCheckedModeBanner false}
    {:name :mat-app}

    (scaffold {:name :scaff}
      {:appBar               (AppBar
                               :title (Text "Expandable Fab"))
       :floatingActionButton (expandable-fab
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])
       }
      (list-view-builder {}
        {:padding     (m.EdgeInsets/symmetric :vertical 8.0)
         :itemCount   25
         :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

(declare expanding-action-button)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or [initial-open? false]}]
  (dp :efab-entry initial-open? distance actions)
  (fx/sized-box-expand
    {:initState (fn [this me]
                  (dp :Bam-hello-initstate!!!!!!! (minfo me))
                  (let [c (util/rmap-meta-setf [:controller me]
                            (m/AnimationController
                              :value (if initial-open? 1.0 0.0)
                              :duration ^:const (dart:core/Duration :milliseconds 250)
                              :vsync this))]
                    (util/rmap-meta-setf [:expand-animation me]
                      (m/CurvedAnimation
                        :curve m.Curves/fastOutSlowIn
                        :reverseCurve m.Curves/easeOutQuad
                        :parent c))))}
    {:name  :fab
     :open? initial-open?
     :step (cF (/ 90.0 (dec (count actions))))}
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      ;; (_build-tap-to-close)
      ;; Matrix always flattens childrens (and discards nils)
      (-> [] ;;; [tap-to-close-fab]
        (into (map-indexed
                (fn [i action]
                  (let [fab (md/fasc :fab)]
                    (assert fab (str "action did not find fab calling fasc on " (cty/minfo me)))
                    (dp :mapi i action (mget fab :step))
                    (expanding-action-button
                      :direction-degrees (* i (mget fab :step))
                      :max-distance distance
                      :progress-key :expand-animation
                      :action action))))
          actions)
        #_ (conj tap-to-open-fab))
      #_ (_build-tap-to-close))))

;;; expanding action  item

(defn expanding-action-button [& {:keys [action direction-degrees max-distance progress-key]}]
  (dp :expactbutt action direction-degrees max-distance  progress-key)
  (fx/animated-builder
    {:animation (fn [me ctx]
                  (dp :eab-ani-callback (minfo me))
                  (let [fab (md/fm* :fab)]
                    (assert fab "eabutton animation does not see fab")
                    (let [xani (progress-key (meta fab))]
                      (assert xani "cannot get expand ani from meta")
                      xani)))
    :builder (fn [me ctx] ;; s/b child
               (dp :eab-builder-cb (minfo me))
               (let [fab (md/fm* :fab)
                     _ (dp :fab??????????????? (minfo fab))
                     _ (assert fab "eabutton builder does not see fab")
                     _ (dp :fab-meta (meta fab))
                     progress (let [xani ^m/CurvedAnimation (:expand-animation (meta fab))]
                                (assert xani "cannot get expand ani from meta")
                                xani)
                     _ (dp :progress!!!!!!!!! progress)
                     _ (dp :progress!!!!!!!!! direction-degrees (.value progress) max-distance)
                     offset (m.Offset/fromDirection
                              (* direction-degrees (/ math/pi 180.0))
                              (* (.value progress) max-distance))]
                 (dp :eabam!!!!!!!!!! fab progress offset)
                 ;; todo convert to MX
                 (f/widget
                   (f/nest
                     (m/Positioned
                       :right (+ 4.0 (.dx offset))
                       :bottom (+ 4.0 (.dy offset)))
                     (m.Transform/rotate
                       :angle (* (- 1.0 (.value progress))
                                math/pi 0.5))
                     (m/Text "TODO")))))}
    (fx/text "hi mom") ;; HHHHACK!!!!!!!!!!!!!!!!!!!!!!!
    #_
    (fx/fade-transition
      {:opacity (fn [me ctx]
                  (let [fab (md/fm* :fab)]
                    (assert fab "opacity does not see fab")
                    (let [xani (:expand-animation (meta fab))]
                      (assert xani "opacity cannot get expand ani from meta")
                      xani)))}
      (action-button
        :icon (:icon action)
        :onPressed (fn ^void [me ctx]
                     (show-action ctx action)
                     nil)))))


;;; --- the fake item ------------------------------------------------

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 Colors/grey))))

