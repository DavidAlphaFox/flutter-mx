(ns tiltontec.example.fab
  (:require
    [clojure.string :as string]
    [tiltontec.cell.base :refer [mx-type unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx material-app center text scaffold column list-view-builder]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 m.Colors/grey))))

(def action-titles ["Create Post" "Upload Photo" "Upload Video"])

(defn show-action [ctx i]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (m/AlertDialog
                 :content (m/Text (action-titles i))
                 :actions [(m/TextButton
                             :onPressed #(-> ctx m.Navigator/of .pop)
                             :child ^:const (m/Text "CLOSE"))]))))

(defn action-button [& {:keys [on-pressed icon]}]
  (m/Material
    :shape ^:const (m/CircleBorder)
    :clipBehavior m.Clip/antiAlias
    :color m.Colors/blue
    :elevation 4.0
    :child (m/IconButton
             :onPressed on-pressed
             :icon icon
             :color m.Colors/blue)))

;;;
;;; --- the app -----------------------------------------------
;;;

(defn make-app []
  (material-app {:name :mat-app}
    {:title "Welcome to mxFlutter World"
     :theme (cF (ThemeData. :primarySwatch m.Colors/blue))
     :debugShowCheckedModeBanner false}
    (scaffold {:name :scaff}
      {:appBar               (AppBar.
                               :title (Text. "Expandable Fab"))
       :floatingActionButton
       #_ (expandable-fab
         :distance 112.0
         :children [(action-button :on-pressed #(show-action ctx 0)
                      :icon ^:const (m/Icon m.Icons/format_size))
                    (action-button :on-pressed #(show-action ctx 1)
                      :icon ^:const (m/Icon m.Icons/insert_photo))
                    (action-button :on-pressed #(show-action ctx 2)
                      :icon ^:const (m/Icon m.Icons/videocam))])
       (cF [:callback (fn [me ctx]
                    (action-button :on-pressed #(show-action ctx 0)
                      :icon ^:const (m/Icon m.Icons/format_size)))])


       #_ (cF (FloatingActionButton.
                                   :onPressed (fn ^void []
                                                (md/mswap! (md/fm* :z-counter)
                                                  :value inc))
                                   :tooltip "Increment"
                                   :child (Icon. Icons/add
                                            :color Colors/black)))}
      #_
      (text {} {:style (p/TextStyle.
                         :color m.Colors/black
                         :fontSize 32.0)}
        "hello, world\\n")
      (list-view-builder {}
        {:padding (m.EdgeInsets/symmetric :vertical 8.0)
        :itemCount 25
        :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

#_
(defn make-app []
  #_ (m/MaterialApp
       :home (example-expandable-fab)
       :debugShowCheckedModeBanner false)
  (material-app {}
    {:debugShowCheckedModeBanner false}
    (scaffold {}
      {:appBar (AppBar.
                 :title (Text. "Expandable Fab"))
       :floatingActionButton
       (cF (FloatingActionButton.
             :onPressed (fn ^void [])
             :tooltip "Increment"
             :child (Icon. Icons/add
                      :color Colors/black)))
       #_ (expandable-fab
                               :distance 112.0
                               :children [(action-button :on-pressed #(show-action ctx 0)
                                            :icon ^:const (m/Icon m.Icons/format_size))
                                          (action-button :on-pressed #(show-action ctx 1)
                                            :icon ^:const (m/Icon m.Icons/insert_photo))
                                          (action-button :on-pressed #(show-action ctx 2)
                                            :icon ^:const (m/Icon m.Icons/videocam))])}
      (text {} {:style (p/TextStyle.
                         :color m.Colors/black
                         :fontSize 32.0)}
        "hello, world\\n")
      #_ (m.ListView/builder
        :padding (m.EdgeInsets/symmetric :vertical 8.0)
        :itemCount 25
        :itemBuilder (fn [ctx i] (fake-item (odd? i)))))))

#_#_
    {:title "Welcome to mxFlutter World"
     :theme (cF (ThemeData. :primarySwatch m.Colors/blue))}
    (scaffold {:name :scaff}
      {:appBar               (AppBar.
                               :title (Text. "mxFlutter  Home Page"))
       :floatingActionButton (cF (FloatingActionButton.
                                   :onPressed (fn ^void []
                                                (md/mswap! (md/fm* :z-counter)
                                                  :value inc))
                                   :tooltip "Increment"
                                   :child (Icon. Icons/add
                                            :color Colors/black)))}
      (center {} {}
        (column {}
          {:mainAxisAlignment MainAxisAlignment/center}
          (text {}
            {:style (TextStyle.
                      :color m.Colors/black
                      :fontSize 18.0)}
            "You have clicked the button this many times:")
          (text {:name    :z-counter
                 :value (cI 0)}
            ;; a custom builder can access Dart context
            {:builder (fn [me ctx]
                        (Text. (str (md/my-val))
                          :style (.headline4 (.textTheme (Theme/of ctx)))))})
          (text
            {:name  :zx2
             :value (cF (* 2 (md/fmuval :z-counter)))}
            {}
            (str "Button click times two = " (md/my-val))))))