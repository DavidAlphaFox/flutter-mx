(ns tiltontec.example.fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [clojure.string :as string]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [mx-type minfo cinfo unbound *depender*] :as cty]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [material-app center text scaffold column list-view+builder]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(declare fake-item)

(defn show-action [ctx action]
  (m/showDialog
    :context ctx
    :builder (fn [ctx]
               (m/AlertDialog
                 :content (m/Text (:title action))
                 :actions [(m/TextButton
                             :onPressed #(-> ctx m.Navigator/of .pop)
                             :child ^:const (m/Text "CLOSE"))]))))

(defn action-button [ctx & {:keys [onPressed icon]}]
  ;; todo this needs to pick up color from ctx Theme
  (m/Material
    :shape ^:const (m/CircleBorder)
    :clipBehavior m.Clip/antiAlias
    ;; todo get colors from Ctx and then Theme
    :color (-> (Theme/of ctx) .-colorScheme .-secondary)
    :elevation 4.0
    :child (m/IconButton
             :onPressed onPressed
             :icon icon                                     ;;
             :color (-> (Theme/of ctx) .-colorScheme .-onSecondary))))

;;;
;;; --- the app -----------------------------------------------
;;;
(declare expandable-fab)

(defn make-app []
  (material-app
    {:title                      "Welcome to mxFlutter World"
     :debugShowCheckedModeBanner false}
    {:name :mat-app}

    (scaffold {:name :scaff}
      {:appBar               (AppBar
                               :title (Text "Expandable Fab/MX"))
       :floatingActionButton (expandable-fab
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])
       }
      (list-view+builder {}
        {:padding     (m.EdgeInsets/symmetric :vertical 8.0)
         :itemCount   25
         :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

(declare expanding-action-button
  tap-to-close-fab
  tap-to-open-fab)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or [initial-open? false]}]
  (fx/sized-box+expand
    {:initState (fn [this me]
                  (let [c (util/rmap-meta-setf [:controller me]
                            (m/AnimationController
                              :value (if initial-open? 1.0 0.0)
                              :duration ^:const (dart:core/Duration :milliseconds 250)
                              :vsync this))]
                    (util/rmap-meta-setf [:expand-animation me]
                      (m/CurvedAnimation
                        :curve m.Curves/fastOutSlowIn
                        :reverseCurve m.Curves/easeOutQuad
                        :parent c))))}
    {:name  :fab
     :open? (cI initial-open?
              :obs (fn-obs
                     (when-let [c (:controller (meta me))]  ;; wait for installation
                       (dp :fab-open-runs-forward?? new)
                       (if new
                         (.forward c)
                         (.reverse c)))))
     :step  (cF (/ 90.0 (dec (count actions))))
     }
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}

      (tap-to-close-fab me
        (fn []
          (let [fab (md/fasc :fab)]
            (assert fab (str "tap2close did not find fab calling fasc on " (cty/minfo me)))
            (md/mswap! fab :open? not))))

      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children

      (doall (map-indexed
               (fn [i action]
                 (let [fab (md/fasc :fab)]
                   (assert fab (str "action did not find fab calling fasc on " (cty/minfo me)))
                   (expanding-action-button
                     :direction-degrees (* i (mget fab :step))
                     :max-distance distance
                     :progress-key :expand-animation
                     :action action)))
               actions))

      (tap-to-open-fab me
        (fn []
          (let [fab (md/fasc :fab)]
            (assert fab (str "tap2close did not find fab calling fasc on " (cty/minfo me)))
            (md/mswap! fab :open? not)))))))

;;; expanding action  item

(defn expanding-action-button [& {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation  (fn [me ctx]
                   (let [fab (md/fm* :fab)]
                     (assert fab "eabutton animation does not see fab")
                     (let [xani (progress-key (meta fab))]
                       (assert xani (str "cannot get expand ani from meta with key " progress-key))
                       (dp :ani-got-ani!! progress-key xani)
                       xani)))
     :ani-beefer (fn [me ctx child]
                   (let [fab (md/fm* :fab)
                         progress (let [xani ^m/CurvedAnimation (:expand-animation (meta fab))]
                                    (assert xani "cannot get expand ani from meta")
                                    xani)
                         offset (m.Offset/fromDirection
                                  (* direction-degrees (/ math/pi 180.0))
                                  (* (.value progress) max-distance))]
                     ;; todo convert to MX
                     (f/widget
                       (f/nest
                         (m/Positioned
                           :right (+ 4.0 (.dx offset))
                           :bottom (+ 4.0 (.dy offset)))
                         (m.Transform/rotate
                           :angle (* (- 1.0 (.value progress))
                                    math/pi 0.5))
                         child))))
     :animated-child  (fn [me ctx]
                   (dp :animated-child-entry!!!!!!!!!! action)
                   (action-button ctx
                     :icon (:icon action)
                     :onPressed (fn ^void []
                                  ;; todo this should be a child under ^^^ positioned
                                  (dprn :NO-CTX-fader-show-action!!!!!!!! action (minfo me))
                                  ;
                                  ; right here we need to add ctx to the render-fx calls
                                  ;
                                  ;
                                  (show-action ctx action)
                                  nil)))}))
#_(fx/fade-transition
    {:opacity (fn [me ctx]
                (let [fab (md/fm* :fab)]
                  (assert fab "opacity does not see fab")
                  (let [xani (:expand-animation (meta fab))]
                    (assert xani "opacity cannot get expand ani from meta")
                    xani)))}
    (action-button
      :icon (:icon action)
      :onPressed (fn ^void []
                   ;; todo this should be a child under ^^^ positioned
                   (dprn :NO-CTX-fader-show-action!!!!!!!! action (minfo me))
                   ;;(show-action ctx action)
                   nil)))


;;; --- the fake item ------------------------------------------------

(defn fake-item [is-big?]
  (m/Container
    :margin ^:const (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
    :height (if is-big? 128.0 36.0)
    :decoration
    (m/BoxDecoration
      :borderRadius ^:const (m.BorderRadius/all (m.Radius/circular 8.0))
      :color (.-shade300 Colors/grey))))

;;; --- tap to open/close ----------------------------------------------


(defn- tap-to-close-fab [par toggle]
  (f/nest
    (m/SizedBox
      :width 56.0
      :height 56.0)
    m/Center
    (m/Material
      :shape ^:const (m/CircleBorder)
      :clipBehavior m.Clip/antiAlias
      :elevation 4.0)
    (m/InkWell :onTap toggle)
    (m/Padding :padding ^:const (m.EdgeInsets/all 8.0))
    ;; todo use theme below
    (m/Icon m.Icons/close :color m.Colors/green  #_(.primaryColor theme))))

(defn- tap-to-open-fab [par toggle]
  (dp :building-tap-open-for (minfo par))
  (f/nest
    (m/IgnorePointer :ignoring (boolean (mget (md/fasc :fab par) :open?)))
    (m/AnimatedContainer
      :transformAlignment m.Alignment/center
      :transform (let [open? (mget (md/fasc :fab par) :open?)]
                   (m.Matrix4/diagonal3Values
                     (if open? 0.7 1.0)
                     (if open? 0.7 1.0)
                     1.0))
      :duration ^:const (dart:core/Duration :milliseconds 250)
      :curve ^:const (m/Interval 0.0 0.5 :curve m.Curves/easeOut))
    (m/AnimatedOpacity
      :opacity (if (mget (md/fasc :fab par) :open?) 0.0 1.0)
      :curve ^:const (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
      :duration ^:const (dart:core/Duration :milliseconds 250))
    (m/FloatingActionButton :onPressed toggle)
    (m/Icon m.Icons/create)))