(ns tiltontec.example.x29-popup-menu
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.matrix.api :refer [cF cI cFn cFonce mpar mget  mset! mswap! fmu fm*] :as mx]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]))

(def cg4-languages [{:code "es", :name "Spanish", :translation "Hola, mundo."}
                    {:code "fr", :name "French", :translation "Bonjour, monde."}
                    {:code "de", :name "German", :translation "Hallo, Welt."}
                    {:code "it", :name "Italian", :translation "Ciao, mondo."}
                    {:code "pt", :name "Portuguese", :translation "Olá, mundo."}
                    {:code "zh-CN", :name "Chinese (Simplified)", :translation "你好，世界。"}
                    {:code "ja", :name "Japanese", :translation "こんにちは、世界。"}
                    {:code "ko", :name "Korean", :translation "안녕하세요, 세상."}
                    {:code "ru", :name "Russian", :translation "Привет, мир."}
                    {:code "ar", :name "Arabic", :translation "مرحباً بالعالم."}])

(defn make-app []
  (fx/material-app
    {:title "Flutter/MX Counter Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    (fx/scaffold
      {:appBar (fx/app-bar
                 {:title (m/Text "Flutter/MX Popup Menu Demo")})}
      (fx/center
        (fx/column
          {:mainAxisAlignment m.MainAxisAlignment/center}

          (fx/popup-menu-button
            {:initialValue (cFonce (mget me :lang-code))
             :onSelected (as-dart-callback [item]
                           (mset! me :lang-code item))
             :itemBuilder (cF (fx/as-is
                                (fn ^#/(List m/PopupMenuEntry) [ctx]
                                  (let [^#/(List m/PopupMenuEntry) result
                                        (mapv (fn  [{:keys [code name]}]
                                                (m/PopupMenuItem
                                                  .value code
                                                  .child (m/Text name)))
                                          (mget me :languages))]
                                    (dp :result!!! result)
                                    result))))}
            {:name :lang-picker
             :languages (cI cg4-languages)
             :lang-code (cI nil) #_ (cFn (:code (first (mget me :languages))))
             :lang-preferred (cF (when-let [code (mget me :lang-code)]
                                      (some #(when (= code (:code %)) %)
                                        (mget me :languages))))}
            (fx/text (if-let [lang (mget (fmu :lang-picker) :lang-preferred)]
                       (:name lang)
                       "Click to Select Language")))
          (fx/sized-box {:height 18.0})

          (fx/text {:style (p/TextStyle .color m.Colors/black
                             .fontSize 18.0)}
            (if-let [lang (mget (fmu :lang-picker) :lang-preferred)]
              (:translation lang)
              "<your greeting here>")))))))