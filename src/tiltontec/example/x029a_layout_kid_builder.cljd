(ns tiltontec.example.x029a-layout-kid-builder
  (:require
    ["dart:math" :as math]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["dart:async" :as async]
    [tiltontec.cell.base :as cb]
    [tiltontec.matrix.api :refer [dp dpx cF cF+ cI mget mpar fasc faprop fmuv minfo mset! fmu] :as mx]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]))

(defn make-app []
  (let [title "Seamless Layout Builder/Built"]
    (fx/material-app
      {:title title}
      {:name    :the-app
       :msg     "\"Hi, mom!\" "
       :elapsed (cI 0)
       :clock   (cF+ [:on-quiesce (fn [c]
                                    (when-let [tmr ^async/Timer (cb/c-value c)]
                                      (.cancel tmr)))]
                     (async/Timer.periodic (Duration .seconds 3)
                                           (fn [^async/Timer tmr]
                                             (mset! me :elapsed (.-tick tmr)))))}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        (fx/center
          (fx/layout-kid-builder
            ;; for now, we must use the hard-coded :box-constraints to get that build parameter
            (fx/center {}{:quiesce :never}
              (fx/text
                {:style (cF (p/TextStyle
                              .color (mget me :font-color)
                              .fontSize (mget me :font-size)))}
                {:font-size  (cF (if-let [box (faprop :box-constraints me)]
                                   (+ (* 0.05 (.-maxHeight ^m/BoxConstraints box))
                                      ;; just a random computation off a model outside the built-kid model:
                                      (* 5 (mod (faprop :elapsed me) 5)))
                                   24))
                 :font-color (cF (cond
                                   (> (mget me :font-size) 25) m.Colors/red
                                   :else m.Colors/cyan))}
                (str (mget (fasc :the-app) :msg)
                     "in font size "
                     (/ (int (* 10 (mget me :font-size))) 10))))))))))