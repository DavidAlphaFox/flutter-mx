(ns tiltontec.cell.base
  (:require
    [tiltontec.model.peek :refer [mref? minfo]]
    [tiltontec.matrix.base :as utb
     :refer [mx-throw def-rmap-props dp]]

    [tiltontec.matrix.util
     :refer [cl-find set-ify atom?
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-set! mut-set!]
     :as utc]

    [tiltontec.matrix.foundation :refer [PObserver observe] :as mx]))



;; --- the Cells beef -----------------------

(def +pulse+ (atom 0))

(defn pulse-now [] @+pulse+)

(defn cells-init []
  (reset! +pulse+ 0))

(def ^:dynamic *causation* '())
(def ^:dynamic *call-stack* nil)
(def ^:dynamic *depender*
  "*depender* let's us differentiate between the call stack and
and dependency. The problem with overloading *call-stack* with both roles
is that we miss cyclic reentrance when we use without-c-dependency in a
rule to get once behavior or just when fm-traversing to find someone"
  nil)

(def ^:dynamic *defer-changes* false)
(def +client-q-handler+ (atom nil))

(defmacro WITHOUT-mx-isolation [& body]
  `(do
     (when (or tiltontec.cell.base/*within-integrity*
             tiltontec.cell.base/*depender*
             tiltontec.cell.base/*defer-changes*
             tiltontec.cell.base/*call-stack*)
       (tiltontec.matrix.base/dp :DANGER-mx-iso-ignoring!!!!!!!!! tiltontec.cell.base/*within-integrity*
                                    tiltontec.cell.base/*depender*
                                    tiltontec.cell.base/*defer-changes*
                                    tiltontec.cell.base/*call-stack*))
     ~@body))

(defmacro with-mx-isolation [& body]
  `(do
     #_ (tiltontec.matrix.base/dp :mx-iso-overriding!!!S
       tiltontec.cell.base/*within-integrity*
       tiltontec.cell.base/*depender*
       tiltontec.cell.base/*defer-changes*
       tiltontec.cell.base/*call-stack*)
     (binding [tiltontec.cell.base/*within-integrity* nil
             tiltontec.cell.base/*depender* nil
             tiltontec.cell.base/*defer-changes* false
             tiltontec.cell.base/*call-stack* nil]
     ~@body)))

(def unbound (gensym "unbound-cell-value"))
(defn when-bound [x]
  (when (not= x unbound) x))

(def uncurrent (gensym "uncurrent-formulaic-value"))


(def ^:dynamic *unfinished-business* nil)
(def ^:dynamic *within-integrity* false)

;; --- debug stuff -----------------------------
(def ^:dynamic *finbiz-id* 0)
(def ^:dynamic *c-prop-depth* 0)
(def ^:dynamic *cdbg* false)

(defn cprn [& bits]
  (when *cdbg*
    (apply prn bits)))

(defmacro with-cdbg [value & body]
  `(binding [*cdbg* ~value]
     ~@body))

(def +c-debug+ (atom false))
(def ^:dynamic +stop+ (atom false)) ;; emergency brake

(defmacro pcell [tag c]
  `(dp :pcell ~tag (c-prop ~c)(c-state ~c)))

;; --- procedure division ----------------------

(defn cells-reset
  ([] (cells-reset {}))
  ([options]
   (reset! +c-debug+ (:debug options false))
   (reset! +pulse+ 0)
   (reset! +client-q-handler+ (:client-queue-handler options))))

(defmacro without-c-dependency [& body]
  `(binding [*depender* nil]
     ~@body))

(defmacro cpr [& r]
  `(without-c-dependency
     (pln @+pulse+ ~@r)))

(defn +cause []
  (first *causation*))

;; --- 19000 ----------------------------------

(defn c-stopper [why]
  (reset! +stop+ why)) ;; in webserver, make sure each thread binds this freshly

(def +c-stopper+ (atom c-stopper))

(defn c-stop
  ([] (c-stop true))
  ([why]
   (@+c-stopper+ why)))

(defn c-stopped []
  @+stop+)

(defmacro un-stopped [& body]
  `(when-not @+stop+
     ~@body))

(defn ustack$ [tag] ;; debug aid
  (str tag "ustack> "(vec (map (fn [c] (:prop @c)) *call-stack*))))

(defn c-assert
  ([assertion] (when-not assertion
                 (dp "c-assert anon failed")))
  ([assertion fmt$ & fmt-args]
   (when-not +stop+
     (when-not assertion
       (dp (str "c-assert> " fmt$ fmt-args))))))

(defn c-break [& args]
  (when-not +stop+
    (dp (str args))))

(defn c-warn [& args]
  (when-not +stop+
    (dp (apply str "WARNING: " args))))

;; ------------------------------------------------------

(deftype Cell []
  :extends mx/MXImplementer)

(deftype CellFormula []
  :extends Cell)

(defn c-type [c]
  (assert (and c (atom? c))
    (str "c-type> argument null or not atom or not map deref: " c))
  (when-let [m (meta c)]
    (:mx-type m))) ;; not a typo! "mx" covers model and cell

;; --- c-quiesce! -----------

(defn c-quiesce! [c]
  (assert c)
  (dpc c :quiesce :entry)
  (when-not false                                           ;; (c-quiesced? c)
    (assert (not (c-quiesced? c))
      (str "c-quiesce!> already dead " (cinfo c)))
    (when-let [onq (:on-quiesce @c)]
      (onq c))
    (unlink-from-callers c)
    (unlink-from-used c :quiesce)
    #_ (reset! c (concat [:quiesced] ((juxt c-prop-name c-mname) c)))
    ))

(defn c-quiesced? [ref]
  (assert (atom? ref)
    (str "util.core/rmap-quiesced?> failed assertion atom? on ref:" ref))
  (and (coll? @ref)
    (= :quiesced (first @ref))))

(defn c-ref? [c]
  (when (and c (atom? c) (map? @c))
    (dart/is? (c-type c) Cell)))

(defn c-ref?! [c]
  (dart/is? (c-type c) Cell))

(defn c-formula? [c]
  (when (and c (atom? c) (map? @c))
    (dart/is? (c-type c) CellFormula)))

(utb/def-rmap-props c-
  me prop state input? rule pulse pulse-last-changed pulse-observed
  useds users callers optimize ephemeral? sink
  lazy synapses synaptic? code async? then? debug)

(defn c-code$ [c]
  (with-out-str (do ;; binding [*print-level* false]
                  (prn-str (:code @c)))))

(defn c-value [c]
  (assert (atom? c))
  (cond
    (and (c-ref? c)
      (map? @c)) (:value @c)
    :else @c))

(defn c-optimized-away? [c]
  (cond
    (c-ref? c) (or (not (map? @c))
                 (not (contains? @c :state)) ;; random property check?
                 (and (atom? c)
                   (:optimized-away (meta c)))
                 (= :optimized-away (:state @c)))
    (and (atom? c)
      (:optimized-away (meta c))) true
    :else true))

(defn c-model [rc]
  (:me @rc))

(defn c-mname [c]
  (if-let [md (c-model c)]
    (or (:name @md)
      "anon")
    "no-md"))

(defn c-prop-name [rc]
  (:prop @rc))

(defn c-value-state [rc]
  (let [v (c-value rc)]
    (cond
      (= v unbound) :unbound
      (= v uncurrent) :uncurrent
      :else :valid)))

(defn c-unbound? [rc]
  (= :unbound (c-value-state rc)))

(defn c-valid? [rc]
  (= :valid (c-value-state rc)))

(defn cinfo
  ([c] (cinfo c false))
  ([c verbose?]
   (cond
    (nil? c) :null-c
    (not (atom? c)) (if verbose? [:not-atom-c c]
                                 :not-atom-c)
    (not (c-ref? c)) (if verbose? [:not-cell-c @c :meta (meta c)]
                       :not-cell-c)
    (c-quiesced? c) [:deadc> @c]
    :else (if verbose?
            [:cinfo-all @c]
            (conj ((juxt c-prop-name c-mname #_ c-async? c-value) c)
              [:used/users (count (c-useds c))
               (count (c-callers c))])))))

;(defn dpc [c & bits]
;  (assert (c-ref? c) (str "DPC got non-c: " c bits))
;  (when (:debug @c)
;    (apply dp :DPC (cinfo c) bits)))

(defn atom-dump [a]
  (if (atom? a)
    (atom-dump (deref a))
    a))

(defn dpc [c category & bits]
  (assert (c-ref?! c) (str "DPC got non-c: " category " info " (atom-dump c) " meta " (meta c)))
  (when-let [dbg (:debug @c)]
    (when (or (true? dbg) (some #{category} dbg))
      (apply dp :DPC category (first bits) (cinfo c) (rest bits)))))

;; --- dependency maintenance --------------------------------

(defn dependency-record [used]
  (dpc *depender* :link :record-usage-of/if  (not (c-optimized-away? used)) (cinfo used))
  (when-not (c-optimized-away? used)
    (mut-set! *depender* :useds
      (conj (c-useds *depender*) used))
    (mut-set! used :callers
      (conj (c-callers used) *depender*))))

(defn dependency-drop [used caller]
  (dpc caller :link :drops-dependency (cinfo used))
  (mut-set! caller :useds (disj (c-useds caller) used))
  (mut-set! used :callers (disj (c-callers used) caller)))

(defn unlink-from-callers [used]
  (dpc used :link :unlink-callers (count (c-callers used)))
  (doseq [caller (c-callers used)]
    (dpc caller :link :dropped-by-used!!!! (cinfo used))
    (dependency-drop used caller)))

(defn unlink-from-used [caller why]
  "Tell dependencies they need not notify us when they change, then clear our record of them."
  (dpc caller :link :unlink-from-used!!! (count (c-useds caller)))
  (doseq [used (c-useds caller)]
    (dependency-drop used caller)))

;; debug aids --------------

(defn c-props [c k]
  (assert (c-ref? c) (str "cslots c-ref? fail " ))
  ;; set conversion as convenience to test code
  (set (map c-prop (k @c))))


;;---

(defn c-debug [c tag])
