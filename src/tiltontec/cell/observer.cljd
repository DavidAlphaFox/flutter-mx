(ns tiltontec.cell.observer
  (:require
    [tiltontec.util.base
     :refer [trx dpx dp type-cljd]]

    [tiltontec.util.core
     :refer [cl-find set-ify atom? err
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-setf]
     :as ut]

    [tiltontec.cell.base
     :refer [c-ref? md-ref? unbound cinfo
             +pulse+ c-slot c-value c-md-name
             c-model] :as cty]

    ["package:flutter/widgets.dart" :as w
     :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]))

(def +observe-method+ (atom {}))

(defn observer-register [key observer]
  (prn :obs-reg key)
  (swap! +observe-method+ assoc key observer))

(def +observe-default-handler+ (atom nil))

(defn observer-get [key]
  (get @+observe-method+ key))

(defn observe [slot-name me new-val old-val c]
  (dpx :obs-classic slot-name (cty/minfo me) new-val)
  ;; todo if no state next, search up for nearest and set-State that

  (when-let [obs (:fx$observer @me)]
    ;; note that we carry on with generic observe after specific observe
    (do (dpx :using-obj-observer (cty/minfo me))
        (obs slot-name me new-val old-val c)))

  (when-let [obs (observer-get (type-cljd me))]
    (do (prn :using-type-obs slot-name (type-cljd me))
        (obs slot-name me new-val old-val c))))

(defmacro fn-obs
  "Shortcut definer for cell-specific observers.
body can be multiple sexprs with access to
call parameters: slot, me, new, old, and c."
  [& body]
  `(fn [~'slot ~'me ~'new ~'old ~'c]
     ~@body))

(defn c-observe
  ([c why]
   (c-observe c unbound why))

  ([c prior-value why]
   (assert (c-ref? c) (str "c-ref? fail on c-observe" c))
   (assert (dart/is? @+pulse+ int))
   (dpx :c-observe!!!! (cinfo c))
   (rmap-setf [:pulse-observed c] @+pulse+)
   ;; we do observes specified for types or slots...
   (observe (c-slot c) (c-model c) (c-value c) prior-value c)

   (when-let [mx-type (cty/mx-type (c-model c))]
     ;(prn :observing-mx-type mx-type why)
     (cty/observe mx-type (c-slot c) (c-model c) (c-value c) prior-value c))



   ;; ...and also do observes specified ad hoc on the cI/cF call.
   ;; nb that we do not want ad hoc observers to shadow those specified generically
   ;; indeed, in Lisp observers are progn methods -- they all run.
   (when-let [cell-observer (:obs @c)]
     #_(dp :cell-specific-obs!!!!!! why (cinfo c))
     (cell-observer (c-slot c) (c-model c) (c-value c) prior-value c))))



