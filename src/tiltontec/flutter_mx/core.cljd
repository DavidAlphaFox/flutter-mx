(ns tiltontec.flutter-mx.core
  (:require
    ["dart:io" :as io]
    ["package:flutter/foundation.dart" :as foundation]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/widgets.dart" :as w
     :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
    ["package:flutter/painting.dart" :as p
     :refer [TextStyle]]
    [clojure.string :as str]
    [tiltontec.matrix.foundation :as mxf]
    [tiltontec.matrix.base :refer [wtrx dp dpx mx-throw]]
    [tiltontec.matrix.util :refer [atom?]]
    [tiltontec.model.base :refer [*md-host*]]
    [tiltontec.model.peek :refer [chk Model mref? minfo]]
    [tiltontec.cell.base :refer [cinfo c-ref?] :as cty]
    [tiltontec.matrix.api :refer [rmap-set! rmap-meta-set! make mget mkids mswap! cFkids] :as mx]
    [tiltontec.flutter-mx.factory :as fxf]))

(deftype CBAsIs [value]
  ;; tells fx-resolve to leave mx value untouched
  ;; used originally so a FX callback (the builder for AnimatedBuilder) was not
  ;; treated as callback to MX to get the resolved value.
  :extends mxf/MXImplementer)

(deftype CBToResolve [value]
  ;; tells fx-resolve to call the mx value as a function of ctx and me.
  ;; used where app needs to see the Flutter context to decide a value
  :extends mxf/MXImplementer)

(defn fx-get-resolved [me prop ctx]
  (fx-resolve prop me ctx
    (mget me prop)))

(defn fx-factory-yield
  ([f] (fx-factory-yield nil f))
  ([par f] (if (dart/is? f mxf/CBFactory)
             ((.-value ^mxf/CBFactory f) par)
             f)))

(defn fx-resolve
  "Convert an FX-side value to one suitable as value for a property of a native Dart widget"
  [prop me ctx widget-value]
  (wtrx [0 1000 nil :RESO prop (minfo me) widget-value]
    (let [resolved
          (cond
            (nil? widget-value)
            (do
              (dpx :fx-res-nil!! prop (minfo me))
              nil)

            (dart/is? widget-value CBAsIs)
            (do
              (dpx :fx-resolve-as-ising!!!!!!!!! prop (minfo me) widget-value)
              (.-value ^CBAsIs widget-value))

            (dart/is? widget-value mxf/CBFactory)
            ;; we can defer widget construction/eval until parent "me" is in hand,
            ;; instead of via macrology. The alternative has been for, say, `column` to
            ;; be a macro, so its children do not evaluate before the column even
            ;; exists. MX relies on children knowing their parent at birth.
            ;; todo should a factory ever make it this far without being converted to a model?!
            (binding [*md-host* me]
              (dpx :FX-RESOLVING-Factory!!!!!!!!!!!!!!!!!! prop (minfo me) widget-value)
              (let [yielded (fx-factory-yield me widget-value)]
                (dpx :fact-yields yielded (minfo yielded))
                (fx-resolve prop me ctx yielded)))

            (dart/is? widget-value CBToResolve)
            ;; in the past, a naked function given, say, to onPress would be
            ;; called like (naked-fn me ctx), but with v2 it simply gets passed
            ;; as the onPress, so we have to do call a CBToResolve value here and
            ;; then give that recursively to fx-resolve. So if the (cb-val me ctx) below
            ;; returns a function, /that/ will be passed on to Flutter as is. ie CBToResolve
            ;; exists so we can use params me and ctx to decide the handler to be given to Flutter.
            (let [val ^CBToResolve widget-value]
              (dpx :fx-reso-calling-back!!!!!!! prop (minfo me) widget-value)
              (let [cb-val (.-value val)]                   ;; ^CBToResolve widget-value)]
                (dpx :CBToResolveyields cb-val)
                (let [v (cb-val me ctx)]
                  (dpx :recuring-unwrapped-fn?-return-val v)
                  (fx-resolve prop me ctx v))
                #_(fx-resolve prop me ctx cb-val)))

            (dart/is? widget-value m/Widget)
            (do
              (dpx :widget-value-is-widget widget-value)
              widget-value)

            (fn? widget-value)
            (do
              (dpx :fxreso-allowing-naked-fn? widget-value prop (mx/minfo me))
              widget-value)

            (cty/c-ref? widget-value)
            (mx-throw (str "fx-resolve sees Cell! " (cinfo widget-value)))

            (mref? widget-value)
            (do
              (dpx :fxres-sees-mref (minfo widget-value))
              (let [fx (fx-render ctx widget-value)]
                (dpx :rfx-mdref-yielded-flutter fx)
                fx))

            ;; -- loses type info such as ^#/(List DataColumn)
            #_#_(vector? widget-value)
                    (do (dpx :fxres-vector!!! prop (count widget-value))
                        (let [rzd (into [] (map (partial fx-resolve prop me ctx) widget-value))]
                          (dpx :vec-rez rzd)
                          rzd))

            :else (do (dpx :fxres-fall-thru-passthru prop (minfo me) widget-value
                        (when (atom? widget-value)
                          (deref widget-value)))
                      widget-value))]
      ;;(dp :resolved prop resolved)
      resolved)))


(defn ctx-page-push
  ([ctx fx-page-def]
   (ctx-page-push ctx fx-page-def nil))
  ([ctx fx-page-def name]
   (.push (-> ctx m.Navigator/of)
     (#/(m/MaterialPageRoute Object)
       .settings (m/RouteSettings .name name)
       .builder (fn [my-ctx]
                  (fx-render my-ctx
                    (if (fn? fx-page-def)
                      (fx-page-def my-ctx)
                      fx-page-def)))))))

(defn ctx-page-pop [ctx]
  (.pop (-> ctx m.Navigator/of)))

(defn fx-render [ctx fx]
  (wtrx [0 999 nil :render-entry (minfo fx)]
    (cond
      (not (mref? fx))
      (cond
        (cty/c-ref? fx)
        (mx-throw (str "fx-render passed Cell " (deref fx)))
        :default (do
                   #_(when-not (string? fx)
                       (dp :render-sees-not-mref?-passing-thru fx))
                   fx))
      :else (let [gen (mget fx :fx-gen)]
              (dpx :render-sees-gen!! gen)
              (chk gen "OBAD: fx-render of model finds no fx-gen: ")
              ;;(dp :fx-render-records (minfo fx) ctx)
              ;; nope (fxf/record-fx$ctx fx ctx)
              (let [g (gen fx ctx)]
                (dpx :render-genned!!! g)
                (rmap-meta-set! [:fx-dom fx] g)
                g)))))

(defmacro in-my-context [[me-var ctx-var] & body]
  `(tiltontec.flutter-mx.core/->CBToResolve
     (fn [~me-var ~ctx-var]
       ~@body)))

(defmacro when-my-state [[state-var] & body]
  `(when-let [~state-var (tiltontec.flutter-mx.core/my-state)]
     ~@body))

(defn ctx-nav [ctx]
  (m.Navigator/of ctx))

(defmacro my-controller []
  `^m/AnimationController? (tiltontec.matrix.api/mget ~'me :controller))

(defn standard-text-value-controller [me]
  ;; usage: (fx/text {:controller (cF (standard-text-value-controller me))}....
  (let [c (m/TextEditingController
            .text (mx/mget me :value))]
    (.addListener c
      (fn []
        (cty/with-mx-isolation
          (mx/mset! me :value (.-text c)))))
    c))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tiltontec.matrix.api/mget ~'me :animation))

(defmacro my-state []
  `(tiltontec.matrix.api/mget ~'me :fx$state))

;;; ---- sundry factories per Flutter variation on statefulness, child/children/content/body ------------------

(defmacro deftag [factory mx-name fx-class & [param-property]]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# & children#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just kids
             (list* nil nil vargs#)

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list* (first vargs#) nil (rest vargs#)))]
       `(~'~factory ~@(when ~param-property
                        [~param-property]) ~'~fx-class ~fx-props# ~mx-props# ~@children#))))

(defmacro deftagnokids [factory mx-name fx-class]
  `(defmacro ~mx-name [& vargs#]
     ;; todo user error checking
     (let [[fx-props# mx-props#] vargs#]
       `(~'~factory ~'~fx-class ~fx-props# ~mx-props#))))



;(deftag tiltontec.flutter-mx.factory/childless-stateless data-table m/DataTable)
(defmacro alert-dialog [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-content-stateless m/AlertDialog ~fx-props ~mx-props ~@children))

;(deftag tiltontec.flutter-mx.factory/childless-stateful text-field m/TextField)
;(deftag tiltontec.flutter-mx.factory/childless-stateful check-box m/Checkbox)



;; todo does snackbar still need this custom macro?
;(deftag tiltontec.flutter-mx.factory/make-fx-snackbar snack-bar m/SnackBar)


;;; --- tagleaf --------------------------------------------

(defmacro deftagleaf [factory mx-name fx-class]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# param-1#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just param
             (list nil nil (first vargs#))

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list (first vargs#) nil (last vargs#)))]
       `(~'~factory ~'~fx-class ~fx-props# ~mx-props# ~param-1#))))

(deftagleaf tiltontec.flutter-mx.factory/konly-param1-stateful text! m/Text)

;;; --- childless stateless --------------------------------------------------------

(defmacro icon-button [& vargs]
  (let [[fx-props mx-props] vargs]
    `(tiltontec.flutter-mx.factory/childless-stateless m/IconButton ~fx-props ~mx-props)))

;(deftag tiltontec.flutter-mx.factory/childless-stateless rounded-rectangle-border p/RoundedRectangleBorder)
;(deftag tiltontec.flutter-mx.factory/childless-stateless list-tile m/ListTile)
;(deftag tiltontec.flutter-mx.factory/childless-stateless layout-builder w/LayoutBuilder)
;(deftag tiltontec.flutter-mx.factory/childless-stateless flutter-logo m/FlutterLogo)
;(deftag tiltontec.flutter-mx.factory/childless-stateless
;  navigation-rail-destination w/NavigationRailDestination)


(deftag tiltontec.flutter-mx.factory/childless-stateless bottom-navigation-bar-item w/BottomNavigationBarItem)
(deftag tiltontec.flutter-mx.factory/childless-stateful elevated-button+icon m.ElevatedButton/icon)

;;; ---------------------------------------------------
;;; the dance between Flutter and MX is a bit intricate
;;; these macros try to hide the plumbing without being obscure.

(defmacro as-is [callback-fn]
  `(tiltontec.flutter-mx.core/->CBAsIs
     ~callback-fn))

(defmacro with-ctx+as-is [[me ctx] callback-fn]
  `(tiltontec.flutter-mx.core/in-my-context [~me ~ctx]
     (tiltontec.flutter-mx.core/->CBAsIs
       ~callback-fn)))

(defmacro as-dart-callback [[& cb-params] & body]
  `(tiltontec.flutter-mx.core/with-ctx+as-is [~'me ~'ctx]
     (fn [~@cb-params]
       (tiltontec.cell.base/with-mx-isolation
         ~@body))))

(defmacro my-app []
  ;; fasc "captures" 'me
  `(tiltontec.matrix.api/fasc :app))

;;; --- hot reload support --------------------

(defmacro wrap-stateless [widget-expression]
  `(reify :extends (w/StatelessWidget)
     (~'build [self# ctx#] ~widget-expression)))

(defmacro wrap-unique-key [widget-expression]
  `(reify :extends (m/StatefulWidget .key (foundation/UniqueKey))
     (~'createState [_#]
       (reify :extends w/State
         (~'build [_# ctx]
           ~widget-expression)))))

(defmacro run-app [widget-expression]
  `(m/runApp
     (wrap-stateless (wrap-unique-key ~widget-expression))))

;;; --- environment ------------------------

(defn is-web? []
  foundation/kIsWeb)

(defn is-mobile? []
  (and (not (is-web?))
    ;; we cannot ask about Platform if on Web, so first ^^ we rule that out
    (or io/Platform.isAndroid
      io/Platform.isIOS)))

(defn is-desktop? []
  (and (not (is-web?))
    ;; we cannot ask about Platform if on Web, so first ^^ we rule that out
    (or io/Platform.isMacOS
      io/Platform.isWindows
      io/Platform.isLinux)))

(defn platform-category []
  (cond
    (is-web?) :web
    (is-desktop?) :desktop
    (is-mobile?) :mobile
    io/Platform.isFuchsia :fuchsia
    :else :unknown))



;;; --- nextgen ----------------------------------------

(defmacro as-content [form]
  `(tiltontec.matrix.foundation/->CBFactory
     (fn [& [~'me]]
       ~form)))

(defmacro with-parent [& kids]
  `(tiltontec.matrix.foundation/->CBFactory
     (fn [& [~'me]]
       (tiltontec.model.core/the-kids
         ~@kids))))

(defmacro with-host [guest]
  `(tiltontec.matrix.foundation/->CBFactory
     (fn [& [par#]]
       (binding [tiltontec.model.core/*md-parent* par#]
         ~guest))))

(defn make-fx-dart-widget
  ([fx-props mx-props] (make-fx-dart-widget fx-props mx-props nil))
  ([fx-props mx-props kids]
   (fxf/make-fx (new fxf/FXDartWidget) fx-props mx-props kids)))

(defn fx-props-resolved [me ctx fx-props-map]
  (into {}
    (remove nil?
      ;; Flutter doesn't like to take optional named args with nil values
      (for [[k v] fx-props-map]
        (when-let [rv (fx-get-resolved me k ctx)]
          (dpx :prop-reso k rv)
          [(Symbol (name k)) rv])))))

(defn fx-render-nth-kid [me ctx kid-n]
  (tiltontec.flutter-mx.core/fx-render ctx
    (tiltontec.flutter-mx.core/fx-resolve :kidn me ctx
      (nth (tiltontec.matrix.api/mkids me) 0))))

(defn stateful-gen [me ctx gen-fn]
  (reify :extends (m/StatefulWidget
                    .key (tiltontec.flutter-mx.core/fx-resolve :key me ctx
                           (tiltontec.matrix.api/mget? me :key)))
    (createState [_]
      (reify :extends w/State
        (^void initState [this]
          (fxf/record-fx$state me this))
        (build [_ ctx]
          (fxf/ctx-check me ctx)
          (fxf/with-flutter-ref
            (gen-fn me ctx)))))))

(defn stateful-ticker-gen [me ctx gen-fn]
  (reify :extends (m/StatefulWidget
                    .key (tiltontec.flutter-mx.core/fx-resolve :key me ctx
                           (tiltontec.matrix.api/mget? me :key)))
    (createState [_]
      (reify :extends w/State
        ^:mixin m/SingleTickerProviderStateMixin            ;; todo make optional
        (^void initState [this]
          (fxf/record-fx$state me this))
        (build [_ ctx]
          (fxf/ctx-check me ctx)
          (fxf/with-flutter-ref
            (gen-fn me ctx)))))))

#_ (defmacro sized-box+expand [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m.SizedBox/expand ~fx-props ~mx-props ~@children))

(deftag-constructor sized-box+expand m.SizedBox/expand fx-gen-k0>prop-stateful {:prop :child
                                                                                :ticker? true})
(deftag-constructor list-view+builder m.ListView/builder fx-gen-ks>ignored-stateless)

(defn fx-gen-ks>ignored-stateless [me ctx fx-props new-fn]
  (dp :fx-gen-ks>ignored-stateless (minfo me))

  (fxf/ctx-check me ctx)
  (dp :fx-gen-ks>ignored-props fx-props)
  (fxf/with-flutter-ref
    (let [props (fx-props-resolved me ctx fx-props)]
      (dp :ks->ignnored-props!!!!!!! props)
      (Function.apply new-fn [] props))))

(defmacro kids-for-builder [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn fgen [~'me ctx]
                   (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) ~'me ctx)
                   (with-flutter-ref
                     (~fx-class
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# ~'me ctx
                                         (tiltontec.matrix.api/mget ~'me ~k#))])]
                           (apply concat kvs))))))
       (tiltontec.matrix.api/cFkids ~@children))))

(defmacro deftag-fn [mx-name dart-class flutter-variant & flutter-variant-props]
  `(defn ~mx-name [& vargs#]
     (tiltontec.matrix.foundation/->CBFactory
       (fn [& [par#]]
         (dpx :deftag-fn-factory-fn-called-with-par!!! (minfo par#))
         (let [[fx-props# mx-props# & kids#]
               (cond (nil? vargs#) nil
                 (not (map? (first vargs#))) (list* nil nil vargs#)
                 (map? (second vargs#)) vargs#
                 :else (list* (first vargs#) nil (rest vargs#)))]
           ;(dp :tagfn-sees-kids '~mx-name (first kids#))
           ;(dp :tagfn-sees-kids '~mx-name :cinfo (cinfo (first kids#)))
           ;(dp :tagfn-sees-kids '~mx-name :minfo (minfo (first kids#)))
           (binding [tiltontec.model.core/*md-parent* par#]
             (tiltontec.flutter-mx.core/make-fx-dart-widget
               fx-props#
               (assoc mx-props#
                 :kids (tiltontec.matrix.api/cFkids (list kids#))
                 :fx-gen (fn [me# ctx#]
                           (~flutter-variant me# ctx# fx-props# (.-new ~dart-class)
                             ~@flutter-variant-props))))))))))
;; todo unify these two
(defmacro deftag-constructor [mx-name dart-constructor flutter-variant & flutter-variant-props]
  `(defn ~mx-name [& vargs#]
     (dpx :deftag-fn-entry!! '~mx-name)
     (tiltontec.matrix.foundation/->CBFactory
       (fn [& [par#]]
         (dpx :deftag-fn-factory-called-par!!! (minfo par#))
         (let [[fx-props# mx-props# & kids#]
               (cond (nil? vargs#) nil
                 (not (map? (first vargs#))) (list* nil nil vargs#)
                 (map? (second vargs#)) vargs#
                 :else (list* (first vargs#) nil (rest vargs#)))]
           (binding [tiltontec.model.core/*md-parent* par#]
             (tiltontec.flutter-mx.core/make-fx-dart-widget
               fx-props#
               (assoc mx-props#
                 :kids kids#
                 :fx-gen (fn [me# ctx#]
                           (~flutter-variant me# ctx# fx-props# ~dart-constructor
                             ~@flutter-variant-props))))))))))

(deftag-hack column m/Column fx-gen-ks>prop-stateless {:prop :children})

(defmacro deftag-hack [mx-name dart-class flutter-variant & flutter-variant-props]
  `(defn ~mx-name [& vargs#]
     (tiltontec.matrix.foundation/->CBFactory
       (fn [& [par#]]
         (dpx :deftag-fn-factory-fn-called-with-par!!! (minfo par#))
         (let [[fx-props# mx-props# & kids#]
               (cond (nil? vargs#) nil
                 (not (map? (first vargs#))) (list* nil nil vargs#)
                 (map? (second vargs#)) vargs#
                 :else (list* (first vargs#) nil (rest vargs#)))]
           (dp :tagHACK-sees-kids '~mx-name (c-ref? (first kids#)))
           ;(dp :tagfn-sees-kids '~mx-name :cinfo (cinfo (first kids#)))
           ;(dp :tagfn-sees-kids '~mx-name :minfo (minfo (first kids#)))
           (binding [tiltontec.model.core/*md-parent* par#]
             (tiltontec.flutter-mx.core/make-fx-dart-widget
               fx-props#
               (assoc mx-props#
                 :kids (if (c-ref? (first kids#))
                         (first kids#)
                         (tiltontec.matrix.api/cFkids (list kids#)))
                 :fx-gen (fn [me# ctx#]
                           (~flutter-variant me# ctx# fx-props# (.-new ~dart-class)
                             ~@flutter-variant-props))))))))))

(deftag-fn stack m/Stack fx-gen-ks>prop-stateless {:prop :children})

(defn fx-gen-ks>prop-stateless [me ctx fx-props new-fn {:keys [prop]}]
  (fxf/ctx-check me ctx)
  (fxf/with-flutter-ref
    (let [^#/(List Widget) kids (mapv (partial tiltontec.flutter-mx.core/fx-render ctx)
                                  (tiltontec.matrix.api/mkids me))]
      (dp :ks->propless-kids prop (minfo me) (count kids) kids)
      (dp :ks->propless-kids-first prop :first (first kids))
      (Function.apply new-fn []
        (assoc (fx-props-resolved me ctx fx-props)
          (Symbol (name prop)) kids)))))

(defn fx-gen-k0>prop-stateful [me ctx fx-props new-fn {:keys [prop ticker?]}]
  (dp :k0->propful prop (minfo me) )
  ((if ticker? stateful-ticker-gen stateful-gen) me ctx
   (fn [me ctx]
     (let [k0 (tiltontec.flutter-mx.core/fx-resolve :k0-propful me ctx
                (first (tiltontec.matrix.api/mkids me)))]
       (dpx :k0->propful-k0 prop (minfo k0) k0)
       (when (sequential? k0)
         (dpx :seql!!!!-K0!!!! (minfo me) (map minfo (tiltontec.matrix.api/mkids me)))
         (dpx :k0->propful-k0-list-firstK prop (minfo (first k0))))
       (dpx :k0->propful-props prop (fx-props-resolved me ctx fx-props))
       (Function.apply new-fn []
         (merge (fx-props-resolved me ctx fx-props)
           (when k0 {(Symbol (name prop))
                     k0})))))))

(deftag-fn scaffold m/Scaffold fx-gen-k0>prop-stateful {:prop :body})

(defmacro deftags-plus [fx-gen options & pairs]
  `(do
     ~@(for [[fx# m#] pairs]
         `(tiltontec.flutter-mx.core/deftag-fn ~fx# ~m# ~fx-gen ~options))))

(deftags-plus fx-gen-k0>prop-stateful {:prop :home}
  (material-app m/MaterialApp))

(defn fx-gen-prop>p0-stateful [me ctx fx-props new-fn {:keys [prop]}]
  (dp :prop>p0-stateful-sees!!!! prop)
  (stateful-gen me ctx
    (fn [me ctx]
      (Function.apply new-fn
        [(tiltontec.flutter-mx.core/fx-resolve :ico-prop me ctx
           (tiltontec.matrix.api/mget me prop))]
        (fx-props-resolved me ctx (dissoc fx-props prop))))))

(deftag-fn icon m/Icon fx-gen-prop>p0-stateful {:prop :icon})

;(deftag tiltontec.flutter-mx.factory/prop-param1-childless-stateful icon m/Icon :icon)


;(deftag-fn sized-box m/SizedBox fx-gen-k0>prop-stateless {:prop :child})

(defn fx-gen-k0>prop-stateless [me ctx fx-props new-fn {:keys [prop]}]
  (fxf/ctx-check me ctx)
  (fxf/with-flutter-ref
    (let [k0 (tiltontec.flutter-mx.core/fx-resolve :key me ctx
               (first (tiltontec.matrix.api/mkids me)))]
      (Function.apply new-fn []
        (assoc (fx-props-resolved me ctx fx-props)
          (Symbol (name prop))
          k0)))))






(deftag-fn ticker-mode m/TickerMode fx-gen-k0>prop-stateful
  {:prop    :child
   :ticker? true})

(deftag tiltontec.flutter-mx.factory/konly-for-builder-stateless layout-kid-builder w/LayoutBuilder)

; --- old school
;(deftagleaf tiltontec.flutter-mx.factory/konly-param1-stateless text m/Text)

(deftag-fn text m/Text fx-gen-k0>p0-stateless)
(defn fx-gen-k0>p0-stateless [me ctx fx-props new-fn]
  (fxf/ctx-check me ctx)
  (fxf/with-flutter-ref
    (Function.apply new-fn
      [(fx-render-nth-kid me ctx 0)]
      (tiltontec.flutter-mx.core/fx-props-resolved me ctx fx-props))))

(defn fx-gen-childless-stateless [me ctx fx-props new-fn]
  (fxf/ctx-check me ctx)
  (fxf/with-flutter-ref
    (let [props (fx-props-resolved me ctx fx-props)]
      (dpx :fgen-cless-stless-props!!!!!!!!! props)
      (Function.apply new-fn [] props))))

#_(let [^#/(List Widget) kids (mapv (partial tiltontec.flutter-mx.core/fx-render ctx)
                                (tiltontec.matrix.api/mkids me))]
    (Function.apply new-fn []
      (assoc (fx-props-resolved me ctx fx-props)
        (Symbol (name prop)) kids)))

; (deftagnokids tiltontec.flutter-mx.factory/childless-stateless app-bar m/AppBar)
(deftags fx-gen-childless-stateless
  (app-bar m/AppBar)
  (data-table m/DataTable)
  ;;(icon m/Icon) todo needs :icon-prop
  ;(icon-button m/IconButton)
  ;(rounded-rectangle-border p/RoundedRectangleBorder)
  (list-tile m/ListTile)
  ;(layout-builder w/LayoutBuilder)
  (flutter-logo m/FlutterLogo)
  ;(navigation-rail-destination w/NavigationRailDestination) ;; todo flutter pub missing?
  ;(bottom-navigation-bar-item w/BottomNavigationBarItem)
  )

(defmacro deftags [fx-gen & pairs]
  `(do
     ~@(for [[fx# m#] pairs]
         `(tiltontec.flutter-mx.core/deftag-fn ~fx# ~m# ~fx-gen))))

;;; --- problems ------------------------------------------
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus+focus-node m.Focus/withExternalFocusNode)





(deftags-plus fx-gen-k0>prop-stateful {:prop :child}
  (hero m/Hero)
  (opacity! m/Opacity)
  (visibility! m/Visibility)
  (popup-menu-button m/PopupMenuButton)
  (popup-menu-item m/PopupMenuItem)
  (ink! m/Ink)
  (safe-area w/SafeArea)
  (dismissible w/Dismissible)
  (elevated-button m/ElevatedButton)
  (default-tab-controller m/DefaultTabController)
  (focus m/Focus)
  (focus-scope m/FocusScope)
  (text-button m/TextButton)
  ;(focus+focus-node m.Focus/withExternalFocusNode)
  (animated-builder m/AnimatedBuilder)
  (animated-container m/AnimatedContainer))

;(deftag tiltontec.flutter-mx.factory/k1-child-stateful text-button m/TextButton)

;(deftag tiltontec.flutter-mx.factory/k1-child-stateless single-child-scroll-view m/SingleChildScrollView)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless expanded m/Expanded)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless preferred-size m/PreferredSize)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless animated-opacity m/AnimatedOpacity)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless drawer-header m/DrawerHeader)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless floating-action-button m/FloatingActionButton)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless align m/Align)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless visibility m/Visibility)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful visibility! m/Visibility)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful popup-menu-button m/PopupMenuButton)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful popup-menu-item m/PopupMenuItem)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless opacity m/Opacity)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful opacity! m/Opacity)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless ink m/Ink)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful ink! m/Ink)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus m/Focus)
;
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful safe-area w/SafeArea)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful hero m/Hero)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateless gesture-detector m/GestureDetector)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful dismissible w/Dismissible)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful elevated-button m/ElevatedButton)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful default-tab-controller m/DefaultTabController)
;
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus m/Focus)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus-scope m/FocusScope)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus+focus-node m.Focus/withExternalFocusNode)
;(deftag tiltontec.flutter-mx.factory/childless-stateful elevated-button+icon m.ElevatedButton/icon)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful animated-builder m/AnimatedBuilder)
;(deftag tiltontec.flutter-mx.factory/k1-child-stateful animated-container m/AnimatedContainer)

(deftags-plus fx-gen-k0>prop-stateless {:prop :child}
  (sized-box m/SizedBox))

(deftags-plus fx-gen-k0>prop-stateless {:prop :child}
  (center m/Center)
  (material m/Material)
  (fade-transition m/FadeTransition)
  (listener w/Listener)
  (mouse-region w/MouseRegion)
  (ink-well m/InkWell)
  (ignore-pointer w/IgnorePointer)
  (absorb-pointer w/AbsorbPointer)
  (container m/Container)
  (card m/Card)
  (padding m/Padding)
  ;(place-holder w/PlaceHolder)
  (single-child-scroll-view m/SingleChildScrollView)
  (expanded m/Expanded)
  (preferred-size m/PreferredSize)
  (animated-opacity m/AnimatedOpacity)
  (drawer-header m/DrawerHeader)
  (floating-action-button m/FloatingActionButton)
  (align m/Align)
  (visibility m/Visibility)
  (opacity m/Opacity)
  (ink m/Ink)
  (gesture-detector m/GestureDetector)
  (drawer m/Drawer))


;(deftag tiltontec.flutter-mx.factory/children-stateless column m/Column)

(defmacro deftags-prop [fxgen & triples]
  `(do
     ~@(for [[fx dart-constructor prop] triples]
         `(tiltontec.flutter-mx.core/deftag-fn ~fx ~dart-constructor ~fxgen {:prop ~prop}))))

(deftags-prop fx-gen-ks>prop-stateless
  ; (column m/Column :children)
  ;; new NG (grid-view+count m.GridView/count :children)
  ;(stack m/Stack :children)
  (row m/Row :children)
  (wrap w/Wrap :children)
  (list-view m/ListView :children)
  (bottom-navigation-bar m/BottomNavigationBar :items)
  (navigation-rail m/NavigationRail :destinations))

;(deftag tiltontec.flutter-mx.factory/children-stateless stack m/Stack)

;(deftag tiltontec.flutter-mx.factory/kids->prop-stateless wrap w/Wrap :children)
(deftag tiltontec.flutter-mx.factory/kids->prop-stateless grid-view+count m.GridView/count :children)
;(deftag tiltontec.flutter-mx.factory/kids->prop-stateless bottom-navigation-bar m/BottomNavigationBar :items)
;(deftag tiltontec.flutter-mx.factory/kids->prop-stateful navigation-rail m/NavigationRail :destinations)
;(deftag tiltontec.flutter-mx.factory/children-stateless row m/Row)
;(deftag tiltontec.flutter-mx.factory/children-stateless list-view m/ListView)





