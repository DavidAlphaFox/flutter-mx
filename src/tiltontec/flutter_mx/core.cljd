(ns tiltontec.flutter-mx.core
  (:require
    ["dart:io" :as io]
    ["package:flutter/foundation.dart" :as fnd]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/widgets.dart" :as w
     :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
    ["package:flutter/painting.dart" :as p
     :refer [TextStyle]]
    [clojure.string :as str]
    [tiltontec.util.base :refer [dp dpx]]
    [tiltontec.util.core :refer [atom?]]
    [tiltontec.cell.base :refer [cinfo Model] :as cty]
    [tiltontec.cell.matrix :as cmx]
    [tiltontec.matrix.api :refer [rmap-setf rmap-meta-setf md-ref? make mget mkids mswap! cFkids] :as mx]
    [tiltontec.flutter-mx.factory :as mk]))

(deftype CBAsIs [value]
  ;; tells fx-resolve to leave mx value untouched
  ;; used originally so a FX callback (the builder for AnimatedBuilder) was not
  ;; treated as callback to MX to get the resolved value.
  :extends cmx/MXImplementer)

(deftype CBToResolve [value]
  ;; tells fx-resolve to call the mx value as a function of ctx and me.
  ;; used where app needs to see the Flutter context to decide a value
  :extends cmx/MXImplementer)

(defn fx-resolve
  ([me ctx widget-value]
   (fx-resolve :anon me ctx widget-value))
  ([prop me ctx widget-value]
   ;(dp :resolving prop (tiltontec.cell.base/minfo me) widget-value)
   (cond
     (nil? widget-value)
     (do
       ;(dp :exwid-sees-nil-widget-value!!!!!!!!!! prop (tiltontec.cell.base/minfo me))
       nil)

     (dart/is? widget-value CBAsIs)
     (do
       (dpx :fx-resolve-as-ising!!!!!!!!! prop (tiltontec.cell.base/minfo me) widget-value)
       (.-value ^CBAsIs widget-value))

     (dart/is? widget-value CBToResolve)
     (let [val ^CBToResolve widget-value]
       (dpx :fx-reso-calling-back!!!!!!! prop (tiltontec.cell.base/minfo me) widget-value)
       (let [cb-val (.-value val)]                          ;; ^CBToResolve widget-value)]
         (dpx :CBToResolveyields cb-val)
         (recur prop me ctx cb-val)))

     (dart/is? widget-value m/Widget)
     (do
       ;;(dp :widget-value-is-widget widget-value)
       widget-value)

     (fn? widget-value)
     (do                                                    ;; (dp :ew-sees-fn widget-value)
       (dpx :fxres-calling-fn?-blind widget-value)
       (let [v (widget-value me ctx)]
         (dpx :recuring-unwrapped-fn?-return-val v)
         (recur prop me ctx v)))

     (cty/c-ref? widget-value)
     (throw (Exception. (str "fx-resolve sees Cell! " (cinfo widget-value))))

     (cty/md-ref? widget-value)
     (do
       (let [fx (fx-render ctx widget-value)]
         (dpx :rfx-mdref-yielded-flutter fx)
         fx))

     (vector? widget-value)
     (do (dpx :BAM-vector!!!!!!! widget-value)
         (let [rzd (doall (map (partial fx-resolve me ctx) widget-value))]
           (dpx :vec-rez rzd)
           rzd))

     :default (do #_(dp :resolve-fall-thru-used prop (tiltontec.cell.base/minfo me) widget-value
                      (when (atom? widget-value)
                        (deref widget-value)))
                widget-value))))

(defn ctx-page-push [ctx fx-page-def]
  (.push (-> ctx m.Navigator/of)
    (#/(m/MaterialPageRoute Object)
      .builder (fn [_]
                 (fx-render ctx fx-page-def)))))

(defn ctx-page-pop [ctx]
  (.pop (-> ctx m.Navigator/of)))

(defn fx-render [ctx fx]
  (dpx :render-entry ctx (tiltontec.cell.base/minfo fx))
  (cond
    (not (md-ref? fx))
    (cond
      (cty/c-ref? fx) (throw (Exception. (str "fx-render passed Cell " (deref fx))))
      :default (do
                 (dpx :render-sees-not-md-ref?-passing-thru fx)
                 fx))
    :else (let [gen (mget fx :fx-gen)]
            (dpx :render-sees-gen!! gen)
            (assert gen "OBAD: fx-render of model finds no fx-gen: ")
            (let [g (gen fx ctx)]
              (dpx :render-genned!!! g)
              (rmap-meta-setf [:fx-dom fx] g)
              g))))

(defmacro in-my-context [[me-var ctx-var] & body]
  `(tiltontec.flutter-mx.core/->CBToResolve
     (fn [~me-var ~ctx-var]
       ~@body)))

(defmacro when-my-state [[state-var] & body]
  `(when-let [~state-var (tiltontec.flutter-mx.core/my-state)]
     ~@body))

(defn ctx-nav [ctx]
  (m.Navigator/of ctx))

(defmacro my-controller []
  `^m/AnimationController? (tiltontec.matrix.api/mget ~'me :controller))

(defn standard-text-value-controller [me]
  ;; usage: (fx/text {:controller (cF (standard-text-value-controller me))}....
  (let [c (m/TextEditingController
            .text (mx/mget me :value))]
    (.addListener c
      (fn []
        (cty/with-mx-isolation
          (mx/mset! me :value (.-text c)))))
    c))

(defmacro my-animation []
  ;; uncast since type will vary
  `(tiltontec.matrix.api/mget ~'me :animation))

(defmacro my-state []
  `(tiltontec.matrix.api/mget ~'me :fx$state))

;;; ---- sundry factories per Flutter variation on statefulness, child/children/content/body ------------------

(defmacro deftag [factory mx-name fx-class & [param-property]]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# & children#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just kids
             (list* nil nil vargs#)

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list* (first vargs#) nil (rest vargs#)))]
       `(~'~factory ~@(when ~param-property
                        [~param-property]) ~'~fx-class ~fx-props# ~mx-props# ~@children#))))

(deftag tiltontec.flutter-mx.factory/k1-child-stateless material m/Material)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless fade-transition m/FadeTransition)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless listener w/Listener)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless mouse-region w/MouseRegion)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless ink-well m/InkWell)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless ignore-pointer w/IgnorePointer)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless absorb-pointer w/AbsorbPointer)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless container m/Container)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless card m/Card)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless padding m/Padding)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless center m/Center)
(deftag tiltontec.flutter-mx.factory/k1-body-stateful scaffold m/Scaffold)

(defmacro deftagnokids [factory mx-name fx-class]
  `(defmacro ~mx-name [& vargs#]
     ;; todo user error checking
     (let [[fx-props# mx-props#] vargs#]
       `(~'~factory ~'~fx-class ~fx-props# ~mx-props#))))

(deftagnokids tiltontec.flutter-mx.factory/childless-stateless app-bar m/AppBar)
(deftag tiltontec.flutter-mx.factory/childless-stateless data-table m/DataTable)
(defmacro alert-dialog [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-content-stateless m/AlertDialog ~fx-props ~mx-props ~@children))

(deftag tiltontec.flutter-mx.factory/childless-stateful text-field m/TextField)
(deftag tiltontec.flutter-mx.factory/childless-stateful check-box m/Checkbox)

(deftag tiltontec.flutter-mx.factory/prop-param1-childless-stateful icon m/Icon :icon)

;; todo does snackbar still need this custom macro?
(deftag tiltontec.flutter-mx.factory/make-fx-snackbar snack-bar m/SnackBar)

;;; --- tagleaf --------------------------------------------

(defmacro deftagleaf [factory mx-name fx-class]
  `(defmacro ~mx-name [& vargs#]
     (let [[fx-props# mx-props# param-1#]
           (cond
             (nil? vargs#)
             nil

             (not (map? (first vargs#)))
             ; just param
             (list nil nil (first vargs#))

             (map? (second vargs#))
             ; full spec kids optional
             vargs#

             :else
             ;; first is fx props, no mx props, maybe kids
             (list (first vargs#) nil (last vargs#)))]
       `(~'~factory ~'~fx-class ~fx-props# ~mx-props# ~param-1#))))

(deftagleaf tiltontec.flutter-mx.factory/konly-param1-stateless text m/Text)
(deftagleaf tiltontec.flutter-mx.factory/konly-param1-stateful text! m/Text)

;;; --- childless stateless --------------------------------------------------------

(defmacro icon-button [& vargs]
  (let [[fx-props mx-props] vargs]
    `(tiltontec.flutter-mx.factory/childless-stateless m/IconButton ~fx-props ~mx-props)))

(deftag tiltontec.flutter-mx.factory/kids-for-builder list-view+separated m.ListView/separated)
(deftag tiltontec.flutter-mx.factory/kids-for-builder list-view+builder m.ListView/builder)

(deftag tiltontec.flutter-mx.factory/k1-home-stateful material-app m/MaterialApp)


(deftag tiltontec.flutter-mx.factory/childless-stateless rounded-rectangle-border p/RoundedRectangleBorder)
(deftag tiltontec.flutter-mx.factory/childless-stateless list-tile m/ListTile)
(deftag tiltontec.flutter-mx.factory/childless-stateless flutter-logo m/FlutterLogo)

(deftag tiltontec.flutter-mx.factory/k1-child-stateless single-child-scroll-view m/SingleChildScrollView)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless expanded m/Expanded)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless preferred-size m/PreferredSize)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless animated-opacity m/AnimatedOpacity)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless drawer-header m/DrawerHeader)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless floating-action-button m/FloatingActionButton)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless align m/Align)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless visibility m/Visibility)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful visibility! m/Visibility)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful popup-menu-button m/PopupMenuButton)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful popup-menu-item m/PopupMenuItem)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless opacity m/Opacity)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful opacity! m/Opacity)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful ink m/Ink)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus m/Focus)

(deftag tiltontec.flutter-mx.factory/k1-child-stateful hero m/Hero)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful gesture-detector m/GestureDetector)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful elevated-button m/ElevatedButton)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful default-tab-controller m/DefaultTabController)

(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus m/Focus)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus-scope m/FocusScope)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful text-button m/TextButton)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful focus+focus-node m.Focus/withExternalFocusNode)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful animated-builder m/AnimatedBuilder)
(deftag tiltontec.flutter-mx.factory/k1-child-stateful animated-container m/AnimatedContainer)

(deftag tiltontec.flutter-mx.factory/children-stateless stack m/Stack)
(deftag tiltontec.flutter-mx.factory/children-stateless column m/Column)
(deftag tiltontec.flutter-mx.factory/children-stateless row m/Row)
(deftag tiltontec.flutter-mx.factory/children-stateless list-view m/ListView)
(deftag tiltontec.flutter-mx.factory/children-stateless grid-view+count m.GridView/count)

(deftag tiltontec.flutter-mx.factory/k1-child-stateless drawer m/Drawer)
(deftag tiltontec.flutter-mx.factory/k1-child-stateless sized-box m/SizedBox)


;;; ---------------------------------------------------
;;; the dance between Flutter and MX is a bit intricate
;;; these macros try to hide the plumbing without being obscure.

(defmacro with-ctx+as-is [[me ctx] callback-fn]
  `(tiltontec.flutter-mx.core/in-my-context [~me ~ctx]
     (tiltontec.flutter-mx.core/->CBAsIs
       ~callback-fn)))

(defmacro as-is [callback-fn]
  `(tiltontec.flutter-mx.core/->CBAsIs
     ~callback-fn))

(defmacro as-dart-callback [[& cb-params] & body]
  `(tiltontec.flutter-mx.core/with-ctx+as-is [~'me ~'ctx]
     (fn [~@cb-params]
       (tiltontec.cell.base/with-mx-isolation
         ~@body))))

(defmacro my-app []
  ;; fasc "captures" 'me
  `(tiltontec.matrix.api/fasc :app))

;;; --- hot reload support --------------------

(defmacro wrap-stateless [widget-expression]
  `(reify :extends (w/StatelessWidget)
     (~'build [self# ctx#] ~widget-expression)))

(defmacro wrap-unique-key [widget-expression]
  `(reify :extends (m/StatefulWidget .key (foundation/UniqueKey))
     (~'createState [_#]
       (reify :extends w/State
         (~'build [_# ctx]
           ~widget-expression)))))

(defmacro run-app [widget-expression]
  `(m/runApp
     (wrap-stateless (wrap-unique-key ~widget-expression))))

;;; --- environment ------------------------

(defn is-web []
  fnd/kIsWeb)

(defn is-mobile []
  (and (not (is-web))
    ;; we cannot ask about Platform if on Web, so first ^^ we rule that out
    (or io/Platform.isAndroid
      io/Platform.isIOS
      io/Platform.isLinux)))

(defn is-desktop []
  (or io/Platform.isMacOS
    io/Platform.isWindows
    io/Platform.isLinux))

(defn platform-category []
  (cond
    (is-web) :web
    (is-desktop) :desktop
    (is-mobile) :mobile
    io/Platform.isFuchsia :fuchsia
    :else :unknown))