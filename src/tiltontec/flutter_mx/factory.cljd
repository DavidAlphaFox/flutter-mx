(ns tiltontec.flutter-mx.factory
  (:require [clojure.string :as str]
            ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.matrix.base :refer [wtrx dprn dp dpx]]
            [tiltontec.matrix.util
             :refer [atom? rmap-set! rmap-meta-set! set-ify difference]]
            [tiltontec.matrix.foundation :refer [mx-type PObserver observe]]

            [tiltontec.model.peek :refer [minfo Model]]
            [tiltontec.cell.base :refer [cinfo c-model] :as cty]
            [tiltontec.matrix.api
             :refer [md-quiesce! md-quiesce-if-owned! rmap-meta-set! mref? make mget mget? mkids mswap! cI cFkids]
             :as mx]
            [clojure.string :as str]))

;;; --- Flutter refs of fx models -----------------------------

(defn call-with-flutter-ref [me factory]
  (let [ref (factory)]
    ;; (dp :cwref!!!!!! ref)
    (rmap-meta-set! [:fx$flutter-ref me] ref)
    ref))

(defmacro with-flutter-ref [& body]
  `(call-with-flutter-ref me (fn [] ~@body)))

(defn flutter-ref [me]
  (:fx$flutter-ref (meta me)))

;;; --- ctx tracking ----------------------

(defn record-fx$ctx [me ctx]
  (mx/rmap-meta-set! [:fx$ctx me] ctx))

(defn ctx-check [fx-class me ctx]
  (cond
    (nil? (fx-ctx me))
    (do
      ;(dp :ctx-check-NIL (str "<<" fx-class ">> NIL so adopting build ctx: <" ctx))
      (record-fx$ctx me ctx))

    (= ctx (fx-ctx me))
    (dpx :ctx-check-OK! (str "<<" fx-class ">>  both ctx: <" ctx ">"))

    :else (do
            (dpx :ctx-match-fail-being-corrected (str "<<" fx-class ">> adopting build ctx: <" ctx "> not= cache: <" (fx-ctx me) ">"))
            (record-fx$ctx me ctx))))

(defn fx-ctx [me]
  (:fx$ctx (meta me)))

;;; --- state tracking -----------------

(defn record-fx$state [me state]
  (dpx :recording-state (tiltontec.cell.base/minfo me) cty/*defer-changes* cty/*within-integrity*)
  (mx/with-cc :reco-state
    (mx/mset! me :fx$state state)))

(defn fx-state-nearest [me]
  (dpx :state-nearest-entry (tiltontec.cell.base/minfo me))
  (when me
    (or ^State? (mget? me :fx$state)
      ;; todo without dependency? Complete rethink?
      (when-let [st (fx-state-nearest (mx/mpar))]
        (dpx :got-nearest-st-JIT st (tiltontec.cell.base/minfo me))
        ;; todo memoize instead
        ;; (mx/mset! me :fx$state st)                            ;; for next time
        st))))

;;; --- make fx ------------------------------------------

(defn make-fx [mx-type fx-props custom-props cFkids-form]
  (dp :make-fx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    :fx$state (cI nil)
    ;; todo move ^^^ and next to meta
    :fx$ikeys (remove #{:fx-class :fx-gen :name :key}
                (concat (keys fx-props) (keys custom-props)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(defn state-set
  ([^State state]
   (state-set state nil))
  ([^State state me]
   (if (.-mounted state)
     (do (dpx :setting-state state (cty/minfo me))
         (.setState state (fn [] (do))))
     #_(dp :NOT_SETTING_STATE_NOT_MOUNTED state (cty/minfo me)))))

(defn md-quiesce-lost! [cell new-value prior-value]
  ;; sloppy
  (when (mx/md-quiesce-feature?)
    (when prior-value
      (cond
        (mref? prior-value) (wtrx [0 999 nil :mdq-lost-solo!!!!!!! (cinfo cell) :prior (minfo prior-value)]
                              (md-quiesce-if-owned! (c-model cell) prior-value))
        (coll? new-value) (cond
                            (coll? prior-value)
                            (let [lostks (difference (set prior-value) (set new-value))]
                              (when-not (empty? lostks)
                                (doseq [k lostks]
                                  (when (mref? k)
                                    (wtrx [0 999 nil :mdq-lost-coll-diff (cinfo cell) :lostk (minfo k)]
                                      (md-quiesce-if-owned! (c-model cell) k))))))
                            :else (when (mref? prior-value)
                                    (when-not (some #{prior-value} new-value)
                                      (wtrx [0 999 nil :mdq-solo-not-in-coll (cinfo cell) :solo (minfo prior-value)]
                                        (md-quiesce-if-owned! (c-model cell) prior-value)))))))))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this prop me new-value prior-value cell]
    (dpx :fxdw-obs prop)
    (when-not (some #{prop} [:parent :name :mx-type :on-quiesce :initState :fx-class :cells-flushed
                             :fx$state :fx$ikeys :fx$notifier :fx$observer])
      (when-not (= prior-value cty/unbound)
        (dpx :FXDartWidget-observing!!! prop new-value prior-value (minfo me) (cinfo cell))
        (dpx :FXDartWidget-observing-md!!! prop (minfo me) #_#_:deref @me)
        (dpx :FXDartWidget-observing-cell!!! prop (cinfo cell) @cell)
        (when-let [noter (mget? me :fx$notifier)]
          (.notifyListeners ^m/ChangeNotifier noter))
        (md-quiesce-lost! cell new-value prior-value)

        (if-let [^State state (mget? me :fx$state)]
          (do (dpx :FXDWO-settingimmediatestate prop new-value #_(meta me) (cty/minfo me) (.-mounted state))
              (state-set state me))
          (if-let [^State state (fx-state-nearest me)]
            (do
              (dpx :FXDWO-obs-FXD-uses-nearest-state state (.-mounted state)
                :prop prop :new-prio new-value prior-value)
              (state-set state me))
            (dpx :FXDWO-NOT-setting-state-on-utterly-stateless prop new-value (cty/minfo me)
              #_@me)))))))

;(deftype FXDartWidgetFamily []
;  :extends FXDartWidget
;  PObserver
;  (observe [this prop me new-value prior-value cell]
;    (dp :FXDartWidgetFamily-obs!!!! prop)
;    (FXDartWidget/observe prop me new-value prior-value cell)))

;;; --- the maker macros ---------------------------------------------------

(defmacro make-fx-snackbar [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (~fx-class #_m/SnackBar
                                     ~@(let [kvs (for [[k# _#] fx-props]
                                                   [(symbol (str "." (name k#)))
                                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                       (tiltontec.model.core/mget me ~k#))])]
                                         (apply concat kvs)))
                     ^#/(w/State ~fx-class #_m/SnackBar)
                     (~'createState [_#]
                       (reify :extends #/(w/State #_~fx-class m/SnackBar)
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget? me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (with-flutter-ref
                             (~fx-class                     ;; /SnackBar
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       nil)))

(defmacro k1-child-stateful [fx-class fx-props mx-props & [child]]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin ;; todo make optional
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget? me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (let [k1# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                       (first (tiltontec.model.core/mkids me)))]
                             (with-flutter-ref
                               (~fx-class
                                 .child k1#
                                 ~@(let [kvs (for [[k# _#] fx-props]
                                               [(symbol (str "." (name k#)))
                                                `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                   (tiltontec.model.core/mget me ~k#))])]
                                     (apply concat kvs)))))))))))
       (tiltontec.model.core/cFkids ~child))))

(defmacro k1-child-stateless [fx-class fx-props mx-props & [child]]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       .child (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                (first (tiltontec.model.core/mkids me)))
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.model.core/mget me ~k#))])]
                           (apply concat kvs))))))
       (tiltontec.model.core/cFkids ~child))))

(defmacro k1-content-stateless [fx-class fx-props mx-props & [child]]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       .content (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                  (first (tiltontec.model.core/mkids me)))
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.model.core/mget me ~k#))])]
                           (apply concat kvs))))))
       (tiltontec.model.core/cFkids ~child))))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       .children (mapv (partial tiltontec.flutter-mx.core/fx-render ctx)
                                   (tiltontec.matrix.api/mkids me))
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.matrix.api/mget me ~k#)])]
                           (apply concat kvs))))))
       (tiltontec.matrix.api/cFkids ~@children))))

(defmacro kids->prop-stateless [target-prop-name fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       ~(symbol (str "." (name target-prop-name)))
                       (mapv (partial tiltontec.flutter-mx.core/fx-render ctx)
                         (tiltontec.matrix.api/mkids me))
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.matrix.api/mget me ~k#))]
                                     #_[(symbol (str "." (name k#)))
                                        `(tiltontec.matrix.api/mget me ~k#)])]
                           (apply concat kvs))))))
       (tiltontec.matrix.api/cFkids ~@children))))

(defmacro kids->prop-stateful [target-prop-name fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.matrix.api/mget? me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (with-flutter-ref
                             (~fx-class
                               ~(symbol (str "." (name target-prop-name)))
                               (mapv (partial tiltontec.flutter-mx.core/fx-render ctx)
                                 (tiltontec.matrix.api/mkids me))
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.matrix.api/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.matrix.api/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.matrix.api/mget me ~k#))])]
                           (apply concat kvs))))))
       nil)))

(defmacro konly-param1-stateless [fx-class fx-props mx-props & [only-kid]]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :_param-1 (tiltontec.cell.core/cF ~only-kid)
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class (tiltontec.flutter-mx.core/fx-render ctx
                                  (tiltontec.matrix.api/mget me :_param-1))
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.matrix.api/mget me ~k#))])]
                           (apply concat kvs))))))
       ;; todo teach make-fx it does not need children
       nil)))

(defmacro konly-param1-stateful [fx-class fx-props mx-props & [only-kid]]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :_param-1 (tiltontec.cell.core/cF ~only-kid)
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.matrix.api/mget? me :initState)]
                             (dpx :calling-initstate-of (tiltontec.cell.base/minfo me))
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (with-flutter-ref
                             (~fx-class (tiltontec.flutter-mx.core/fx-render ctx
                                          (tiltontec.matrix.api/mget me :_param-1))
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.matrix.api/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       nil)))

(defmacro childless-stateful [fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           #_(when-let [init (mget? me :initState)]
                               (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (with-flutter-ref
                             (~fx-class
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.matrix.api/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       nil)))

(defmacro prop-param1-childless-stateful [p1-prop-name fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.matrix.api/mget? me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (with-flutter-ref
                             (~fx-class (tiltontec.flutter-mx.core/fx-resolve :ico-prop me ctx
                                          (tiltontec.matrix.api/mget me ~p1-prop-name))
                               ~@(let [kvs (for [[k# _#] (dissoc fx-props p1-prop-name)]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.matrix.api/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       nil)))

(defmacro k1-body-stateful [fx-class fx-props mx-props & [body]]
  (let []
    (assert (not (contains? fx-props :body))
      (str "For " fx-class ", provide the body as (the only) child widget, not as a parameter."))
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.matrix.api/mget? me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (let [bod# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.matrix.api/mkids me)))]
                             (with-flutter-ref
                               (~fx-class
                                 .body bod#
                                 ~@(let [kvs (for [[k# _#] fx-props]
                                               [(symbol (str "." (name k#)))
                                                `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                   (tiltontec.matrix.api/mget me ~k#))])]
                                     (apply concat kvs)))))))))))
       (tiltontec.matrix.api/cFkids ~body))))


(defmacro k1-home-stateful [fx-class fx-props mx-props & [home]]
  (let []
    ;(assert (not (contains? fx-props :home)) "k1-home-stateful passed :home param in FX props, but expects :home as first child")
    ;(assert (not (contains? mx-props :home)) "k1-home-stateful sees :home in MX props, but expects :home as first child")
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.matrix.api/mget? me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.matrix.api/mget? me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (tiltontec.flutter-mx.factory/ctx-check (quote ~fx-class) me ctx)
                           (let [bod# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.matrix.api/mkids me)))]
                             (with-flutter-ref
                               (~fx-class
                                 .home bod#
                                 ~@(let [kvs (for [[k# _#] fx-props]
                                               [(symbol (str "." (name k#))) ;;k#
                                                `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                   (tiltontec.matrix.api/mget me ~k#))])]
                                     (apply concat kvs)))))))))))
       (tiltontec.matrix.api/cFkids ~home))))

(defmacro prop-param1-childless-stateless [prop fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class (tiltontec.flutter-mx.core/fx-resolve ~prop me ctx
                                  (tiltontec.matrix.api/mget me ~prop))
                       ~@(let [kvs (for [[k# _#] (dissoc fx-props prop)]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.matrix.api/mget me ~k#))])]
                           (apply concat kvs))))))
       nil)))

;;; --- kids for builder ------------------------------------------------------

(defmacro kids-for-builder [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (with-flutter-ref
                     (~fx-class
                       ~@(let [kvs (for [[k# _#] fx-props]
                                     [(symbol (str "." (name k#)))
                                      `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                         (tiltontec.matrix.api/mget me ~k#))])]
                           (apply concat kvs))))))
       (tiltontec.matrix.api/cFkids ~@children))))

;;; -------------------------------------------------------------

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m.SizedBox/expand ~fx-props ~mx-props ~@children))

;;; --- next two not yet confirmed in practice
(defmacro positioned [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m/Positioned ~fx-props ~mx-props ~@children))
(defmacro transorm+rotate-ful [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m.Transform/rotate ~fx-props ~mx-props ~@children))

