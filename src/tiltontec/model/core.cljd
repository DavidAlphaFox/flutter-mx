(ns tiltontec.model.core
  (:require
    [clojure.string :as str]
    [tiltontec.util.base
     :refer [trx wtrx dprn dp dpx prog1 dprn dp dpx *trx?* *trdeep* def-rmap-props]]
    [tiltontec.util.core
     :refer [difference atom? err rmap-setf rmap-meta-setf pln]]
    [tiltontec.cell.matrix :refer [PObserver observe]  :as mx]
    [tiltontec.cell.base
     :refer [without-c-dependency
             cells-init c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input? mx-type minfo
             c-model mdead? c-valid? c-useds c-ref? md-ref?
             c-state +pulse+ c-pulse-observed
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers
             unlink-from-callers *causation*
             c-synaptic? cinfo
             c-pulse c-pulse-last-changed c-ephemeral? c-prop c-props
             *depender* *not-to-be*
             *c-prop-depth* md-prop-owning? c-lazy] :as cty]
    [tiltontec.cell.integrity :refer [with-integrity]]
    [tiltontec.cell.observer :refer [observe observer-register fn-obs]]
    [tiltontec.cell.evaluate :refer [not-to-be not-to-be-self]]
    [tiltontec.cell.core
     :refer [cF cF+ c-reset-next! cFonce cFn cI creset! make-cell]]
    [tiltontec.cell.evaluate :refer [cget c-awaken not-to-be]]
    [tiltontec.model.base :refer [md-cell md-install-cell md-awaken *md-host*]]))

(defmacro pme [& mas]
  `(when true                                               ;;  (= :login (:name (deref ~'me)))
     (dp (mx-type ~'me)
       (:tag (deref ~'me))
       (:name (deref ~'me)) ~@mas)))

(def matrix
  "Each app will populate this with the root of its application matrix."
  (atom nil))

(defn md-name [me]
  (:name @me))

(defn mname [me]
  (:name @me))

(defn md-get [me prop]
  ;; (trx :md-get prop me)
  (assert me (str "md-get passed nil for me accessing prop: " prop))
  (assert (cty/md-ref? me) (str "md-get passed non-md-ref? for me accessing prop: " prop " :me " @me))
  (if-let [c (md-cell me prop)]
    (cget c)
    (prop @me)))

(defmacro def-mx-props [reader-prefix & slots]
  `(do
     ~@(map (fn [prop#]
              `(defn ~(symbol (str (or reader-prefix "")
                                prop#))
                 [~'ref]
                 (tiltontec.model.core/mget ~'ref ~(keyword prop#)))) slots)))

(defn mgetx [me prop]
  (assert me (str "md-get passed nil for me accessing prop: " prop))
  (dp :MGX-getting prop :from (minfo me) :me me :nil (nil? me))
  (when (atom? me)
    (dp :me-is-atom!)
    (if-let [c (md-cell me prop)]
      (do (dp :got-cell! (cinfo c))
          (when (atom? c)
            (dp :got-c-atom!! (deref c)))
          (cget c))
      (prop @me))))

;(defn mget [me prop]
;  (dpx :mget-entry prop :of (when me (minfo me)))
;  (md-get me prop))

(defn mget [me prop]
  (assert me (str "mget passed nil for me accessing prop: " prop))
  (assert (cty/md-ref? me) (str "mget passed non-model for me accessing prop: " prop ": " me))
  (if (not (contains? @me prop))
    (do                                                     ;(prn :mget>nosuchprop!!! prop :me @me)
      ;(dp :mget prop (minfo me))
      (throw (Exception. (str  "MXAPI_ILLEGAL_GET_NO_SUCH_prop> mget was attempted on non-existent prop \"" prop "\"."
        "\n...> FYI: known props are" (keys @me)
        "\n...> FYI: use mget? if prop might not exist.")))
      nil)
    (let [dbg? false]
      (when dbg?
        (prn :mget-sees-c? (cinfo (md-cell me prop)))
        (prn :me-prop (prop @me)))
      (if-let [c (md-cell me prop)]
        (cget c)
        (prop @me)))))

(defn mget?
  ([me prop]
   (mget? me prop nil))
  ([me prop alt-val]
   (assert me (str "mget passed nil for me accessing prop: " prop))
   (assert (cty/md-ref? me) (str "mget passed non-model for me accessing prop: " prop ": " me))
   (if (contains? @me prop)
     (mget me prop)
     alt-val)))

(def ^:dynamic *md-parent* nil)

(defmacro with-par [meform & body]
  `(binding [tiltontec.model.core/*md-parent* ~meform]
     ~@body))

;;; --- accessors ----

(defn md-reset! [me prop new-value]
  ;; (dp :md-reset prop )
  (assert me "no me passed to md-reset!")
  (assert (cty/md-ref? me) (str "mset me not md-ref but: " (minfo me) "," prop))
  (if-let [c (md-cell me prop)]
    (do
      (dpx :md-reset-gotc!!! @c)
      (creset! c new-value))
    (do
      (if (contains? @me prop)
        (err str
          "MXAPI_ILLEGAL_MUTATE_NONCELL> invalid mswap!/mset!/md-reset! to the property '" prop "', which is not mediated by any cell.\n"
          "...> if such post-make mutation is in fact required, wrap the initial argument to model.core/make in 'cI'. eg: (make... :answer (cI 42)).\n"
          "...> look for MXAPI_ILLEGAL_MUTATE_NONCELL in the Errors documentation for  more details.\n"
          "...> FYI: intended new value is [" new-value "]; initial value was [" (get @me prop :no-such-prop) "].\n"
          "...> FYI: instance is of type " (mx-type me) ".\n"
          "...> FYI: full instance is " @me "\n"
          "...> FYI: instance meta is " (meta me) "\n.")
        (err str
          "MXAPI_ILLEGAL_MUTATE_NO_SUCH_SLOT> mswap! was attempted on non-existent prop \"" prop "\".\n"
          "...> FYI: known non-internal slots are" (keys (dissoc @me :host :parent :fx$ikeys :fx$state :fx-class :fx-gen)))))))

(defn mset! [me prop new-value]
  (assert (cty/md-ref? me) (str "mset me not md-ref but: " (minfo me) "," prop))
  (md-reset! me prop new-value))

(defn mswap! [me prop swap-fn & swap-fn-args]
  (if (contains? @me prop)
    (mset! me prop (apply swap-fn (mget me prop) swap-fn-args))
    (err str
      "MXAPI_ILLEGAL_MUTATE_NO_SUCH_SLOT> mswap! was attempted on non-existent prop \"" prop "\".\n"
      "...> FYI: known non-internal slots are" (keys (dissoc @me :host :parent :fx$ikeys :fx$state :fx-class :fx-gen)))))

(defn make [& arg-list]
  ;;(prn :make-entry (count arg-list) (first arg-list))
  (cond
    (odd? (count arg-list)) (apply make ::cty/type arg-list)
    :else
    (do
      (let [iargs (apply hash-map arg-list)
            me (atom
                 (let [mdmap (merge {:parent *md-parent*
                                     :host *md-host*}
                               (->> arg-list
                                 (partition 2)
                                 (filter (fn [[prop v]]
                                           (not (= ::cty/type prop))))
                                 (map (fn [[k v]]
                                        (vector k (if (c-ref? v)
                                                    unbound
                                                    v))))
                                 (into {})))]
                   ;; (prn :mdmap-keys (keys mdmap))
                   mdmap)
                 :meta {:state   :nascent
                        ;; todo pull more fx$s into meta
                        ::cty/type (::cty/type iargs (cty/Model.))})]
        (assert (meta me))
        #_(when-not (:parent @me)
            (dp :no-par!!!! me))
        (rmap-meta-setf
          [:cz me]
          (->> arg-list
            (partition 2)
            (filter (fn [[prop v]]
                      (when-not (some #{prop} [:parent :name ::cty/type :not-to-be
                                               :fx$ikeys :fx$notifier :fx$observer])
                        (md-install-cell me prop v))))
            (map vec)
            (into {})))

        ;(prn :meta-cz? (meta me))

        (with-integrity (:awaken me)
          (md-awaken me)
          #_(dp :md-awaken-complete))
        me))))

;;; --- family ------------------------------------

(defn md-kids [me] (md-get me :kids))
(defn mkids [me] (md-get me :kids))
(defn mx-par [me] (md-get me :parent))
(defn mpar [me] (md-get me :parent))

(defn fm-not-to-be [me]
  (doseq [k (md-kids me)]
    (when (md-ref? k)
      ;; ^^^ mxWeb allows string children
      (prn :fm-n2b-kid!! @k)
      (not-to-be k))))

(defn fm-kids-observe [prop-name me newk oldk c]
  (when-not (= oldk unbound)
    (let [lostks (difference (set oldk) (set newk))]
      (when-not (empty? lostks)
        (doseq [k lostks]
          (not-to-be k))))))

(deftype Family []
  :extends cty/Model
  PObserver
  (observe [this prop me new-value prior-value cell]
    (when (= prop :kids)
      (fm-kids-observe prop me new-value prior-value cell))))

(defmacro mpar [& [me]]
  (let [me (or me 'me)]
    `(:parent @~me)))

(defn make-family [& arg-list]
  (cond
    ;; if arg-list is odd we assume they started with a Family subtype
    ;; used mostly for regression tests
    (odd? (count arg-list)) (apply make-family ::cty/type arg-list)
    :else
    (apply make
      ::cty/type (Family.)
      :not-to-be fm-not-to-be
      arg-list)))

;;; -------------------------------------------------------------------------
;;;      Navigation
;;;
(def ^:dynamic *fn-navig-trace* nil)

(defn fm-tracing? [key]
  (some #{key :all} *fn-navig-trace*))

(defn fmdp [key & mas]
  (when (fm-tracing? key)
    (apply dp mas)))

(defmacro navdbg [option & body]
  `(let [options# ~option]
     (binding [*fn-navig-trace* (if (sequential? options#)
                                  options# (vector options#))]
       (do ~@body))))

(defn fm-navig-eq? [seek poss]
  (assert (or (atom? poss) (string? poss))
    (str "poss not ref " (string? poss)))
  (fmdp :eq :fm-navig-eq? (fn? seek) (keyword? seek) (minfo poss))
  (cond
    (not (atom? poss))                                      ;; string child of html label?
    (do (dp :fm-navig-eq?-bail-not-ref poss)
        false)

    (fn? seek) (do                                          ;; (dp :trying-fn)
                 (seek poss))
    (keyword? seek) (do
                      ;; (trx :fm-navig-eq?sees seek (:name @poss) (mx-type poss))
                      (or (= seek (:name @poss))
                        ;; search for types will have to be converted to function tests
                        ;; with explicit types coded
                        #_(= (mx-type poss) seek)))
    :else (do (trx :fm-navig-eq?-else-pplain=! seek)
              (= seek poss))))

(defn fm-ascendant [what where & options]
  (when (and where what)
    (let [options (merge {:me? false :wocd? true}
                    (apply hash-map options))]
      (binding [*depender* (if (:wocd? options) nil *depender*)]
        (or (and (:me? options)
              (fm-navig-eq? what where)
              where)

          (if-let [par (:parent @where)]
            (fm-ascendant what par
              :me? true)
            (when-let [owner (:owner @where)]
              (fm-ascendant what owner
                :me? true)))

          (when (:must? options)
            (err :fm-ascendant-must-failed what where options)))))))

(defn nextsib [mx]
  (without-c-dependency
    (loop [sibs (md-kids (mx-par mx))]
      (when sibs
        (if (= mx (first sibs))
          (second sibs)
          (recur (rest sibs)))))))

(defn prevsib [mx]
  (without-c-dependency
    (loop [sibs (md-kids (mx-par mx))]
      (when sibs
        (cond
          (= mx (first sibs)) nil
          (= mx (second sibs)) (first sibs)
          :default
          (recur (rest sibs)))))))

(defn fm-navig-hosted? [what where prop]
  (assert (md-ref? where))
  (fmdp :host :navhosted-entry prop what (minfo where))
  (when-let [it (mget where prop)]
    (fmdp :host :navhosted-gotit prop what (minfo where))
    (cond
      (md-ref? it) (do (fmdp :host :checking-hosted!! prop (minfo it))
                       (fm-navig what it
                         :me? true :inside? true :up? false))
      (sequential? it) (do (fmdp :checking-hosted-seq!! (map minfo it))
                           (some (fn [it]
                                   (fm-navig what it
                                     :me? true :inside? true :up? false)) it))
      :else (when it (dp :ignoring-prop-val it)))))

(defn fm-navig [what where & options]
  (do                                                       ;; wtrx (0 100 :fm-navig-entry *trdeep* options (if (md-ref? where) (minfo where)))
    (fmdp :all :navig-options options)
    (cond
      (> *trdeep* 16)
      (do (dprn :NAVIG-BAILING-at-depth *trdeep*)
          (when (:must? options)
            (throw (Exception. (str/join "-" [:fm-navig-must-failed what where options])))))

      (and where what (atom? where))
      (let [options (merge {:me? false, :inside? false, :up? true, :wocd? true ;; without-c-dependency
                            } (apply hash-map options))]
        ;;(dp :fm-navig-opts options)
        (binding [*depender* (if (:wocd? options) nil *depender*)]
          (when (md-ref? where)
            (or (when (:me? options)
                  (fmdp :me :nav-sees-me?-true (minfo where))
                  (if (fm-navig-eq? what where)
                    where
                    (some (partial fm-navig-hosted? what where)
                      ;; todo rework how delegates access full mx
                      (keep #{:persistentFooterButtons
                              :floatingActionButton} (:fx$ikeys @where)))))

              (and (:inside? options)
                (if-let [kids (md-get where :kids)]
                  (do
                    (if-let [netkids (remove #{(:skip options)} kids)]
                      (do
                        (some #(fm-navig what %
                                 :me? true
                                 :inside? true
                                 :up? false) netkids))
                      (trx nil :no-net-kids)))
                  (trx nil :inside-no-kids (:name @where))))

              (and (:up? options)
                (if-let [par (:parent @where)]
                  (do
                    (fmdp :up :navig-uppar! (minfo par))
                    (fm-navig what par
                      :up? true
                      :me? true
                      :skip where
                      :inside? true))
                  (if-let [host (:host @where)]
                    (do
                      (fmdp :up :navig-uphost! (minfo host))
                      (fm-navig what host
                        :up? true
                        :me? true
                        :skip where
                        :inside? true))
                    (do (dpx :no-up-from (minfo where))
                        false))))

              (when (:must? options)
                (throw (Exception. (str/join "-" [:fm-navig-must-failed what where options]))))))))
      :else (do (dpx :NAVIG-falls-out nil)
                (when (:must? options)
                  (throw (Exception. "fall out navig"))
                  (throw (Exception. (str/join "-" [:fm-navig-must-failed what where options]))))
                nil))))

(defn fm! [what where]
  (fm-navig what where :me? false :inside? true :must? true :up? true))

(defmacro mdv! [what prop & [me]]
  (let [me (or me 'me)]
    `(md-get (tiltontec.model.core/fm! ~what ~me) ~prop)))

(defn mxu-find-name
  "Search up the matrix from node 'where' looking for element with given name"
  [where name]
  (fm-navig #(= name (md-get % :name))
    where :me? false :up? true :inside? false))

;(md/fm-navig :z-counter me
;  :me? false
;  :inside? false :must? false :up? true)

(defmacro my-value []
  `(mget ~'me :value))

(defmacro fmu [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (fm-navig #(= name# (md-get % :name))
         ~me-ref :me? false :up? true :inside? false))))

(defmacro fmuinc [name & [me]]
  ;; fmu "inclusive" of the starting node "me"
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (fm-navig #(= name# (md-get % :name))
         ~me-ref :me? true :up? true :inside? false))))

(defmacro fasc "Search strictly up"
  [name & [me]]
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (tiltontec.model.core/fm-ascendant name# ~me-ref))))

(defmacro fm* [name & [me]]
  ;; this needs to look for more than just name
  (let [me-ref (or me 'me)]
    `(let [name# ~name]
       (tiltontec.model.core/fmdp :fm*-start-after name#)
       (tiltontec.model.core/fm-navig #(do
                    #_ (tiltontec.model.core/fmdp :fm*-sees (= name# (tiltontec.model.core/md-get % :name))
                      (tiltontec.cell.base/minfo %))
                    (= name# (md-get % :name)))
         ~me-ref :me? true :up? true :inside? true))))

(defmacro fm*val [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (tiltontec.model.core/fm-navig (fn [node#] (= ~name (tiltontec.model.core/md-get node# :name)))
                    ~me-ref :me? true :up? true :inside? true)]
       (assert other# (str "fm*val did not find other named " ~name " seeking property " ~prop))
       (tiltontec.model.core/mget other# ~prop))))

(defmacro fmuv [prop name & [me]]
  (let [me-ref (or me 'me)]
    `(let [other# (fm-navig (fn [node#] (= ~name (md-get node# :name)))
                    ~me-ref :me? false :up? true :inside? false)]
       (assert other# (str "fmuv> did not find other named " ~name " seeking property " ~prop))
       (mget other# ~prop))))

(defmacro fmuval [name & [prop me]]
  (let [prop (or prop ':value)
        me-ref (or me 'me)]
    `(let [other# (fm-navig (fn [node#] (= ~name (md-get node# :name)))
                    ~me-ref :me? false :up? true :inside? false)]
       (assert other# (str "fmuv> did not find other named " ~name " seeking property " ~prop))
       (mget other# ~prop))))

(defn mxu-find-id
  "Search up the matrix from node 'where' looking for element with given id"
  [where id]
  (fm-navig #(= id (md-get % :id))
    where :me? false :up? true :inside? false))

(defn mxu-find-type
  "Search matrix ascendants only from node 'me' for first with given tag"
  [me explicit=type-test]
  (assert me)
  ;; explicit-type-test will have to be like (fn [me] (dart/is? (mx-type me) TScaffold))
  (fm-ascendant explicit=type-test me))

(defn fmi-w-class [where class]
  (fm-navig #(when (atom? %)
               (= class (md-get % :class)))
    where :inside? true :up? false))

(defn mxi-find
  "Search matrix below node 'where' for node with property and value"
  [where property value]
  (fm-navig #(when (atom? %)
               (= value (md-get % property)))
    where :inside? true :up? false))

(defn fmo [me id-name]
  (or (mxu-find-name me id-name)
    (mxu-find-id me id-name)
    (throw (str "fmo> not id or name " id-name))))

(defn fmov
  ([me id-name]
   (fmov me id-name :value))
  ([me id-name prop-name]
   (when-let [mx (fmo me id-name)]
     (if (contains? @mx prop-name)
       (mget mx prop-name)
       (throw (str "fmov> " id-name " lacks " prop-name " property"))))))

;;; --- ancestry ----
(defn fm-ancestry [me]
  (assert (md-ref? me))
  (when-let [par (mx-par me)]
    (conj (fm-ancestry par) par)))

(defmacro the-kids [& tree]
  `(binding [*md-parent* ~'me]
     (assert *md-parent*)
     ;;(dp :bingo-par (atom? *md-parent*))
     (doall (remove nil? (flatten (list ~@tree))))))

(defmacro cFkids [& tree]
  `(cF (the-kids ~@tree)))

(defn kid-values-kids [me x-kids]
  (let [k-key (md-get me :kid-key)
        _ (assert k-key)
        x-kids (when (not= x-kids unbound)
                 (into {} (for [k x-kids]
                            [(k-key k) k])))
        k-factory (md-get me :kid-factory)]
    (assert (and k-factory))

    (doall
      (map-indexed
        (fn [idx kid-value]
          (or (and x-kids (get x-kids kid-value))
            (binding [*md-parent* me]
              (k-factory me kid-value))))
        (md-get me :kid-values)))))

