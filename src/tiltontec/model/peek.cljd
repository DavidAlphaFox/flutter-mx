(ns tiltontec.model.peek
  (:require
    [clojure.string :as str]
    [tiltontec.matrix.util :refer [rmap-set!]]
    [tiltontec.matrix.foundation :refer [MXImplementer PObserver mx-type]]))

(defn dp [& bits]
  (when-not false ;; (nil? (first bits))
    (dart:core/print (str/join " - " (list* :DP
                                       (map #(if (nil? %) :NIL %) bits))))))

(defn atom? [x]
  (dart/is? x cljd.core/Atom))

(deftype Model []
  :extends MXImplementer
  PObserver
  (observe [this prop me new-value prior-value cell]
    #_ (dp :Model-not-observing (cinfo cell))))

(defn md-type [md]
  (assert (and md (atom? md) (map? @md))
    (str "md-type> argument null or not atom or not map deref: " md))
  (mx-type md))

(defn mname [me]
  (:name @me))

;; --- defmodel rizing ---------------------

(defn md-ref? [x]
  #_ (when (and x (atom? x))
       (dp :md-ref-sees (md-type x) (meta x)))
  (and x (atom? x)
    (dart/is? (md-type x) Model)))

;; --- md-quiesced? ---

(defn md-quiesced? [me]
  (if-let [m (meta me)]
    (= :dead (:state m))  ;;; HHHACK redundant?
    false))

(defn minfo
  ([md]
   (minfo md false))
  ([md verbose]
   (cond
     (nil? md) :null-md
     (not (atom? md)) :not-atom-md
     (not (md-ref? md)) (do (dp :atom-not-md-c @md)
                            :atom-not-md-c)
     :else (if false ;; verbose
             [(:name @md) (meta md)]
             [:minfo :fxc (:fx-class @md)
              :mxtype (mx-type md)
              (or (:name @md)
                :anon #_ [:hunh @md])]))))

;; --- quiescing --------------------

(def ^:dynamic *md-quiescing* false)



