(ns tiltontec.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as f]
    ;["dart:io" :as io]
    [tiltontec.cell.base :refer [cinfo c-model] :as cty]
    [tiltontec.model.core :as md]
    [tiltontec.matrix.base
     :refer [prog1 wtrx dprn dp dpx trx]]
    [tiltontec.matrix.api :refer [minfo] :as mx]
    [tiltontec.matrix.foundation :as mxf]
    [tiltontec.flutter-mx.core :as fx]
    [tiltontec.example.x01-counter :as counter]
    ;[tiltontec.example.x02-two-counters-ala-flux :as ctr2flux]
    ;[tiltontec.example.x02-two-counters-ala-matrix :as ctr2]
    ;[tiltontec.example.x03-physics-sim :as x03]
    [tiltontec.example.x04-drawer :as x04]
    ;[tiltontec.example.x05-fab :as x05]
    [tiltontec.example.x06-tabs :as x06]
    [tiltontec.example.x07-animated-container :as x07]
    ;[tiltontec.example.x08-navigation :as x08]
    ;[tiltontec.example.x09-form-change :as formchg]
    ;[tiltontec.example.x09-form-input :as formi]
    ;[tiltontec.example.x10-datatable :as x10]
    ;[tiltontec.example.x11-grid-list :as grid]
    ;[tiltontec.example.x12-gesture-detector :as affine]
    ;[tiltontec.example.x13-snackbar :as snack]
    ;[tiltontec.example.x14-hero :as hero]
    ;[tiltontec.example.x15-fade-widget :as fade]
    ;[tiltontec.example.x020-reactive-stream :as x020]
    ;[tiltontec.example.layout-explorer :as layo]
    ;[tiltontec.demo.todoMVC.core :as todo]
    ;[tiltontec.demo.todoHive.core :as todohive]
    ;[tiltontec.faq.navig-cycle :as faq-nav] ;; no make-app! use make-app-fail or make-app-fixed
    ;[tiltontec.example.x25-flutter-tex :as tek]
    ;[tiltontec.example.x26-latex-sandbox :as x26]
    ;[tiltontec.example.x27-popup-menu :as x27]
    ;[tiltontec.example.x028-bottom-navbar :as x028]
    ;[tiltontec.example.x029_layout_builder :as x029]
    ;[tiltontec.example.x030_codelab_namer :as x030]
    ;[tiltontec.example.x035-timer-poll :as x035]
    ;[tiltontec.example.x040-named-routes :as x040]
    ;; [tiltontec.example.x029a-layout-kid-builder :as x029k]
    ))

(defn main []
  (dp :main-entry)
  (md/md-quiesce-feature! true)
  (.ensureInitialized w/WidgetsFlutterBinding)
  ;; (fxk/fmx-debugger-set! sample-debugger)

  (wtrx [0 999 :run-app]
    (fx/run-app
      (fx/fx-render nil
        ;; Change the  namespace below to one above and rebuild to see a different example. <<<<<<< Updated upstream
        ;; ------ VVVVV --------------------------------------------
        (fx/fx-factory-yield (counter/make-app)))
      #_((counter/make-app) nil)))

  ;; (testing/run-tests)
  (dp :main-exit))

(defn sample-debugger [opcode data]
  (case opcode
    :mark-rebuild-unless-defunct
    (do) #_(let [{:keys [cell element]} data]
             (dp :adtata data)
             (dp :cell (cinfo cell))
             (dp :cellkeys (keys @cell))
             (let [elt ^w/Element element]
               (when (not (and (.-mounted elt)
                            (.-debugIsActive elt)
                            (not (.-debugIsDefunct elt))))
                 (dp :rebld-DEAD-ELT-me!!! (minfo (:me @cell)))
                 (dp :rebld-mounted (.-mounted elt))
                 (dp :rebld-active (.-debugIsActive elt))
                 (dp :rebld-sees-defunct (.-debugIsDefunct elt))
                 (dp :rebld-elt-str (.toString elt)))))
    (dp :unrecognized-debug-opcode opcode data)))

;; (set! r/debugPaintSizeEnabled true)
;; (w/debugDumpApp)

; (defn repl-ish []
;  (do (dart:core/print :on-reload)
;      (bt/scan! 3)
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000)))
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000)))
;      (await (.delayed dc/Future (dc/Duration .milliseconds 2000))))
;  (do
;    nil
;    ))

;(defmacro hot-reload-detector
;  [& body]
;  (let [flutter-build-ctx (vary-meta `ctx# assoc :tag `w/BuildContext)
;        state-sym `^w/State state#
;        super-sym `super#
;        user-widget
;        `(reify :extends (w/StatefulWidget.)
;           :no-meta true
;           (~'createState [_#]
;            (reify :extends w/State
;              :no-meta true
;              (~'initState [~state-sym]
;               (.initState ~(vary-meta state-sym assoc :tag 'super))
;               nil)
;              (^void ~'reassemble [this#]
;               (.reassemble ^{:tag ~'super} this#)
;               (repl-ish))
;              (~'dispose [~state-sym]
;               (.dispose ~(vary-meta state-sym assoc :tag 'super)))
;              (~'build [~state-sym ~flutter-build-ctx]
;               ~@body))))]
;    user-widget))
;
; (defn main [] ;<id:1673573645>
;  (fx/run-app
;   (fx/hot-reload-detector
;    (fx/fx-render nil (home/make)))))