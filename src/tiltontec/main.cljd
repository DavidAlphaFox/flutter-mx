(ns tiltontec.main
  ;; pure dart package are imported using string

  (:require ["package:flutter/material.dart" :as material]
            ["package:flutter/widgets.dart" :as widgets]
            ["package:flutter/painting.dart" :as painting]
            ["dart:developer" :as dev]
            ["dart:math" :as mth]
            ["dart:convert" :as convert]
    ;; [clojure.data.json :as json]
            [tiltontec.util.base :refer [dprn dp dpx]]

            [tiltontec.testing :as testing]
            [tiltontec.test.lazy-cells :as test-lazy]

            [tiltontec.mx-flutter.core :as fx]
            ["package:localstore/localstore.dart" :as ls]

            [tiltontec.sample.fab :as fab-std]

            [tiltontec.app.x01-hello-world :as xhello]
            [tiltontec.app.x02-counter :as xcounter]
            [tiltontec.app.x02-two-counters-ala-flux :as x2ctr]
            [tiltontec.app.x02-two-counters-ala-matrix :as x2mx]
            [tiltontec.app.x03-physics-sim :as xphysics]
            [tiltontec.app.x04-drawer :as xdrawer]
            [tiltontec.app.x05-fab :as xfab]
            [tiltontec.app.x06-tabs :as xtabs]
            [tiltontec.app.x07-animated-container :as xanicon]
            [tiltontec.app.x08-navigation :as xnav]
            [tiltontec.app.x09-form-change :as xformchg]
            [tiltontec.app.x09-form-input :as xformi]
            [tiltontec.app.x10-datatable :as datatbl]
            [tiltontec.app.x11-grid-list :as xgrid]
            [tiltontec.sample.gesture-detector :as sam.affine]
            [tiltontec.app.x12-gesture-detector :as xaffine]
            [tiltontec.app.x13-snackbar :as xsnack]
            [tiltontec.sample.gd-orig :as gdorig]
            [tiltontec.app.x14-hero :as xhero]
            [tiltontec.app.x15-fade-widget :as xfade]
            [tiltontec.app.todoMVC.core :as todo]
            [clojure.walk :as walk]
            ))

(def version (atom nil :meta {}))

(defn main []
  #_(navo/main)
  (material/runApp
    (fx/fx-render nil
      (todo/make-app)))

  ;(dp :jsowrite!!!!! (json/write-str {:a 1 :b 2}))
  ;(dp :jsoencode (convert/jsonEncode {:a 1 :b 2}))
  #_(let [decode (convert/jsonDecode "{ \"name\": \"Pizza da Mario\", \"cuisine\": \"Italian\" }")]
      (dp :decodes? (string? decode))
      (dp :decodes-map? (map? decode))
      (dp :decodes-keywordized (walk/keywordize-keys decode))
      (dp :decode-k (keys decode))
      (dp :cuisi (get decode "cuisine"))
      (dp :decode decode)

      (doseq [[k v] decode]
        (dp :doseq k v)
        (dp :doseq (keyword k) v)
        )

      (dp :forrrrr (into {}
                     (for [[k v] decode]
                       [(keyword k) v])))
      #_(let [mp (into {}
                   (apply concat
                     (for [[k v] decode]
                       [(keyword k) v])))]
          (prn :now-m? mp (map? mp))))

  (let [db (.instance ls/Localstore)]
    (dp :bam-db!!!!!!!!!!! db)

    ;
    ; 3n3aym16h
    ; 5ggmwupfb
    ;
    (let [coll (.collection db "todos")
          ;id (.id (.doc (.collection db "todos")))
          ;;id #_ "5ggmwupfb"  (.id (.doc coll))
          ]
      (dp :BAM-coll coll)
      (dp :BAM-doc-get-all (await (.get coll)))
      #_(dp :BAM-doc-get-all-decode (convert/jsonDecode
                                      (await (.get coll))))
      ;;(dp :BAM-doc-id id)

      ;;; --- write new entry -----------------------------
      (let [coll (.collection db "todos")
            new-id (.id (.doc coll))]
        ;;id #_ "5ggmwupfb"  (.id (.doc coll))
        (-> db
          (.collection "todos")
          (.doc new-id)
          (.set {"title" "Todo title Two"})))

      ;;; --- read known IDs ------------------------------
      (doseq [id ["5ggmwupfb" "3n3aym16h"]]
        (let [rb (await (-> db
                          (.collection "todos")
                          (.doc id)
                          .get))]
          (dp :readback!!!!!! id :data (string? rb) (map? rb) :raw> rb)
          (dp :readback!!!!!! id :keys!!! (keys rb) rb)
          (dp :CLJD-map!!!! (walk/keywordize-keys
                              (into {}
                                (for [k (keys rb)]
                                  [k (get rb k)]))))
          #_(dp :readback!!!!!! id :decode!! (convert/jsonDecode rb) rb)))

      ;;  Unhandled Exception: type '_InternalLinkedHashMap<String, dynamic>' is not a subtype of type 'String' in type cast

      #_(let [rb (await (-> db
                          (.collection "todos")
                          (.doc id)
                          .get))]
          (dp :readback!!!!!!!!! id :data rb))))

  ;(let [{:keys [initial-open? distance actions] :or [initial-open? false]}
  ;      {:distance 42}]
  ;  (dp :s distance :io initial-open?))

  ;;(widgets/debugDumpApp)
  )


;; db.collection('todos').doc(id).set({ 'title': 'Todo title'});