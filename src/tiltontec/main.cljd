(ns tiltontec.main
  (:require ["package:flutter/material.dart" :as material]
            ["package:flutter/widgets.dart" :as w]
            ["package:flutter/painting.dart" :as painting]
            ["package:flutter/rendering.dart" :as r]
            ["dart:developer" :as dev]
            ["dart:math" :as mth]
            ["dart:convert" :as convert]

            ["package:http/http.dart" :as dht]
            [clojure.walk :as walk]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.testing :as testing]
            [tiltontec.test.lazy-cells :as test-lazy]
            [tiltontec.mx-flutter.core :as fx]
            [tiltontec.example.x01-hello-world :as xhello]
            [tiltontec.example.x02-counter :as xcounter]
            [tiltontec.example.x02-two-counters-ala-flux :as x2ctr]
            [tiltontec.example.x02-two-counters-ala-matrix :as x2mx]
            [tiltontec.example.x03-physics-sim :as xphysics]
            [tiltontec.example.x04-drawer :as xdrawer]
            [tiltontec.example.x05-fab :as xfab]
            [tiltontec.example.x06-tabs :as xtabs]
            [tiltontec.example.x07-animated-container :as xanicon]
            [tiltontec.example.x08-navigation :as xnav]
            [tiltontec.example.x09-form-change :as xformchg]
            [tiltontec.example.x09-form-input :as xformi]
            [tiltontec.example.x10-datatable :as datatbl]
            [tiltontec.example.x11-grid-list :as xgrid]
            [tiltontec.example.x12-gesture-detector :as xaffine]
            [tiltontec.example.x13-snackbar :as xsnack]
            [tiltontec.example.x14-hero :as xhero]
            [tiltontec.example.x15-fade-widget :as xfade]
            [tiltontec.example.layout-explorer :as layo]
            [tiltontec.demo.todoMVC.core :as td]))

(def version (atom nil :meta {}))

(defn main []
  (.ensureInitialized w/WidgetsFlutterBinding)
  ;;(set! r/debugPaintSizeEnabled true)

  (material/runApp
      (fx/fx-render nil
        (td/make-app)))

  #_(let [tres (await (stor/test))]
      (dp :maintres tres))

  #_(let [r (prefs/test)]
      (dp :main-says-test-done r))

  #_(let [pt (await (prefs/test))]
      (dp :main-sees-pt pt @pref/+db+))

  #_ (let [ae-url "https://api.fda.gov/drug/event.json?
                    search=patient.drug.openfda.brand_name:~(~a~)&limit=3"
        ae-uri (.https Uri "api.fda.gov" "drug/event.json"
                 {"limit"  "3"
                  "search" "patient.drug.openfda.brand_name:Advil"})]
    (dp :ae-uri ae-uri)
    (let [r (dht/get ae-uri)]
      (dp :aerwaw r)
      (.then ^Future? r (fn []
                 (dp :fnv!!!!!!!!!!)))
      #_
      (let [rr (await r)]
        (dp :rr rr)
        (dp :status-c (.-statusCode rr))
        (dp :body (.-bodyBytes rr))
        (let [bbu8 (walk/keywordize-keys
                     (into {}                               ;; converts Dart map to cljd map
                       (convert/jsonDecode
                         (.decode convert/utf8 (.-bodyBytes rr)))))]
          (dp :-----------------------)
          (dp :utf8-bodybytes bbu8)
          (dp :-----------------------)
          (let [rs (:results bbu8)]
            (doseq [r rs]
              (dp :fda! r)))

          (dp :--------------------)
          (let [m (walk/keywordize-keys (into {} (:meta bbu8)))]
            (dp :meta m)
            (dp :meta-res (walk/keywordize-keys (into {} (:results m))))
            )
          )))


    #_#_(dp :ae!!!!!!!!!!!!!!!!!!!!!)
            (let [aer (dht/get ae-url)]
              (dp :raw-aer!!! aer)))


  ;;(w/debugDumpApp)
  )
