;; package:web_socket_channel/web_socket_channel.dart
(ns example.eg.x045-websocket
  (:require
    [clojure.string :as str]
    [tilton.mx.api :refer [cF cF+ cFn cI dp minfo mget mset! mswap! maprop] :as md]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             floating-action-button as-dart-callback]]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:web_socket_channel/web_socket_channel.dart" :as wsc]))

(defn make-app []
  (material-app
    {:title "Flutter/MX Hello WebSocket"
     :theme (cF (m/ThemeData .primarySwatch m/Colors.teal))}
    {:channel (cF+ [:watch (fn [_ me new prior c]
                             (when-let [chan ^wsc/WebSocketChannel new]
                               (dp :watch-sees-wsc chan)
                               (.listen (.-stream chan)
                                 (fn [message]
                                   (dp :sending-message message (rand-int 99))
                                   (mset! me :socket-msg-in message)))))]
                (.connect wsc/WebSocketChannel
                  (Uri.parse "ws://localhost:10000/.ws")))
     :socket-msg-in (cI nil :watch (fn [_ me msg _ _]
                           (dp :cI-msg-received!!!!!! msg)))}
    (scaffold
      {:appBar (app-bar
                 {:title (m/Text "Welcome to WebSockets/MX")})
       :floatingActionButton
       (floating-action-button
         {:onPressed (as-dart-callback []
                       (when-let [c ^wsc/WebSocketChannel (maprop :channel)]
                         (.add (.-sink c) (str "received" (rand-int 99)))))
          :tooltip   "Send msg"}
         (m/Icon m/Icons.add .color m/Colors.black))}
      (center
        (column
          {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (text {:overflow p.TextOverflow/ellipsis
                 :style    (p/TextStyle
                             .color m/Colors.cyan
                             .fontSize 32.0)}

            "hello, web socket.\\n")

          (text {:overflow p.TextOverflow/ellipsis
                 :style    (p/TextStyle
                             .color m/Colors.cyan
                             .fontSize 16.0)}
            (maprop :socket-msg-in)))))))