(ns example.eg.x029a-layout-kid-builder
  (:require
    ["dart:math" :as math]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["dart:async" :as async]
    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :refer [dp dpx cF cF+ cI mget mpar fasc faprop fmuv minfo mset! fmu] :as mx]
    [tilton.fmx.api :refer [as-dart-callback] :as fx]))

(defn make-app []
  (let [title "Seamless Layout Builder/Built"]
    (fx/material-app
      {:title title}
      {:name    :the-app
       :msg     "\"Hi, Mom!\" "
       :elapsed (cI 0)
       #_#_:clock (cF+ [:on-quiesce (fn [cell]
                                      (when-let [tmr ^async/Timer (cb/c-value cell)]
                                        (.cancel tmr)))]
                    (async/Timer.periodic (Duration .seconds 3)
                      (fn [^async/Timer tmr]
                        (mset! me :elapsed (.-tick tmr)))))}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        (fx/center
          (fx/layout-kid-builder
            ;; for now, we must use the hard-coded :box-constraints to get that build parameter.
            ;; We could make this parameterizable, but builders are passed boxConstraints -- why
            ;; make that tailorable? Ah, because the builder mechanism is a general one. Well, layout-builder
            ;; takes Constraints....
            (fx/center
              (fx/padding {:padding (m/EdgeInsets.all 20)}
                (fx/column {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
                  (fx/text
                    {:style (cF (p/TextStyle
                                  .color m/Colors.blue
                                  .fontSize 24))}
                    {:name :test}
                    "Rotate the device or sim to see layout effect.")
                  (fx/text
                    {:style (cF (p/TextStyle
                                  .color m/Colors.blue
                                  .fontSize 16))}
                    {:name :test}
                    "Use âŒ˜-arrows to rotate sim.")
                  (fx/text
                    {:style (cF (p/TextStyle
                                  .color (mget me :font-color)
                                  .fontSize (mget me :font-size)))}
                    {:font-size  (cF (if-let [box (faprop :box-constraints me)]
                                       (+ (* 0.03 (.-maxHeight ^m/BoxConstraints box))
                                         ;; just a random computation off a model outside the built-kid model:
                                         (* 5 0 #_(mod (faprop :elapsed me) 3)))
                                       24))
                     :font-color (cF (cond
                                       (> (mget me :font-size) 25) m/Colors.red
                                       :else m/Colors.cyan))}
                    (str (mget (fasc :the-app) :msg)
                      "\nin font size "
                      (/ (int (* 10 (mget me :font-size))) 10))))))))))))



