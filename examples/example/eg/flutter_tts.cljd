(ns example.eg.flutter-tts
  "Port of flutter_tts package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp cI cF cF+ cFn cFonce mget mget? mset! minfo fasc fmu]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding
             icon-button fx-render as-dart-callback]]))

(defn make-app []
  (material-app {}
    {:name        :app
     :fts         (flutter-tts-initializer)
     :language    (cI "en-AU")
     :volume      (cI 0.8 :watch (fn [_ me new _ _]
                                   (.setVolume (mget me :fts) new)))
     :speech-rate (cI 0.5 :watch (fn [_ me new _ _]
                                   (.setSpeechRate (mget me :fts) new)))
     :pitch       (cI 1.0 :watch (fn [_ me new _ _]
                                   (.setPitch (mget me :fts) new)))
     :langs       (cF+ [:async? true]
                    (.-getLanguages (mget me :fts)))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (fx/single-child-scroll-view
        {:scrollDirection m/Axis.vertical}
        (column
          (text-input)
          (speaking-controls)
          (language-selector)
          (column
            (property-slider :volume "Volume" m/Colors.blue 0 1 10)
            (property-slider :pitch "Pitch" m/Colors.red 0.5 2 15)
            (property-slider :speech-rate "Rate" m/Colors.green 0 1 10)))))))

(defn flutter-tts-initializer []
  (cF+ [:watch (fn [_ me newv _ _]
                 (when-let [fts newv]
                   (.setSharedInstance fts true)
                   (.awaitSpeakCompletion fts true)))]
    (FlutterTts)))

;;; --- text input --------------------------------------------------------------

(defn text-input []
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0)}
    (fx/text-field
      {:controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI (str "\"Jealousy\"\nby Robert Graves\n\n"
                    "I'd die for you or you for me, \n"
                    "So furious is our jealousy. \n"
                    "And if you doubt this to be true, \n"
                    "Kill me outright, lest I kill you."))})))

;;; --- play, stop, pause -------------------------------------------------------

(defn speaking-controls []
  (container
    {:padding (m/EdgeInsets.only .top 50.0)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak)
      (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop)
      (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause))))

(defn speaking-control [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:icon        (fx/icon {:icon icon})
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

;;; --- speech control actions -----------------------------------------------

(defn do-speak [me]
  (let [app (fasc :app)
        fts (mget app :fts)
        speech (mget (fmu :text-in) :value)]
    (when (not (str/blank? speech))
      (.setSpeechRate fts (mget app :speech-rate))
      (.setPitch fts (mget app :pitch))
      (.setVolume fts (mget app :volume))
      (.setLanguage fts (mget app :language))
      (.speak fts speech))))

(defn do-stop [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (await (.stop fts))))

(defn do-pause [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (await (.pause fts))))

;;; --- languages dropdown ------------------------------------------------

(defn language-selector []
  (fx/future-builder
    {:future  (cF (let [app (fasc :app)
                        fts ^FlutterTts (mget app :fts)]
                    (.-getLanguages fts)))
     :builder (cF (fx/->CBAsIs
                    (fn [ctx snapshot]
                      (fx-render ctx
                        (cond
                          (.-hasData snapshot) (language-dropdown me (.-data snapshot))
                          (.-hasError snapshot) (text "Error loading languages...")
                          :else (fx/text "Loading languages..."))))))}))

(defn language-dropdown [par languages]
  (container
    {:padding (m/EdgeInsets.only .top 10.0)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.center}
      (fx/dropdown-button
        {:value     (cF (mget (fasc :app par) :language))
         :items     (mapv (fn [lang]
                            (fx/dropdown-menu-item
                              {:value lang}
                              (text lang)))
                      (sort languages))
         :onChanged (fn [new-lang]
                      (mset! (fasc :app par) :language new-lang))}))))

;;; --- property sliders -----------------------------------------------------------

(defn property-slider [prop label color min max divisions]
  (fx/slider
    {:value       (cF (mget (fasc :app) prop))
     :onChanged   (cF (fn [val]
                        (mset! (fasc :app) prop val)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}))
