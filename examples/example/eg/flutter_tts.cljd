(ns example.eg.flutter-tts
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    [clojure.string :as str]
    [tilton.mx.cell.base
     :refer [without-c-dependency *within-integrity*]]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! minfo fasc fmu fm* maprop
             with-mx-isolation]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding
             icon-button fx-render as-dart-callback]]))

(declare lang-chooser
  geo-chooser
  speaking-controls
  equalizer property-slider
  text-input
  do-speak
  lang-button geo-button
  lg-lang)

(defmacro myapp []
  `(mx/fascinc :app ~'me))

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (cF+ [:watch (fn [_ me newv _ _]
                                   (when-let [fts ^FlutterTts newv]
                                     (.setSharedInstance fts true)
                                     (.setProgressHandler fts
                                       (fn [text startOffset endOffset word]
                                         (dp :progress! word :s startOffset :e endOffset)))
                                     (.setCompletionHandler fts
                                       (fn []
                                         (with-mx-isolation ; NB!!
                                           (dp :offset!!! (mset! (fm* :ctlz) :mode :off)))))
                                     (.setErrorHandler fts
                                       (fn [msg]
                                         (throw (Exception. (str "FlutterTts error: " msg)))))))]
                      (FlutterTts))

     :volume        (cI 0.3 :watch (fn [_ me new _ _]
                                     (.setVolume ^FlutterTts (mget me :fts) new)))
     :speech-rate   (cI 0.5 :watch (fn [_ me new _ _]
                                     (.setSpeechRate ^FlutterTts (mget me :fts) new)))
     :pitch         (cI 1.0 :watch (fn [_ me new _ _]
                                     (.setPitch ^FlutterTts (mget me :fts) new)))
     ; -------------------------------------------------------------------------------
     :lang-geo-tree (cF+ [:async? true ;; NB!! async handling
                          :async-then (fn [c lg-flat]
                                        (group-by lg-lang (sort lg-flat)))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))
     :lg-pref       "en-AU"                                 ;; todo store as upref
     :lg-current    (cF+n [:watch (fn [_ me new prior _]
                                    (when (not= prior mx/unbound)
                                      (mx/with-cc :auto-on
                                        (dp :lg-current-sets-on)
                                        (mset! (fm* :ctlz) :mode :on))
                                      #_(do-speak me)))]
                      (mget me :lg-pref))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        (lang-chooser)
        (geo-chooser)
        (text-input)
        (speaking-controls)
        (equalizer)))))

;;; --- text input --------------------------------------------------------------

(defn text-input []
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text-field
      {:controller (cFonce                                  ;; provides access to 'me'
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI (str                                      ;"Turning and turning in the widening gyre\n"
                    ;"The falcon cannot hear the falconer;\n"
                    ;"Things fall apart; the centre cannot hold;\n"
                    "Mere anarchy is loosed upon the world,")
                #_(str
                    "\"Jealousy\"\nby Robert Graves\n\n"
                    "I'd die for you, or you for me, \n"
                    "So furious is our jealousy-- \n"
                    "And if you doubt this to be true, \n"
                    "Kill me outright, lest I kill you."
                    ))})))

;;; --- play, stop, pause -------------------------------------------------------


;; todo if user changes volume et al while paused, warn that it will not take effect until fresh play

(defn speaking-control [color splash-color icon label func mode]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:key         (m/ValueKey mode)
       :icon        (fx/icon {:icon icon})
       :iconSize    48
       :color       color
       :splashColor splash-color
       :onPressed   (as-dart-callback []                    ;; NB!
                      (mset! (fasc :ctlz) :mode mode))})))

(defn speaking-controls []
  (container
    {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    {:name :ctlz
     :mode (cI :off :watch (fn [_ me new-mode _ _]
                             ((case new-mode
                                :off do-stop
                                :on do-speak
                                :pause do-pause) me)))}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (if (some #{(mget (fasc :ctlz) :mode)} [:off :pause])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak :on)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause :pause))
      (fx/opacity {:opacity (cF (if (some #{(mget (fasc :ctlz) :mode)} [:on :pause])
                                  1.0 0.0))}
        (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop :off)))))

;;; --- speech control actions -----------------------------------------------

(defn do-speak [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)
        speech (mget (mx/fm* :text-in) :value)
        lang (maprop :lg-current)]
    (when (and lang (not (str/blank? speech)))
      (dp :speaking!!!!!!!! lang speech :params (mget app :speech-rate)
        (mget app :pitch)
        (mget app :volume))
      (.setPitch fts (mget app :pitch))
      (.setVolume fts (mget app :volume))
      (.setLanguage fts lang)
      (.speak fts speech))))

(defn do-pause [me]
  (let [fts ^FlutterTts (mget (fasc :app) :fts)]
    (await (.pause fts))))

(defn do-stop [me]
  (let [fts ^FlutterTts (mget (fasc :app) :fts)]
    (await (.stop fts))))

;;; --- equalizer property sliders -----------------------------------------------------------

(defn equalizer []
  (column
    (doall (for [[label & opnds]
                 [["Volume" :volume m/Colors.blue 0 1 10]
                  ["Pitch" :pitch m/Colors.red 0.5 2 15]
                  ["Rate" :speech-rate m/Colors.green 0 1 20]]]
             (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
               (fx/row
                 {:mainAxisAlignment m/MainAxisAlignment.end
                  :mainAxisSize      m/MainAxisSize.min}
                 (container {:width     64
                             :alignment m/Alignment.topRight}
                   (m/Text label))
                 (apply property-slider label opnds)))))))

(defn property-slider [label prop color min max divisions]
  (fx/slider
    {:value       (cF (mget (fasc :app) prop))
     :onChanged   (cF (fn [val]
                        (mset! (fasc :app) prop val)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}))

;;; --- lang/geo choosers -------------------------------------------------

(defn lang-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.2
       :padding         (m/EdgeInsets.all 8)}
      (map-indexed lang-button
        (sort (keys (maprop :lang-geo-tree)))))))

(defn geo-chooser []
  (expanded
    (column
      (m/Text "Geography")
      ;;(m/Text "bam") #_
      (fx/grid-view+count
        {:crossAxisCount  8 :crossAxisSpacing 4
         :mainAxisSpacing 4 :childAspectRatio 1.0
         :padding         (m/EdgeInsets.all 8)
         :shrinkWrap      true}
        (map-indexed geo-button
          (when-let [lgc (lg-lang (maprop :lg-current))]
            (get (maprop :lang-geo-tree) lgc)))))))

;;; --- lang and geo buttons ----------------------------------------------------

(defn lang-button [i lang]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang)
     :onTap (as-dart-callback []
              (mset! (fasc :app) :lg-current
                (first (get (maprop :lang-geo-tree) lang))))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang (lg-lang (maprop :lg-current)))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     {:unwrapped? true})}
      {:name :lang-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            lang))))))

(defn geo-button [i lang-geo]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang-geo)
     :onTap (as-dart-callback []
              (mset! (fasc :app) :lg-current lang-geo))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang-geo (maprop :lg-current))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     #_ {:unwrapped? false})}
      {:name :geo-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            (subs lang-geo 3)))))))

;;; --- utils -----------------------------

(defn lg-lang [lg]
  (subs lg 0 2))
