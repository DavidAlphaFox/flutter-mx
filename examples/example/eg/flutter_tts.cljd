(ns example.eg.flutter-tts
  "Port of flutter_tts package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cFn cFonce mget mget? mset! minfo fasc fmu]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding
             icon-button fx-render as-dart-callback]]))

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (flutter-tts-initializer)
     :volume        (cI 0.8 :watch (fn [_ me new _ _]
                                     (.setVolume ^FlutterTts (mget me :fts) new)))
     :speech-rate   (cI 0.5 :watch (fn [_ me new _ _]
                                     (.setSpeechRate ^FlutterTts (mget me :fts) new)))
     :pitch         (cI 1.0 :watch (fn [_ me new _ _]
                                     (.setPitch ^FlutterTts (mget me :fts) new)))
     :lang-geos     (cF+ [:async? true
                          :watch (fn [_ _ lang-geos _ _]
                                   #_(let [langs (group-by #(subs % 0 2) (sort lang-geos))]
                                       (dp :langs (keys langs))))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))
     :lang-geo-tree (cF (group-by #(subs % 0 2) (sort (mget me :lang-geos))))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        (lang-chooser)
        (geo-chooser)
        (fx/single-child-scroll-view
          {:scrollDirection m/Axis.vertical}
          (column
            (text-input)
            (speaking-controls)
            ;; oskool pulldown: (language-selector)
            (column
              (property-slider :volume "Volume" m/Colors.blue 0 1 10)
              (property-slider :pitch "Pitch" m/Colors.red 0.5 2 15)
              (property-slider :speech-rate "Rate" m/Colors.green 0 1 20))))))))

(defn flutter-tts-initializer []
  (cF+ [:watch (fn [_ me newv _ _]
                 (when-let [fts ^FlutterTts newv]
                   (.setSharedInstance fts true)
                   (.awaitSpeakCompletion fts true)))]
    (FlutterTts)))

(defn lang-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount   8
       :mainAxisSpacing  4
       :crossAxisSpacing 4
       :childAspectRatio 1.5
       :padding          (m/EdgeInsets.all 8)}
      {:name      :lang-choice
       :langs     (cF+ [:watch (fn [_ _ new _ _]
                                 (dpx :langs-watch new))]
                    (sort (keys (mget (fasc :app) :lang-geo-tree))))
       :value     (cI 5)
       :lang-code (cF (when-let [langs (seq (mget me :langs))]
                        (let [choice (mget me :value)]
                          (nth langs (if (>= choice (count langs))
                                       0 choice)))))}
      (let [langs (mget me :langs)]
        (mapv
          (fn [i] (fx/gesture-detector
                    {:onTap (as-dart-callback []
                              (mset! (fasc :lang-choice) :value i))}
                    {:name :lang-option}
                    (container
                      {:decoration (m/BoxDecoration
                                     .border (when (= i (mget (fasc :lang-choice) :value))
                                               (.all m/Border .color m/Colors.red .width 2))
                                     .color (.-shade300 (cond
                                                          (even? i) m/Colors.cyan
                                                          :else m/Colors.yellow)))}
                      {:name :lang-cont}
                      (center
                        (padding {:padding (m/EdgeInsets.all 4.0)}
                          (fx/text
                            {:style (p/TextStyle .color m/Colors.black
                                      .fontSize 16.0)}
                            (subs (nth langs i) 0 2)))))))
          (range (count (take 888 langs))))))))

(defn geo-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount   8
       :mainAxisSpacing  4
       :crossAxisSpacing 4
       :childAspectRatio 1.0
       :padding          (m/EdgeInsets.all 8)}
      {:name     :geo-choice
       :geo-lang (cF (let [geos (mget me :geos)]
                       (nth geos (min (mget me :value) (dec (count geos))))))
       :value    (cI 0 :watch (fn [_ me newv _ _]
                                (let [new-geo (nth (mget me :geos) newv)]
                                  (dpx :new-geo!!! newv new-geo))))
       :geos     (cF+ [:watch (fn [_ me _ _ _]
                                (mx/with-cc :new-geos
                                  (mset! me :value 0)))]
                   (get (mget (fasc :app) :lang-geo-tree)
                     (mget (fmu :lang-choice) :lang-code)))}
      (let [geos (mget me :geos)]
        (mapv (fn [i]
                (fx/gesture-detector
                  {:key   (m/ValueKey. (nth geos i))
                   :onTap (as-dart-callback []
                            (mset! (fasc :geo-choice) :value i))}
                  {:name :GD-geo-choice}
                  (container
                    {:decoration (m/BoxDecoration
                                   .border (when (= i (mget (fasc :geo-choice) :value))
                                             (.all m/Border .color m/Colors.red .width 2))
                                   .color (.-shade300 (cond
                                                        (even? i) m/Colors.cyan
                                                        :else m/Colors.yellow)))}
                    (center
                      (padding {:padding (m/EdgeInsets.all 4.0)}
                        (fx/text
                          {:style (p/TextStyle .color m/Colors.black
                                    .fontSize 16.0)}
                          (subs (nth geos i) 3)))))))
          (range (count geos)))))))

;;; --- text input --------------------------------------------------------------

(defn text-input []
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0)}
    (fx/text-field
      {:controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI #_"Turning and turning in the widening gyre, The falcon cannot hear the falconer."
                (str "\"Jealousy\"\nby Robert Graves\n\n"
                  "I'd die for you or you for me, \n"
                  "So furious is our jealousy. \n"
                  "And if you doubt this to be true, \n"
                  "Kill me outright, lest I kill you."))})))

;;; --- play, stop, pause -------------------------------------------------------

(defn do-pause [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (dp :pausing!!!!!!!!)
    (await (.pause fts))))

(defn speaking-controls []
  (container
    {:padding (m/EdgeInsets.only .top 50.0)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak)
      (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop)
      (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause))))

(defn speaking-control [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:icon        (fx/icon {:icon icon})
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

;;; --- speech control actions -----------------------------------------------

(defn do-speak [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)
        speech (mget (fmu :text-in) :value)
        lang (mget (fmu :geo-choice) :geo-lang)]
    (dpx :speaking!!!!! lang)
    (when (not (str/blank? speech))
      (.setSpeechRate fts (mget app :speech-rate))
      (.setPitch fts (mget app :pitch))
      (.setVolume fts (mget app :volume))
      (.setLanguage fts lang)
      (.speak fts speech))))

(defn do-stop [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (await (.stop fts))))

;;; --- property sliders -----------------------------------------------------------

(defn property-slider [prop label color min max divisions]
  (fx/slider
    {:value       (cF (mget (fasc :app) prop))
     :onChanged   (cF (fn [val]
                        (mset! (fasc :app) prop val)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}))

;;; --- languages dropdown ------------------------------------------------

#_;; vestigial
        (defn language-selector []
          (fx/future-builder
            {:future  (cF (let [app (fasc :app)
                                fts ^FlutterTts (mget app :fts)]
                            (.-getLanguages fts)))
             :builder (cF (fx/cb-as-is
                            (fn [ctx ^#/(m/AsyncSnapshot dynamic) snapshot]
                              (dp :snapshot snapshot)
                              (fx-render ctx
                                (cond
                                  (.-hasData snapshot) (language-dropdown me (.-data snapshot))
                                  (.-hasError snapshot) (text "Error loading languages...")
                                  :else (fx/text "Loading languages..."))))))}))

#_(defn language-dropdown [par languages]
    (container
      {:padding (m/EdgeInsets.only .top 10.0)}
      (row
        {:mainAxisAlignment m/MainAxisAlignment.center}
        (fx/dropdown-button
          {:value     (cF (mget (fasc :app par) :language))
           :items     (mapv (fn [lang]
                              (fx/dropdown-menu-item
                                {:value lang}
                                (text lang)))
                        (sort languages))
           :onChanged (fn [new-lang]
                        (mset! (fasc :app par) :language new-lang))}))))

