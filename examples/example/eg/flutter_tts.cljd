(ns example.eg.flutter-tts
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]))

(declare lang-chooser geo-chooser dashboard fts-init
  equalizer property-slider text-input do-speak do-stop
  lang-button geo-button lg-lang choice-header)

(def speech-initial
  #_ (str
    "Turning and turning in the widening gyre\n"
    "The falcon cannot hear the falconer;\n"
    "Things fall apart; the centre cannot hold;\n"
    "Mere anarchy is loosed upon the world,")
  (str
      ;"\"Jealousy\"\nby Robert Graves\n\n"
      "I'd die for you, or you for me, \n"
      ;"So furious is our jealousy-- \n"
      ;"And if you doubt this to be true, \n"
      ;"Kill me outright, lest I kill you."
      ))

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (cF+ [:watch fts-init]
                      (FlutterTts))
     :volume        (cI 0.3 :watch (fn [_ me new _ _]
                                     (.setVolume ^FlutterTts (mget me :fts) new)))
     :speech-rate   (cI 0.5 :watch (fn [_ me new _ _]
                                     (.setSpeechRate ^FlutterTts (mget me :fts) new)))
     :pitch         (cI 1.0 :watch (fn [_ me new _ _]
                                     (.setPitch ^FlutterTts (mget me :fts) new)))
     ; -------------------------------------------------------------------------------
     :lang-geos (cF+ [:async? true
                          :async-then (fn [c lg-flat]
                                        (group-by lg-lang (sort lg-flat)))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))

     :lg-pref       "en-AU" ;; imagine this is being loaded async from local storage
     ; ---
     ; lg-current = "current lang-geo"
     ; as a convenience, we "auto-play" when the user selects a new one, using
     ; a "watch" on the value and triggering FTS to speak.
     :lg-current    (cF+n [:watch (fn [_ me new prior _]
                                    (when (mget (fm* :auto-play) :value) ;; (mx-bound? prior)
                                      (do-stop me)
                                      (do-speak me)))]
                      (mget me :lg-pref))
     }
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        (choice-header "Languages")
        (lang-chooser)
        (geo-chooser)
        (text-input)

        (container
          {:color m/Colors.yellow
           :padding (m/EdgeInsets.symmetric .horizontal 16.0)}
          (fx/text {:textAlign m/TextAlign.right}
            {:name     :chyron
             :progress (cI nil)
             :phrase #_ ["four" "score" "and" "seven"]
             (cF (when (not= :off (mget (fm* :dash) :play-status))
                   (let [[text startOffset endOffset word] (mget me :progress)]
                     (if (nil? word) []
                       (take 8 (conj (if (mx-bound? _cache) _cache []) word))))))}
            (str/join "..." (mget me :phrase))))
        (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (dashboard)
          (auto-play))
        (equalizer)))))

(defn auto-play []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Auto-play")
       :value           (cI false)
       :onChanged       (cF (fn [new]
                              (wmx-iso (mswap! me :value not))
                              (when new
                                (do-speak me))))}
      {:name :auto-play})))


(defn fts-init [_ me newv _ _]
    (when-let [fts ^FlutterTts newv]
      (.setSharedInstance fts true)
      (.setProgressHandler fts
        (fn [& progress] ;; text startOffset endOffset word]
          (try
            (wmx-iso (mset! (fm* :chyron) :progress progress))
            (catch Exception e
              (dp :caught!!!! e)))))
      (.setStartHandler fts
        #(wmx-iso (mset! (fm* :dash) :play-status :on)))
      (.setCompletionHandler fts
        #(wmx-iso (mset! (fm* :dash) :play-status :off)))
      (.setCancelHandler fts
        #(wmx-iso (mset! (fm* :dash) :play-status :off)))
      (.setPauseHandler fts
        #(wmx-iso (mset! (fm* :dash) :play-status :paused)))
      (.setContinueHandler fts
        #(wmx-iso (mset! (fm* :dash) :play-status :on)))
      (.setErrorHandler fts
        #(throw (Exception. (str "FlutterTts error: " %))))))

;;; --- play, stop, pause -------------------------------------------------------

(defn watch-dbg [slot me new prior c]
  (dp :WATCH slot (minfo me) :new new :prior))

;; todo if user changes volume et al while paused, warn that it will not take effect until fresh play

(defn speaking-control [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:key         (m/ValueKey label)
       :icon        (fx/icon {:icon icon})
       :iconSize    48
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

(defn dashboard []
  (container
    {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      {:name        :dash
       :play-status (cI :off :watch watch-dbg)}
      (if (some #{(mav :play-status)} [:off :paused])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause))
      (stop-button))))

(defn stop-button []
  (ignore-pointer {:ignoring (cF (mget me :disabled?))}
    {:disabled? (cF (= :off (mav :play-status)))}
    (opacity {:opacity (cF (if (mav :disabled?)
                             0.2 1.0))}
      (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop))))

;;; --- speech control actions -----------------------------------------------

(defn do-speak [me]
  (let [app (mx/fascinc :app)                               ;; turns out 'me' _is_ the app
        fts ^FlutterTts (mget app :fts)
        speech (mget (mx/fm* :text-in) :value)]
    (when (and (mav :lg-current) (not (str/blank? speech)))
      (dp :speaking!!!!!!!! (mav :lg-current)
        :params (mav :speech-rate) (mav :pitch) (mav :volume))
      (.setPitch fts (mav :pitch))
      (.setVolume fts (mav :volume))
      (.setLanguage fts (mav :lg-current))
      (.setSpeechRate fts (mav :speech-rate))
      (.speak fts speech))))

(defn do-pause [me]
  (let [fts ^FlutterTts (mget (fasc :app) :fts)]
    (await (.pause fts))))

(defn do-stop [me]
  (let [fts ^FlutterTts (mget (fascinc :app) :fts)]
    (await (.stop fts))))

;;; --- equalizer property sliders -----------------------------------------------------------

(defn equalizer []
  (column
    (doall (for [[label & opnds]
                 [["Volume" :volume m/Colors.blue 0 1 10]
                  ["Pitch" :pitch m/Colors.red 0.5 2 15]
                  ["Rate" :speech-rate m/Colors.green 0 1 20]]]
             (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
               (fx/row
                 {:mainAxisAlignment m/MainAxisAlignment.end
                  :mainAxisSize      m/MainAxisSize.min}
                 (container {:width     64
                             :alignment m/Alignment.topRight}
                   (m/Text label))
                 (apply property-slider label opnds)))))))

(defn property-slider [label prop color min max divisions]
  (fx/slider
    {:value       (cF (mget (fasc :app) prop))
     :onChanged   (cF #(mx/wmx-iso
                         (mset! (fasc :app) prop %)
                         (when (mget (fm* :auto-play) :value)
                           (do-stop me)
                           (do-speak me))))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}))

;;; --- lang/geo choosers -------------------------------------------------

(defn lang-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.8
       :padding         (m/EdgeInsets.all 8)}
      (map-indexed lang-button
        (sort (keys (mav :lang-geos)))))))

(defn geo-chooser []
  (expanded
    (column
      (choice-header "Geography")
      (fx/grid-view+count
        {:crossAxisCount  8 :crossAxisSpacing 4
         :mainAxisSpacing 4 :childAspectRatio 1.8
         :padding         (m/EdgeInsets.all 8)
         :shrinkWrap      true}
        (map-indexed geo-button
          (when-let [lgc (lg-lang (mav :lg-current))]
            (get (mav :lang-geos) lgc)))))))

;;; --- lang and geo buttons ----------------------------------------------------

(defn lang-button [i lang]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang)
     :onTap (as-dart-callback []
              (mset! (fasc :app) :lg-current
                (first (get (mav :lang-geos) lang))))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang (lg-lang (mav :lg-current)))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     {:unwrapped? true})}
      {:name :lang-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            lang))))))

(defn geo-button [i lang-geo]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang-geo)
     :onTap (as-dart-callback []
              (mset! (fasc :app) :lg-current lang-geo))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang-geo (mav :lg-current))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     {:unwrapped? true})}
      {:name :geo-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            (subs lang-geo 3)))))))

;;; --- text input --------------------------------------------------------------

(defn text-input []
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text-field
      {:style      (p/TextStyle
                     .fontFamily "Helvetica Neue"
                     .fontSize 20.0)
       :controller (cFonce
                     ;(fx/text-editing-controller)
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI speech-initial)})))

;;; --- utils -----------------------------

(defn lg-lang [lg]
  (subs lg 0 2))

(defn choice-header [text]
  (padding {:padding (m/EdgeInsets.all 4)}
    (m/Text text)))