(ns example.eg.flutter-tts
  "Port of flutter_tts package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp cI cF cF+ cFn cFonce mget mget? mset! minfo fasc fmu]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding in-my-context
             icon-button fx-render
             as-dart-callback]]))

(defn make-app []
  (material-app {}
    {:name     :app
     :fts      (cF+ [:watch (fn [_ me newv _ _]
                              (when-let [fts newv]
                                (.setSharedInstance fts true)
                                (.awaitSpeakCompletion fts true)
                                (.setLanguage fts (mget me :language))
                                (.setSpeechRate fts (mget me :speech-rate))
                                (.setPitch fts (mget me :pitch))))]
                 (fts/FlutterTts))
     :language (cI "fr-FR")
     :volume   (cI 0.8)
     :speech-rate (cI 0.5)
     :pitch (cI 1.0)
     :langs    (cF+ [:async? true
                     :watch (fn [_ _ newv _ _]
                              (dp :langs-f!! newv))]
                 (.-getLanguages (mget me :fts)))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (fx/single-child-scroll-view
        {:scrollDirection m/Axis.vertical}
        (column
          (input-section)
          (btn-section)
          (future-builder)
          (build-sliders))))))

(defn input-section []
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0)}
    (fx/text-field
      {:controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI (str "\"Jealousy\"\nby Robert Graves\n\n"
                    "I'd die for you or you for me, \n"
                    "So furious is our jealousy. \n"
                    "And if you doubt this to be true, \n"
                    "Kill me outright, lest I kill you."))})))

(defn btn-section []
  (container
    {:padding (m/EdgeInsets.only .top 50.0)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (build-button-col m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" btn-speak)
      (build-button-col m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" btn-stop)
      (build-button-col m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" btn-pause))))

(defn btn-speak [me]
  (let [app (fasc :app)
        fts (mget app :fts)
        tst (fmu :text-in)
        speech (mget tst :value)]
    (when (not (str/blank? speech))
      (.setSpeechRate fts (mget app :speech-rate))
      (.setPitch fts (mget app :pitch))
      (.setVolume fts (mget app :volume))
      (.setLanguage fts (mget app :language))
      (.speak fts speech))))

(defn btn-stop [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (let [r (await (.stop fts))]
      (dp :stop-r r))))

(defn btn-pause [me]
  (let [app (fasc :app)
        fts ^FlutterTts (mget app :fts)]
    (let [r (await (.pause fts))]
      (dp :pause-r r))))

(defn build-button-col [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:icon        (fx/icon {:icon icon})
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

(defn future-builder []
  (fx/future-builder
    {:future  (cF (let [app (fasc :app)
                        fts ^FlutterTts (mget app :fts)]
                    (.-getLanguages fts)))
     :builder (cF (fx/->CBAsIs
                    (fn [ctx snapshot]
                      (fx-render ctx
                        (cond
                          (.-hasData snapshot) (language-dropdown me (.-data snapshot))
                          (.-hasError snapshot) (text "Error loading languages...")
                          :else (fx/text "Loading languages..."))))))}))

(defn language-dropdown [par languages]
  (container
    {:padding (m/EdgeInsets.only .top 10.0)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.center}
      (fx/dropdown-button
        {:value     (cF (mget (fasc :app par) :language))
         :items     (mapv (fn [lang]
                            (fx/dropdown-menu-item
                              {:value lang}
                              (text lang)))
                      (sort languages))
         :onChanged (fn [new-lang]
                      (dp :changed!!! new-lang)
                      (mset! (fasc :app par) :language new-lang))}))))

(defn build-sliders []
  (column
    (fx/slider
      {:value (cF (mget (fasc :app) :volume))
       :onChanged (fn [val]
                    (mset! (fasc :app) :volume val))
       :min 0.0 :max 1.0 :divisions 10
       :label (cF (str "Volume " (mget me :value)))})
    (fx/slider
      {:value (cF (mget (fasc :app) :pitch))
       :onChanged (fn [val]
                    (mset! (fasc :app) :pitch val))
       :min 0.5 :max 2.0 :divisions 15
       :label (cF (str "Pitch " (mget me :value)))
       :activeColor m/Colors.red})
    (fx/slider
      {:value (cF (mget (fasc :app) :speech-rate))
       :onChanged (fn [val]
                    (mset! (fasc :app) :speech-rate val))
       :min 0.0 :max 1.0 :divisions 10
       :label (cF (str "Rate " (mget me :value)))
       :activeColor m/Colors.green})))
