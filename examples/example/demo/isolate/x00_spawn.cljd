(ns example.demo.isolate.x00-spawn
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]))

;;; we do nothing but spawn an isolate and play with debugName,
;;; kill (immediate or beforeNextEvent), and exit.
;;;
;;; have fun commenting/uncommmenting different variations below.
;;;
;;; Credit: example 1 at https://plugfox.dev/mastering-isolates/
;;;

(defn worker-main [payload]
  (let [iso-self ^Isolate (Isolate.current)]
    (dp :worker-iso-current iso-self)
    ; (dp :worker-iso-current iso-self (.-debugName iso-self))

    (reduce (fn [a b]
              (let [f (* a b)]
                (dp :factorial-of b :is  f)
                f)) 1 (range 1 (inc payload)))

    #_ (do                                                   ; --- worker pauses to let main kill it, maybe ----
        (dp :worker-starts-waiting (.-debugName iso-self))
        (await (Future.delayed (Duration .seconds 2)))
        (dp :worker-done-waiting (.-debugName iso-self)))

    #_ (do                                                   ; --- worker kill selfs ---------------------------
        (dp :spawned-iso-killing-self (.-debugName iso-self))
        (.kill ^Isolate iso-self .priority Isolate.immediate))

    #_ (do                                                   ; --- worker exits Isolate ----------------------
        (dp :spawned-exiting (.-debugName iso-self))
        (Isolate.exit)
        ;; we will not get here, because we just exited....
        (dp :SHOULD-NOT-OCCUR-spawned-iso-post-exit iso-self))

    (dp :worker-fn-returning)))

(defn make-app []
  (fx/material-app {}
    {:iso (cF+ [:async? true
                :watch (fn [_ _ ^Isolate? new _ _]
                         (when new
                           ;(dp :iso-watch-new new)
                           ;(dp :iso-watch-new-name (.-debugName new))
                           (await (Future.delayed (Duration .seconds 1)))
                           (do
                             (dp :main-waited-1-now-killing new)
                             ;(dp :main-killing-name (.-debugName new))
                             ;(.kill ^Isolate new .priority Isolate.immediate)
                             (.kill ^Isolate new .priority Isolate.beforeNextEvent)
                             (dp :main-just-killed-iso new))))]
            (Isolate.spawn
             #_  (fn [n]                                     ;; name will be make-app.lambda or sth
                  (dp :iso-lambda-current!!! (.-debugName Isolate.current)))
             worker-main 5
              .errorsAreFatal true
              .debugName "MyIsolate"
              ))}
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Main Screen 2")})})))

;;; --- the original, in effect ----------------------------------------------

(defn worker-fn-original [payload]
  (reduce (fn [a b]
            (let [f (* a b)]
              (dp :factorial-of b :is  f)
              f))
    (range 1 (inc payload))))

(defn make-app-original []
  (fx/material-app {}
    {:iso (cF+ [:async? true
                :watch (fn [_ _ ^Isolate? new _ _]
                         (when new
                           (await (Future.delayed (Duration .seconds 1)))
                           (.kill ^Isolate new .priority Isolate.beforeNextEvent)))]
            (Isolate.spawn
              worker-fn-original 5
              .errorsAreFatal true
              ; .debugName "custom-worker"
              ))}
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Main Screen 2")})})))
