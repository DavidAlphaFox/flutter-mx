(ns example.demo.isolate.x05-compute
  (:require
    ["package:flutter/gestures.dart" :as g]
    ["package:flutter/material.dart" :as m
     :refer [Canvas Size]]
    ["package:flutter/painting.dart" :as p]
    ["package:vector_math/vector_math_64.dart" :as vm]
    ["dart:math" :as math
     :refer [pi cos sin]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    ["package:flutter/foundation.dart" :as fnd]

    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx]
    [example.demo.isolate.common :as cmn
     :refer [clock-face slow-is-prime? use-compute?]]))

(defn make-app []
  (let [title "Smooth Clock"]
    (fx/material-app
      {:title title}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})
         :floatingActionButton
         (fx/floating-action-button
           {:onPressed (fx/as-dart-callback []
                         (wmx-iso
                           (let [fo (fmu :primer)]
                             (mswap! fo :of + 2))))})}
        (fx/column
          {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (clock-face)
          (use-compute?)
          (fx/text {}
            {:name   :primer
             :of     (cI 9000039)
             :prime? (cF+ [:async? true]
                       (if (mx/muv :use-compute?)
                         (fnd/compute slow-is-prime? (mget me :of))
                         ;; todo teach MX that async? rules may not yield futures, so
                         ;; there will be no need to wrap this in a future
                         (future (slow-is-prime? (mget me :of)))))}
            (str "Is " (mget me :of) " prime? "))

          (fx/sized-box {:height 32}
            (fx/text
              {:style (cF (let [p? (mget (fmu :primer) :prime?)]
                            (fx/text-style {:fontSize   (if p? 24 18)
                                            :fontWeight m/FontWeight.w400
                                            :color      (if p? m/Colors.green m/Colors.red)})))}
              (let [p (mget (fmu :primer) :prime?)]
                (cond
                  (nil? p) "..."
                  (true? p) "Yep!!"
                  (false? p) "Nope"
                  :else "#@!%"))))

          (fx/text "Tap for next in 9000011,41,49,59,67,..."))))))

