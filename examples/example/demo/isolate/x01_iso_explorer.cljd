(ns example.demo.isolate.x01-iso-explorer
  "Flutter/MX port of example 2 of https://plugfox.dev/mastering-isolates/"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    [example.demo.isolate.common
     :refer [clock-face slow-is-prime? dbgiso iso-name say-delay]]))

(defn iso-worker [{:keys [msg-type ^SendPort to-main]}]
  ; This is our worker. It...
  ; 1. makes a ReceivePort (wRP) on which to receive tasks;
  ; 2. sends its wRP back to the main iso on its mRP so main can send us tasks; and
  ; 3. starts listening on wRP for tasks.
  ;
  ; ReceivePorts cannot be sent, so main cannot provide that, so
  ; worker makes one and immediately sends back on the to-main port
  (let [task-port (ReceivePort)]
    (dp :worker-sends-its-receiver (.-sendPort task-port))
    (.send to-main {:msg-type  :config
                    :task-port (.-sendPort task-port)})
    (.listen task-port
      (fn [{:keys [msg-type of-integer] :as task}]
        (case msg-type
          :compute-factorial (let [r (atom 1)]
                               (doseq [i (range 1 (inc of-integer))]
                                 (swap! r * i)
                                 (dp :worker-sending-result :task i :factorial= @r)
                                 (.send to-main {:msg-type   :factorial
                                                 :of-integer i
                                                 :value      @r}))
                               #_(.send to-main {:msg-type :eoj}))
          (dp :WORKER-UNEXPECTED-TASK!!!!!!! task))))))

(defn make-app []
  (fx/material-app
    {:title "Mastering Isolates #2"}
    {; this second map is for custom state
     ; these first parameters are plain CLJD values we will need different places
     :to-main         (ReceivePort)
     ; new for CLJD MX, a formula cell can be specified as async?
     ; MX internally pretends the value starts as nil, executes a .then on the true value, a future,
     ; and in the .then handler reactively mutates the iso property to take on the deferred result.
     ; Here, though, the watch function handles everything. We could break it out into a separate cell
     ; which would begin: (cF (when-let [iso (mget me :worker-iso)}...
     :worker-iso      (cF+ [:async? true
                            :watch (fn [_ me worker prior _]
                                     (when worker
                                       (dp :got-worker-isolate! worker))
                                     (when (and (mx-bound? prior) prior)
                                       (dbgiso :killing-prior prior)
                                       (.kill ^Isolate prior)))]
                        (when (mget (fm* :on-off) :value)
                          (Isolate.spawn iso-worker
                            {:msg-type :config
                             ; ReceivePorts cannot be sent between Isolates, but their SendPorts can
                             :to-main  (.-sendPort ^ReceivePort (mget me :to-main))})))
     :result-listener (cF+ []
                        (when (mget me :worker-iso)
                          (dp :main-starts-listening)
                          (.listen ^ReceivePort (mget me :to-main)
                            (fn [message]
                              (dp :main-hears message)
                              (case (:msg-type message)
                                :config (do (dp :result-config!! message)
                                          (wmx-iso
                                            (dp :main-msets-task-out-port message)
                                            (mset! me :task-out-port (:task-port message))))
                                :factorial (dp :factorial-of (:of-integer message) :is (:value message))
                                :eoj (do (dp :eoj!!!!)
                                       (.close ^ReceivePort (mget me :to-main))
                                       (.kill ^Isolate (mget me :worker-iso))))))))
     :task-out-port   (cI nil :watch (fn [_ me new _ _]
                                       (dp :task-out-port-now new)))
     :dispatcher      (cF (when-let [task2w (mget me :task-out-port)]
                            ; now we have a pipe to the worker, and can send it our one task: 7
                            (dp :dispatcher-sending-to-task-out task2w)
                            (.send ^SendPort task2w
                              {:msg-type   :compute-factorial
                               :of-integer 3})))            ; <======== BINGO! task dispatch
     }
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Isolate Explorer")})}
      (fx/column
        (clock-face)
        (fx/elevated-button
          {:onPressed (as-dart-callback []
                        (wmx-iso (mswap! me :value not)))}
          {:name  :on-off
           :value (cI true)}
          (fx/text (if (mget (fmu :on-off) :value) "Kill" "Spawn")))
        (fx/elevated-button
          {:onPressed (cF (when-let [iso ^Isolate? (mav :worker-iso)]
                            (as-dart-callback []
                              (wmx-iso
                                (dbgiso :pinging iso)
                                (.ping iso (mav :task-out-port)
                                  .response (str {:msg "pong"})
                                  .priority Isolate.immediate)))))}
          {:name :pinger}
          (fx/text "Ping"))))))
