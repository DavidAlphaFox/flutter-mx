(ns example.demo.isolate.x01-simple-bidirectional-link
  "Flutter/MX port of example 2 of https://plugfox.dev/mastering-isolates/"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]))

#_(defn entry-point [^SendPort send2main]
    (let [rcvPort (ReceivePort)]
      (.send send2main (.-sendPort rcvPort))
      (.listen rcvPort (fn [message]
                         (when (int? message)
                           (let [r (atom 1)]
                             (doseq [i (range 1 (inc message))]
                               (swap! r * i)
                               (dp :sending2main i :facto= @r)
                               (.send send2main (str i "! = " @r)))))))))

(defn make-app []
  (fx/material-app
    {:title "Mastering Isolates #2"}
    {; this second map is for custom state
     ; these first parameters are plain CLJD values we will need different places
     :result-port                (ReceivePort)
     ; new for CLJD MX, a formula cell can be specified as async?
     ; MX internally pretends the value starts as nil, executes a .then on the true value, a future,
     ; and in the .then handler reactively mutates the iso property to take on the deferred result.
     ; Here, though, the watch function handles everything. We could break it out into a separate cell
     ; which would begin: (cF (when-let [iso (mget me :worker-iso)}...
     :worker-iso                    (cF+ [:async? true
                                   :watch (fn [_ me worker _ _]
                                            (when worker
                                              (dp :got-worker-isolate! worker)
                                              ; nb: watch functions are free to MGET other properties and are guaranteed
                                              ; those properties will be consistent reactively.
                                              (.listen ^ReceivePort (mget me :result-port)
                                                (fn [message]
                                                  ; Hmmm. Instead of insisting that the first message back from the
                                                  ; isolate be the .-sendPort of its ReceivePort, we assume the isolate does that
                                                  ; first, as it should.
                                                  (cond
                                                    ; main property send2Isolate is waiting on its Completer to
                                                    ; resolve with the isolate's SendPort, aka the first message back. So when
                                                    ; we see a SendPort, we complete with that.
                                                    (dart/is? message SendPort)
                                                    (.complete ^Completer (mget me :await-worker-task-port) message)

                                                    (string? message)
                                                    (dp :x01-simple-rcv!! message))))))]
                               (Isolate.spawn
                                 ; (we could also use here the entry-point defn above)
                                 ; This is our worker. It:
                                 ; 1. makes a ReceivePort on which to receive tasks
                                 ; 2. sends its RP to the main isolate so it can send us tasks
                                 ; 3. starts listening on its RP for tasks
                                 ; 4. when it gets an N, it iterates from 1 to N inclusive sending factorials to main
                                 (fn entry-point [^SendPort send2main]
                                   (let [rcvPort (ReceivePort)]
                                     (.send send2main (.-sendPort rcvPort))
                                     (.listen rcvPort (fn [message]
                                                        (when (int? message)
                                                          (let [r (atom 1)]
                                                            (doseq [i (range 1 (inc message))]
                                                              (swap! r * i)
                                                              (dp :worker-result :task i :factorial= @r)
                                                              (.send send2main (str i "! = " @r)))))))))
                                 ; next is a positional arg that will be supplied to the provided entry-point.
                                 ; main iso offers the sendPort of its ReceivePort as param-0
                                 (.-sendPort ^ReceivePort (mget me :result-port))
                                 .errorsAreFatal true
                                 .debugName "MyIsolate"))
     :await-worker-task-port (Completer)
     :task-to-worker-port    (cF+ [:async? true
                                   ; this watch is purely for tracing
                                   :watch (fn [_ _ new _ _] (dp :got-sendPort-to-worker! new))]
                               (.-future ^Completer (mget me :await-worker-task-port)))
     :dispatcher             (cF
                               ; super important: the when-let effectively waits on the :task-to-worker-port
                               ; value being delivered by the isolate, because ::task-to-worker-port is :async?,
                               ; and those start as nil, then get their values when the future completes.
                               (when-let [task-send-port (mget me :task-to-worker-port)]
                                 ; now we have a pipe to the isolate, and can send it the task 7
                                 (dp :dispatcher-sees-task-port-to-worker task-send-port)
                                 (.send ^SendPort task-send-port 7))) ; <======== BINGO! task dispatch
     :clean-up               (cF+ [:async? true
                                   :watch (fn [_ me new prior _]
                                            (when (= new :fini)
                                              ; or we could test (mx-bound? prior), then skip the delayed computation
                                              (dp :cleaning-up!!)
                                              (.close ^ReceivePort (mget me :result-port))
                                              (.kill ^Isolate (mget me :worker-iso))))]
                               ; this is a completely hacky way of knowing when to wrap-up.
                               ; good enough for now.
                               (Future.delayed (Duration .seconds 1) (fn [] :fini)))
     }
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Simple BidirectionalLink")})})))

;/// --- The original -------------------------------------------------
;
;/// Let's upgrade the previous example to use an isolate with
;/// bidirectional communication using a [ReceivePort] and a [SendPort] pairs.
;
;import 'dart:async';
;import 'dart:isolate';
;void entryPoint(SendPort send2main) {
;  final rcvPort = ReceivePort(); // ReceivePort for the spawned isolate.
;  send2main.send(rcvPort.sendPort); // Send the SendPort to the main isolate.
;  // Listen to the ReceivePort and calculate the factorial.
;  rcvPort.listen((message) {
;    if (message is! int) return; // Ignore messages of other types.
;    for (var i = 1, r = 1; i <= message; i++, r *= i) {
;      // Send a message to the main isolate.
;      send2main.send('$i! = $r');
;    }
;  });
;}
;
;void main() => Future<void>(() async {
;      final rcvPort = ReceivePort(); // ReceivePort for the main isolate.
;      final isolate = await Isolate.spawn<SendPort>(
;        entryPoint,
;        rcvPort.sendPort,
;        errorsAreFatal: true,
;        debugName: 'MyIsolate',
;      );
;      final completer = Completer<SendPort>(); // For awaiting the SendPort.
;      rcvPort.listen((message) {
;        if (message is SendPort) completer.complete(message);
;        if (message is String) print(message);
;      });
;      final send2Isolate = await completer.future; // Get the SendPort.
;      send2Isolate.send(7); // Send a message to the spawned isolate.
;      await Future<void>.delayed(const Duration(seconds: 1));
;      rcvPort.close(); // Close the ReceivePort.
;      isolate.kill(); // Kill the isolate.
;    });
;
