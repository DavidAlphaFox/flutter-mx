(ns example.demo.isolate.ixp.iso-control
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ["dart:convert" :as convert]
    [clojure.string :as str]
    [clojure.walk :as walk]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]

    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    [example.demo.isolate.common
     :refer [clock-face slow-is-prime? dbgiso iso-name say-delay]]))

(defn on-off []
  (fx/elevated-button+icon
    {:onPressed (as-dart-callback []
                  (mswap! me :value not))
     :label     (cF (m/Text (if (mget me :value) "Clear" "Spawn")))
     :icon      (cF (if (mget me :value) (m/Icon m/Icons.cancel) (m/Icon m/Icons.play_arrow)))}
    {:name  :on-off
     :value (cI true)}))

(defn pause-resume []
  (fx/elevated-button+icon
    {:onPressed (cF (when-let [iso ^Isolate? (mav :iso)]
                      (as-dart-callback []
                        (mswap! (fasc :app) :iso-paused? not))))
     :label     (cF (m/Text (if (mget me :value) "Resume" "Pause")))
     :icon      (cF (m/Icon (if (mget me :value) m/Icons.play_arrow m/Icons.pause)))}
    {:name  :paused?
     :value (cF (mav :iso-paused?))}))

(defn kill []
  (fx/elevated-button+icon
    {:onPressed (cF (when-let [iso (mav :iso)]
                      (as-dart-callback []
                        (dbgiso :onpress-killing-iso iso)
                        (.kill ^Isolate iso))))
     :label     (m/Text "Kill")
     :icon      (m/Icon m/Icons.cancel)}))

(defn ping [ping-text]
  (let [ping-id (atom -1)]
    (fx/elevated-button+icon
      {:onPressed (cF (when-let [iso (mav :iso)]
                        (when-let [to-iso (mav :to-iso)]
                          (as-dart-callback []
                            (dbgiso :onpresspinging-iso iso)
                            (.ping ^Isolate iso to-iso
                              .response (convert/jsonEncode
                                          (walk/stringify-keys
                                            {:msg-type "ping"
                                             :response (str (swap! ping-id inc) ": " ping-text)}))
                              .priority Isolate.immediate)))))
       :label     (m/Text "Ping")
       :icon      (m/Icon m/Icons.network_ping)})))

