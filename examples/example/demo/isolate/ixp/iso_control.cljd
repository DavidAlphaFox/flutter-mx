(ns example.demo.isolate.ixp.iso-control
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ["dart:convert" :as convert]
    ["dart:math" :as math]
    [clojure.string :as str]
    [clojure.walk :as walk]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]

    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    [example.demo.isolate.common
     :refer [clock-face slow-is-prime? just-slow-is-prime?
              dbgiso iso-name say-delay]]))

(defn on-off []
  (fx/elevated-button+icon
    {:label     (cF (m/Text (if (mget me :value) "Clear" "Spawn")))
     :icon      (cF (if (mget me :value) (m/Icon m/Icons.cancel) (m/Icon m/Icons.play_arrow)))
     :onPressed (dart-cb []
                  (mswap! me :value not))}
    {:name  :on-off
     :value (cI true)}))

(defn start-paused []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:key             (m/ValueKey "start-paused")
       :controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Start Paused")
       :value           (cF (mav :start-paused?))
       :onChanged       (cF (when-not (mav :iso)
                              (fn [new] (wmx-iso (mswap! (fasc :app) :start-paused? not)))))})))

(defn pause-resume []
  (fx/elevated-button+icon
    {:label     (cF (m/Text (if (mav :iso-paused?) "Resume" "Pause")))
     :icon      (cF (m/Icon (if (mav :iso-paused?) m/Icons.play_arrow m/Icons.pause)))
     :onPressed (cF (when-let [iso ^Isolate? (mav :iso)]
                      (dart-cb []
                        (mswap! (fasc :app) :iso-paused? not))))}))

(defn kill []
  (fx/elevated-button+icon
    {:label     (m/Text "Kill")
     :icon      (m/Icon m/Icons.cancel)
     :onPressed (cF (when-let [iso (mav :iso)]
                      (dart-cb []
                        (.kill ^Isolate iso))))}))

(defn ping [ping-text]
  (let [ping-id (atom -1)]
    (fx/elevated-button+icon
      {:label     (m/Text "Ping")
       :icon      (m/Icon m/Icons.network_ping)
       :onPressed (cF (when-let [iso (mav :iso)]
                        (when-let [to-iso (mav :to-iso)]
                          (dart-cb []
                            (.ping ^Isolate iso to-iso
                              ; ping is fussier about what it will allow in a response, so
                              ; we convert the map to a string and decode on the other side
                              .response (convert/jsonEncode
                                          (walk/stringify-keys
                                            {:msg-type "ping"
                                             :response (str (swap! ping-id inc) ": " ping-text)}))
                              .priority Isolate.immediate)))))})))

;;; --- job starters -----------

(defn m99 [n]
  (str (quot n 1000000) "m" (mod n 1000000)))

(defn decide-prime-in-main [n]
  (fx/elevated-button
    {:onPressed (cF (dart-cb []
                      (doto (.-instance m/WidgetsBinding)
                        (.addPostFrameCallback
                          (fn [^Duration d]
                            (wmx-iso
                              (let [r (just-slow-is-prime? n)]
                                (mset! (fasc :app) :worker-result
                                  {:msg-type :prime-decision
                                   :run-id   (rand-int 9999)
                                   :n        n
                                   :value    r}))))))))}
    (m/Text (str "Main " (m99 n)))))

(defn decide-prime? [n]
  (fx/elevated-button
    {:onPressed (cF (when-let [iso (mav :iso)]
                      (when-let [to-iso (mav :to-iso)]
                        (dart-cb []
                          (.send ^SendPort to-iso
                            {:msg-type :decide-prime?
                             :n        n})))))}
    (m/Text (str "Iso " (m99 n)))))

(defn run-prime? [n]
  (fx/elevated-button
    {:onPressed (dart-cb []
                  (mset! (fasc :app) :run-job n))}
    (m/Text (str "Iso.run " (m99 n)))))

;;; --- run enabled? ------------------------------------------------

(defn run-enabled? []
  ; this is a silly option just to demonstrate when ephemerals are indispensable
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Run OK?")
       :value           (cI true)
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :run-ok?})))