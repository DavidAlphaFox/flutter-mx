(ns example.demo.isolate.ixp.ixp
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.isolate.common :as cmn
     :refer [clock-face slow-is-prime? dbgiso say-delay]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]))

(defn factorial-worker [n]
  (dbgiso :worker-entry)
  (reduce (fn [a b]
            (let [f (* a b)]
              (dp :factorial-of b :is f)
              f))
    (range 1 (inc n)))

  ; let us not trust dart:io to kill an iso on return...
  #_(do
      (dbgiso :worker-about-to-iso.exit)
      (Isolate.exit)
      (dp :YOU_SHOULD_NOT_SEE_THIS_BECAUSE_WE_EXITED!!!!!!!!!!!!)))

(defn make-app []
  (fx/material-app {}
    {:iso (cF+ [:async? true
                :watch (fn [_ me new-iso _ _]
                         (dbgiso :watch-sees-new-iso! new-iso)
                         (when new-iso
                           (say-delay 1 :main-watch-pre-kill)
                           (.kill ^Isolate new-iso .priority Isolate.immediate)
                           ; ...or Isolate.beforeNextEvent
                           (dbgiso :watch-just-killed-iso new-iso)))]
            (Isolate.spawn
              factorial-worker 5))}
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Intentionally Left Blank")})})))