(ns example.demo.isolate.x00-compute
  (:require
    ["package:flutter/gestures.dart" :as g]
    ["package:flutter/material.dart" :as m
     :refer [Canvas Size]]
    ["package:flutter/painting.dart" :as p]
    ["package:vector_math/vector_math_64.dart" :as vm]
    ["dart:math" :as math
     :refer [pi cos sin]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    ["package:flutter/foundation.dart" :as fnd]

    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx]
    [example.demo.isolate.common :as cmn
     :refer [clock-face slow-is-prime? use-compute?]]))

(declare prime-decision)

(defn make-app []
  (let [title "Smooth Clock"]
    (fx/material-app
      {:title title}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})
         :floatingActionButton
         (fx/floating-action-button
           {:onPressed (fx/as-dart-callback []
                         (wmx-iso
                           (dp :bump!------------------)
                           (mswap! (fmu :primer) :of + 2)))}
           (m/Icon m/Icons.play_arrow
             .color m/Colors.black))}
        (fx/column
          {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (clock-face)
          (use-compute? false)
          (fx/row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
            (fx/text {:style (p/TextStyle .fontSize 24)}
              {:name      :primer
               :of        (cI 9000039)
               :prime? (cF+ [:async? true
                                #_#_ :watch (fn [_ me new old _]
                                         (dp :prime-of? new))]
                            (let [n (mget me :of)
                                  use? (mx/muv :use-compute?)]
                              (dp :prime?-computing!!!! n :in-iso? use?)
                              (if use?
                                (fnd/compute slow-is-prime? n)
                                (future (slow-is-prime? n)))))}
              "" #_ (str "Is " (mget me :of) " prime? "))
            ; ... results:
            (prime-decision))

          (fx/text {:style (p/TextStyle .fontSize 16)}
            "Tap for next in 9000041,.49,.59,.67,.."))))))

(defn prime-decision []
  (fx/sized-box {:height 32}
    (fx/text
      {:style (cF (let [prime? (mget (fmu :primer) :prime?)]
                    (fx/text-style
                      {:fontSize   24
                       :fontWeight m/FontWeight.w400
                       :color      (if prime? m/Colors.green m/Colors.red)})))}
      (let [prime? (mget (fmu :primer) :prime?)]
        (dp :decision-sees (mget (fmu :primer) :of) :prime? prime? )
        (str "Is " (mget (fmu :primer) :of) " prime? "
          (cond
            (nil? prime?) "..."
            (true? prime?) "Yep!!"
            (false? prime?) "Nope"
            :else "#@!%"))))))

