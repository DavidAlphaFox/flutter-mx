(ns example.demo.tts.fts
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.foundation :refer [PObserver]]
    [tilton.mx.model.peek :refer [Model]]
    [tilton.mx.model.core :as md]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv muiv m*v fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]))

;;; --- start-up ----------------------------------------------

(deftype MXFlutterTTS []
  :extends Model
  PObserver
  (observe [this prop me new-value prior-value cell]))

(defn make-flutter-tts []
  (md/make
    :mx-type (MXFlutterTTS.)
    :tts (cFonce
           (doto ^FlutterTts (FlutterTts)
             (.setSharedInstance true)
             (.setStartHandler
               #(wmx-iso (mset! me :play-status :on)))
             (.setCompletionHandler
               #(wmx-iso (mset! me :play-status :off)))
             (.setCancelHandler
               #(wmx-iso (mset! me :play-status :off)))
             (.setPauseHandler
               #(wmx-iso (mset! me :play-status :paused)))
             (.setContinueHandler
               #(wmx-iso (mset! me :play-status :on)))
             (.setErrorHandler
               (fn [e] (dp :flutter-error!!!!!!!! #_e)))))
    :lang-geos (cF+ [:async? true
                     :async-then (fn [c locales]
                                   (group-by lg-lang
                                     (take 999 (sort locales))))]
                 (.-getLanguages ^FlutterTts (mget me :tts)))
    ;; play-status = [:off | :on | :paused}
    :play-status (cI :off)))

(defmacro app-tts []
  `(tilton.mx.api/mget
     (tilton.mx.api/mget
       (tilton.mx.api/fasc-inclusive :app)
       :fts)
     :tts))

(defmacro app-fts-status []
  `(tilton.mx.api/mget
     (tilton.mx.api/mget
       (tilton.mx.api/fasc-inclusive :app)
       :fts)
     :play-status))

(defmacro app-fts-progress []
  `(tilton.mx.api/mget
     (tilton.mx.api/mget
       (tilton.mx.api/fasc-inclusive :app)
       :fts)
     :progress))

(defmacro app-lang-geos []
  `(tilton.mx.api/mget
     (tilton.mx.api/mget
       (tilton.mx.api/fasc-inclusive :app)
       :fts)
     :lang-geos))

;;; --- speech control actions -----------------------------------------------

(defn fts-speak [me]
  (let [tts ^FlutterTts (app-tts)
        speech (muv :text-in)]
    (when-let [lg (m*v :lang-chooser :lg-current)]
      (when (not (str/blank? speech))
        (.setPitch tts (muiv :pitch))
        (.setVolume tts (muiv :volume))
        (.setLanguage tts lg)
        (.setSpeechRate tts (muiv :speech-rate))
        (.speak tts speech)))))

(defn fts-pause [me]
  (let [tts ^FlutterTts (app-tts)]
    (await (.pause tts))))

(defn fts-stop [me]
  (let [tts ^FlutterTts (app-tts)]
    (await (.stop tts))))

(defn lg-lang
  "Return the leading two-char language designator of a five char language-region pair."
  [lg]
  ;; eg "fr-FR" -> "fr"
  ;; used to group FTS languages by languages
  (subs lg 0 2))

(defn lg-geo [lg]
  (subs lg 3))