(ns example.demo.tts.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu fm* maprop mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.util :refer [fts-init do-speak do-pause do-stop lg-lang choice-header watch-dbg]]
    [example.demo.tts.component
     :refer [lang-chooser geo-chooser speech-input speaking-control]]))

(def yeats-second-coming
  (str "\"The Second Coming\"\nby Wm B Yeats\n\n"
    "Turning and turning in the widening gyre\n"
    "The falcon cannot hear the falconer;\n"
    "Things fall apart; the centre cannot hold;\n"
    "Mere anarchy is loosed upon the world,"))

(def graves-jealousy
  (str "\"Jealousy\"\nby Robert Graves\n\n"
    "I'd die for you, or you for me, \n"
    "So furious is our jealousy-- \n"
    "And if you doubt this to be true, \n"
    "Kill me outright, lest I kill you."))

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (cF+ [:watch fts-init]
                      (FlutterTts))
     :lang-geo-tree (cF+ [:async? true
                          :async-then (fn [c lg-flat]
                                        (group-by lg-lang (sort lg-flat)))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        {:crossAxisAlignment m/CrossAxisAlignment.stretch}
        (choice-header "Languages")
        (lang-chooser)
        (choice-header "Geography")
        (geo-chooser)
        (speech-input yeats-second-coming)
        (speaking-controls)
        (equalizer)))))

;;; --- play, stop, pause -------------------------------------------------------

(defn speaking-controls []
  (container {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      {:name        :dash
       :play-status (cI :off)}
      (if (some #{(maprop :play-status)} [:off :paused])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause))
      (opacity {:opacity (cF (if (some #{(maprop :play-status)} [:off])
                               0.0 1.0))}
        (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop)))))

;;; --- equalizer rate, pitch, volume sliders -----------------------------------------------------------

(def equalizer-sliders
  [["Volume" :volume m/Colors.blue 0.3 0 1 10
    (fn [_ me new _ _]
      (.setVolume ^FlutterTts (maprop :fts) new))]
   ["Pitch" :pitch m/Colors.red 1.0 0.5 2 15
    (fn [_ me new _ _]
      (.setPitch ^FlutterTts (maprop :fts) new))]
   ["Rate" :speech-rate m/Colors.green 0.5 0 1 20
    (fn [_ me new _ _]
      (.setSpeechRate ^FlutterTts (maprop :fts) new))]])

(defn equalizer []
  (column
    (doall
      (for [[label & opnds] equalizer-sliders]
        (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
          (fx/row {:mainAxisAlignment m/MainAxisAlignment.end
                   :mainAxisSize      m/MainAxisSize.min}
            (container {:width     64
                        :alignment m/Alignment.topRight}
              (m/Text label))
            (apply property-slider label opnds)))))))

(defn property-slider [label prop color init-val min max divisions value-watch]
  (fx/slider
    {:value       (cI init-val :watch value-watch)
     :onChanged   (cF #(mx/wmx-iso
                         (mset! me :value %)))
     :min         (+ 0.0 min)
     :max         (+ 0.0 max)
     :divisions   divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}
    {:name prop}))

