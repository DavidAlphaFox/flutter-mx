(ns example.demo.tts.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu fm* maprop mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.util :refer [fts-init do-speak do-pause do-stop lg-lang choice-header watch-dbg]]
    [example.demo.tts.component
     :refer [lang-chooser geo-chooser text-input speaking-control]]))

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (cF+ [:watch fts-init]
                      (FlutterTts))
     :lang-geo-tree (cF+ [:async? true
                          :async-then (fn [c lg-flat]
                                        (group-by lg-lang (sort lg-flat)))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))
     ; ----------------------------------------------------------------------------
     }
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        (choice-header "Languages")
        (lang-chooser)
        (geo-chooser)
        (text-input)

        (container
          {:color m/Colors.yellow
           :padding (m/EdgeInsets.symmetric .horizontal 16.0)}
          (fx/text {:textAlign m/TextAlign.right}
            {:name     :chiron
             :progress (cI nil)
             :phrase #_ ["four" "score" "and" "seven"]
             (cF (when (not= :off (mget (fm* :dash) :play-status))
                   (let [[text startOffset endOffset word] (mget me :progress)]
                     (if (nil? word) []
                       (take 8 (conj (if (mx-bound? _cache) _cache []) word))))))}
            (str/join "..." (mget me :phrase))))
        (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (speaking-controls)
          (auto-play))
        (equalizer)))))

(defn auto-play []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Auto-play")
       :value           (cI false)
       :onChanged       (cF (fn [new]
                              (wmx-iso (mswap! me :value not))
                              (when new
                                (do-speak me))))}
      {:name :auto-play})))

;;; --- play, stop, pause -------------------------------------------------------

(defn speaking-controls []
  (container
    {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row
      {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      {:name        :dash
       :play-status (cI :off :watch watch-dbg)}
      (if (some #{(maprop :play-status)} [:off :paused])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" do-speak)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" do-pause))
      (stop-button))))

(defn stop-button []
  (ignore-pointer {:ignoring (cF (mget me :disabled?))}
    {:disabled? (cF (= :off (maprop :play-status)))}
    (opacity {:opacity (cF (if (maprop :disabled?)
                             0.2 1.0))}
      (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" do-stop))))

;;; --- equalizer property sliders -----------------------------------------------------------

(defn equalizer []
  (column
    (doall (for [[label & opnds]
                 [["Volume" :volume m/Colors.blue 0.3 0 1 10
                   (fn [_ me new _ _]
                     (.setVolume ^FlutterTts (maprop :fts) new))]
                  ["Pitch" :pitch m/Colors.red 1.0 0.5 2 15
                   (fn [_ me new _ _]
                     (.setPitch ^FlutterTts (maprop :fts) new))]
                  ["Rate" :speech-rate m/Colors.green 0.5 0 1 20
                   (fn [_ me new _ _]
                     (.setSpeechRate ^FlutterTts (maprop :fts) new))]]]
             (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
               (fx/row
                 {:mainAxisAlignment m/MainAxisAlignment.end
                  :mainAxisSize      m/MainAxisSize.min}
                 (container {:width     64
                             :alignment m/Alignment.topRight}
                   (m/Text label))
                 (apply property-slider label opnds)))))))

(defn property-slider [label prop color init-val min max divisions value-watch]
  (fx/slider
    {:value       (cI init-val :watch value-watch)
     :onChanged   (cF #(mx/wmx-iso
                         (mset! me :value %)
                         (when (mget (fm* :auto-play) :value)
                           (do-stop me)
                           (do-speak me))))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}
    {:name prop}))



;; todo if user changes volume et al while paused, warn that it will not take effect until fresh play
