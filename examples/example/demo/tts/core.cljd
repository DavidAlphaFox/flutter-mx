(ns example.demo.tts.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.util :as util
     :refer [fts-init fts-speak fts-pause fts-stop lg-lang choice-header watch-dbg]]
    [example.demo.tts.component :as comp
     :refer [lang-chooser geo-chooser speech-input speaking-control auto-play rate-limit?
             equalizer]]
    [example.demo.tts.poetry :as poetry]))

;;; --- play, stop, pause -------------------------------------------------------

(defn dashboard []
  (container {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      {:name        :dash
       :progress    (cI nil)
       :play-status (cI :off)}
      (if (some #{(mav :play-status)} [:off :paused])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" fts-speak)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" fts-pause))
      (ignore-pointer {:ignoring (cF (or (= :off (mav :play-status))
                                       (and (muv :rate-limit?)
                                         (let [{:keys [full-text word-end]}
                                               (mav :progress)]
                                           (< word-end (* 0.25 (count full-text)))))))}
        (opacity {:opacity (cF (if (mav :ignoring) 0.15 1.0))}
          (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" fts-stop))))))

;;; ---  make app --------------------------------------------

(defn chyron []
  (container
    {:padding (m/EdgeInsets.symmetric .horizontal 16.0)}
    (fx/text {:textAlign m/TextAlign.center}
      {:name   :chyron
       :phrase (cF (when (not= :off (mget (fm* :dash) :play-status))
                     (let [{:keys [word]} (muv :dash :progress)]
                       (if (nil? word) []
                         (take-last 5
                           (concat (if (mx-bound? _cache) _cache [])
                             [word]))))))}
      (str/join "..." (mget me :phrase)))))

(defn make-app []
  (material-app {}
    {:name      :app
     :fts       (cF+ [:watch fts-init]
                  (FlutterTts))
     :lang-geos (cF+ [:async? true
                      :async-then (fn [c locales]
                                    (group-by lg-lang (sort locales)))]
                  (.-getLanguages ^FlutterTts (mget me :fts)))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        {:crossAxisAlignment m/CrossAxisAlignment.stretch}
        (choice-header "Languages")
        (lang-chooser)
        (choice-header "Geography")
        (geo-chooser)
        (speech-input poetry/shakespeare-sonnet-24)
        (chyron)
        (dashboard)
        (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
          (auto-play)
          (rate-limit?))
        (equalizer)))))

