(ns example.demo.tts.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu fmuval fm* maprop mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.util :as util
     :refer [fts-init fts-speak fts-pause fts-stop lg-lang choice-header watch-dbg]]
    [example.demo.tts.component :as comp
     :refer [lang-chooser geo-chooser speech-input speaking-control auto-play]]
    [example.demo.tts.poetry :as poetry]))

;;; --- play, stop, pause -------------------------------------------------------

(defn speaking-controls []
  (container {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      {:name        :dash
       :play-status (cI :off)}
      (if (some #{(maprop :play-status)} [:off :paused])
        (speaking-control m/Colors.green m/Colors.greenAccent m/Icons.play_arrow "PLAY" fts-speak)
        (speaking-control m/Colors.blue m/Colors.blueAccent m/Icons.pause "PAUSE" fts-pause))
      (opacity {:opacity (cF (if (= :off (maprop :play-status)) 0.0 1.0))}
        (speaking-control m/Colors.red m/Colors.redAccent m/Icons.stop "STOP" fts-stop)))))

;;; --- equalizer rate, pitch, volume sliders -----------------------------------------------------------

(defn property-slider [label prop color init-val min max divisions value-watch]
  (fx/slider
    {:value       (cI init-val :watch value-watch)
     :onChanged   (cF #(mx/wmx-iso
                         (mset! me :value %)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}
    {:name prop}))

(def equalizer-sliders
  [["Volume" :volume m/Colors.blue 0.3 0 1 10
    (fn [_ me new _ _]
      (.setVolume ^FlutterTts (maprop :fts) new))]
   ["Pitch" :pitch m/Colors.red 1.0 0.5 2 15
    (fn [_ me new _ _]
      (.setPitch ^FlutterTts (maprop :fts) new))]
   ["Rate" :speech-rate m/Colors.green 0.5 0 1 20
    (fn [_ me new _ _]
      (.setSpeechRate ^FlutterTts (maprop :fts) new))]])

(defn equalizer []
  (column
    (mapv (fn [[label & opnds]]
            (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
              (fx/row {:mainAxisAlignment m/MainAxisAlignment.end
                       :mainAxisSize      m/MainAxisSize.min}
                (container {:width     64
                            :alignment m/Alignment.topRight}
                  (m/Text label))
                (apply property-slider label opnds))))
      equalizer-sliders)))

;;; ---  make app --------------------------------------------

(defn make-app []
  (material-app {}
    {:name          :app
     :fts           (cF+ [:watch fts-init]
                      (FlutterTts))
     :lang-geo-tree (cF+ [:async? true
                          :async-then (fn [c locales]
                                        (group-by lg-lang (sort locales)))]
                      (.-getLanguages ^FlutterTts (mget me :fts)))}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter TTS Demo")})}
      (column
        {:crossAxisAlignment m/CrossAxisAlignment.stretch}
        (choice-header "Languages")
        (lang-chooser)
        (choice-header "Geography")
        (geo-chooser)
        (speech-input poetry/graves-jealousy)
        (speaking-controls)
        (equalizer)))))

