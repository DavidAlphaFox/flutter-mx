(ns example.demo.tts.component
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [example.demo.tts.fts]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inclusive
             fmu muv muiv m*v mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.fts :refer [fts-restart app-tts app-fts-status app-lang-geos fts-speak fts-pause fts-stop
                                  lg-geo lg-lang]]))

;;; --- auto play --------------------------------------------------------

(defn auto-play []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Auto-play")
       :value           (cI false :watch (fn [_ me new prior _]
                                           (when (and (mx-bound? prior)
                                                   new
                                                   (= :off (app-fts-status)))
                                             (fts-speak me))))
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :auto-play})))

(defn rate-limit? []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Limit")
       :value           (cI false)
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :rate-limit?})))

;;; --- lang/geo choosers -------------------------------------------------

(defn lang-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.8
       :padding         (m/EdgeInsets.all 8)}
      {:name       :lang-chooser
       :lg-pref    "en-AU"                                  ;; faux stored preference
       :lg-current (cF+n [:sst nil
                          :watch (fn [_ me new prior c]
                                   (when (mx-bound? prior)
                                     (when (muv :auto-play)
                                       (fts-restart me))))]
                     (mget me :lg-pref))
       :lg-lang    (cF (lg-lang (mget me :lg-current)))     ;; avoid excess work by geo-chooser
       :lg-geo     (cF (lg-geo (mget me :lg-current)))
       }
      (map-indexed lang-button
        (take 99                                            ;; hack widget layout issue
          (sort (keys (app-lang-geos))))))))

(defn geo-chooser []
  (do                                                       ;; expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.8
       :padding         (m/EdgeInsets.all 8)
       :shrinkWrap      true}
      {:name :geo-chooser}
      (map-indexed geo-button
        (when-let [lgc (muv :lang-chooser :lg-lang)]
          (dp :geo-sees-lang lgc)
          (get (app-lang-geos) lgc))))))

;;; --- lang and geo buttons ----------------------------------------------------

(defn lang-button [i lang]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang)
     :onTap (as-dart-callback []
              (mset! (fasc :lang-chooser) :lg-current
                (first (get (app-lang-geos) lang))))}
    {:name :lang-gd}
    (container
      {:decoration (cF (fx/box-decoration
                         {:border (cF (when (= lang (mav :lg-lang))
                                        (.all m/Border .color m/Colors.blue .width 2)))
                          :color  (.-shade50 (cond
                                               (even? i) m/Colors.blue
                                               :else m/Colors.yellow))}
                         #_ {:unwrapped? true}))}
      {:name :lang-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            lang))))))

(defn geo-button [i lang-geo]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang-geo)
     :onTap (as-dart-callback []
              (mset! (fmu :lang-chooser) :lg-current lang-geo))}
    {:name :geo-gd}
    (container
      {:decoration (cF (fx/box-decoration
                         {:border (cF (when (= (lg-geo lang-geo) (muv :lang-chooser :lg-geo))
                                        (.all m/Border .color m/Colors.blue .width 2)))
                          :color  (.-shade50 (cond
                                               (even? i) m/Colors.blue
                                               :else m/Colors.yellow))}
                         #_ {:unwrapped? true}))}
      {:name  :geo-cont
       :dummy (cI nil)}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            (lg-geo lang-geo)))))))

;;; --- speaking controls ------------------------------------

(defn speaking-control [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:key         (m/ValueKey label)
       :icon        (fx/icon {:icon icon})
       :iconSize    48
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

;;; --- text input --------------------------------------------------------------

(defn speech-input [speech-initial]
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text-field
      {:style      (p/TextStyle
                     .fontFamily "Helvetica Neue"
                     .fontSize 20.0)
       :controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI speech-initial)})))


;;; --- equalizer rate, pitch, volume sliders -----------------------------------------------------------

(defn property-slider [label prop color init-val min max divisions watch]
  (fx/slider
    {:value       (cI init-val :watch watch)
     :onChanged   (cF #(mx/wmx-iso
                         (mset! me :value %)
                         (fts-restart me)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str (mget me :value)))
     :activeColor color}
    {:name prop}))

(def equalizer-sliders
  [["Volume" :volume m/Colors.blue 0.3 0 1 10
    (fn [_ me new _ _]
      (.setVolume ^FlutterTts (app-tts) new))]
   ["Pitch" :pitch m/Colors.red 1.0 0.5 2 15
    (fn [_ me new _ _]
      (.setPitch ^FlutterTts (app-tts) new))]
   ["Rate" :speech-rate m/Colors.green 0.5 0 1 20
    (fn [_ me new _ _]
      (.setSpeechRate ^FlutterTts (app-tts) new))]])

(defn equalizer []
  (container {:margin (m/EdgeInsets.only .bottom 24)}
    (column
      (mapv (fn [[label & opnds]]
              (container {:margin (m/EdgeInsets.only .right 24 .bottom 0)}
                (fx/row {:mainAxisAlignment m/MainAxisAlignment.end
                         :mainAxisSize      m/MainAxisSize.min}
                  (container {:width     64
                              :alignment m/Alignment.topRight}
                    (m/Text label))
                  (apply property-slider label opnds))))
        equalizer-sliders))))

(defn choice-header [content]
  (padding {:padding (m/EdgeInsets.all 12)}
    (text
      {:style (p/TextStyle .color m/Colors.black
                .fontSize 20.0)}
      content)))