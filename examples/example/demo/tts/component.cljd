(ns example.demo.tts.component
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts] :as fts]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [example.demo.tts.util :as util]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu fmuval fm* maprop mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]
    [example.demo.tts.util :refer [fts-speak fts-pause fts-stop choice-header lg-lang]]))

;;; --- auto play --------------------------------------------------------

(defn auto-play []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Auto-play")
       :value           (cI true)
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :auto-play})))

;;; --- lang/geo choosers -------------------------------------------------

(defn lang-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.6
       :padding         (m/EdgeInsets.all 8)}
      {:name       :lang-chooser
       :lg-pref    "en-AU"                                  ;; faux stored preference
       :lg-current (cF+n [:watch (fn [_ me new prior c]
                                   (when (mx-bound? prior)
                                     (fts-speak me)))]
                     (mget me :lg-pref))}
      (map-indexed lang-button
        (take 16                                            ;; hack widget layout issue
          (sort (keys (mget (fasc :app) :lang-geo-tree))))))))

(defn geo-chooser []
  (expanded
    (fx/grid-view+count
      {:crossAxisCount  8 :crossAxisSpacing 4
       :mainAxisSpacing 4 :childAspectRatio 1.8
       :padding         (m/EdgeInsets.all 8)
       :shrinkWrap      true}
      (map-indexed geo-button
        (when-let [lgc (lg-lang (mget (fmu :lang-chooser) :lg-current))]
          (get (mget (fasc :app) :lang-geo-tree) lgc))))))

;;; --- lang and geo buttons ----------------------------------------------------

(defn lang-button [i lang]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang)
     :onTap (as-dart-callback []
              (mset! (fasc :lang-chooser) :lg-current
                (first (get (maprop :lang-geo-tree) lang))))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang (lg-lang (maprop :lg-current)))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     {:unwrapped? true})}
      {:name :lang-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            lang))))))

(defn geo-button [i lang-geo]
  (fx/gesture-detector
    {:key   (m/ValueKey. lang-geo)
     :onTap (as-dart-callback []
              (mset! (fmu :lang-chooser) :lg-current lang-geo))}
    (container
      {:decoration (fx/box-decoration
                     {:border (cF (when (= lang-geo (mget (fmu :lang-chooser) :lg-current))
                                    (.all m/Border .color m/Colors.blue .width 2)))
                      :color  (.-shade50 (cond
                                           (even? i) m/Colors.blue
                                           :else m/Colors.yellow))}
                     {:unwrapped? true})}
      {:name :geo-cont}
      (center
        (padding {:padding (m/EdgeInsets.all 4.0)}
          (fx/text
            {:style (p/TextStyle .color m/Colors.black
                      .fontSize 16.0)}
            (subs lang-geo 3)))))))

;;; --- speaking controls ------------------------------------

(defn speaking-control [color splash-color icon label func]
  (column
    {:mainAxisSize      m/MainAxisSize.min
     :mainAxisAlignment m/MainAxisAlignment.center}
    (icon-button
      {:key         (m/ValueKey label)
       :icon        (fx/icon {:icon icon})
       :iconSize    48
       :color       color
       :splashColor splash-color
       :onPressed   (fn [] (func me))})))

;;; --- text input --------------------------------------------------------------

(defn speech-input [speech-initial]
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text-field
      {:style      (p/TextStyle
                     .fontFamily "Helvetica Neue"
                     .fontSize 20.0)
       :controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (as-dart-callback [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI speech-initial)})))


;;; --- equalizer rate, pitch, volume sliders -----------------------------------------------------------

(defn property-slider [label prop color init-val min max divisions value-watch]
  (fx/slider
    {:value       (cI init-val :watch value-watch)
     :onChanged   (cF #(mx/wmx-iso
                         (mset! me :value %)))
     :min         (+ 0.0 min) :max (+ 0.0 max) :divisions divisions
     :label       (cF (str label " " (mget me :value)))
     :activeColor color}
    {:name prop}))

(def equalizer-sliders
  [["Volume" :volume m/Colors.blue 0.3 0 1 10
    (fn [_ me new _ _]
      (.setVolume ^FlutterTts (maprop :fts) new))]
   ["Pitch" :pitch m/Colors.red 1.0 0.5 2 15
    (fn [_ me new _ _]
      (.setPitch ^FlutterTts (maprop :fts) new))]
   ["Rate" :speech-rate m/Colors.green 0.5 0 1 20
    (fn [_ me new _ _]
      (.setSpeechRate ^FlutterTts (maprop :fts) new))]])

(defn equalizer []
  (column
    (mapv (fn [[label & opnds]]
            (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
              (fx/row {:mainAxisAlignment m/MainAxisAlignment.end
                       :mainAxisSize      m/MainAxisSize.min}
                (container {:width     64
                            :alignment m/Alignment.topRight}
                  (m/Text label))
                (apply property-slider label opnds))))
      equalizer-sliders)))

