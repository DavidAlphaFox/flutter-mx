(ns example.demo.tts.util
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fascinc
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render as-dart-callback]]))

;;; --- start-up ----------------------------------------------
(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso  ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))

(defn fts-init
  "Watch function to initialize an FTS instance"
  [_ me newv _ _]
  (when-let [fts ^FlutterTts newv]
    (.setSharedInstance fts true)
    (.setStartHandler fts
      #(try-wmx-iso  (mset! (fm* :dash) :play-status :on)))
    (.setCompletionHandler fts
      #(try-wmx-iso (mset! (fm* :dash) :play-status :off)))
    (.setCancelHandler fts
      #(try-wmx-iso (mset! (fm* :dash) :play-status :off)))
    (.setPauseHandler fts
      #(try-wmx-iso (mset! (fm* :dash) :play-status :paused)))
    (.setContinueHandler fts
      #(try-wmx-iso (mset! (fm* :dash) :play-status :on)))
    (.setErrorHandler fts
      (fn [e]
        (dp :flutter-error!!!!!!!! e)))))

;;; --- speech control actions -----------------------------------------------

(defn fts-speak [me]
  (let [app (mx/fascinc :app)
        fts ^FlutterTts (mget app :fts)
        speech (mget (fm* :text-in) :value)]
    (when-let [lg (mget (fm* :lang-chooser) :lg-current)]
      (when (not (str/blank? speech))
        (dp :speaking!!!!!!!! lg :pitch (mget (fm* :pitch) :value));  :params (mav :speech-rate) (mav :pitch) (mav :volume))
        (.setPitch fts (mget (fm* :pitch) :value))
        (.setVolume fts (mget (fm* :volume) :value))
        (.setLanguage fts lg)
        (.setSpeechRate fts (mget (fm* :speech-rate) :value))
        (.speak fts speech)))))

(defn fts-pause [me]
  (dp :pausing!!!!!!! (minfo me))
  (let [fts ^FlutterTts (mget (fascinc :app) :fts)]
    (await (.pause fts))))

(defn fts-stop [me]
  (dp :stopping!!!!!!! (minfo me))
  (let [fts ^FlutterTts (mget (fascinc :app) :fts)]
    (await (.stop fts))))

;;; --- detritus ------------------------------------------------

(defn lg-lang
  "Return the leading two-char language designator of a five char language-region pair."
  [lg]
  ;; eg "fr-FR" -> "fr"
  ;; used to group FTS languages by languages
  (subs lg 0 2))

(defn choice-header [text]
  (padding {:padding (m/EdgeInsets.all 12)}
    (fx/text
      {:style (p/TextStyle .color m/Colors.black
                .fontSize 20.0)}
      text)))

(defn watch-dbg [slot me new prior c]
  (dp :WATCH slot (minfo me) :new new :prior))