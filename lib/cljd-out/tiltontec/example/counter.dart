import "package:flutter/src/widgets/framework.dart" as fsw_framework;
import "dart:core" as dc;
import "../util/core.dart" as Ukddmlcotu_core;
import "../../cljd/string.dart" as Ukddmlcoc_string;
import "package:flutter/src/rendering/flex.dart" as fsr_flex;
import "../cell/base.dart" as Ukddmlcotc_base;
import "package:flutter/src/painting/text_style.dart" as fsp_text_style;
import "counter.dart" as Ukddmlcote_counter;
import "package:flutter/src/widgets/preferred_size.dart" as fsw_preferred_size;
import "package:flutter/widgets.dart" as f_widgets;
import "package:flutter/src/material/theme_data.dart" as fsm_theme_data;
import "package:flutter/painting.dart" as f_painting;
import "../cell/core.dart" as Ukddmlcotc_core;
import "../cell/observer.dart" as Ukddmlcotc_observer;
import "package:flutter/material.dart" as f_material;
import "../mx-flutter/core.dart" as Ukddmlcotmf_core;
import "../../cljd/core.dart" as Ukddmlcoc_core;
import "../model/core.dart" as Ukddmlcotm_core;

// BEGIN Reify$91
class Reify$91 extends f_widgets.StatefulWidget implements Ukddmlcoc_core.IMeta$iface, Ukddmlcoc_core.IWithMeta$iface {
final meta$2;
final p1$12250_$SHARP_$1;

Reify$91(this.meta$2, this.p1$12250_$SHARP_$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2054_$AUTO_$2, ){
return Ukddmlcote_counter.Reify$91((m$2054_$AUTO_$2 as dc.dynamic), (p1$12250_$SHARP_$1 as dc.dynamic), );
}

fsw_framework.State<fsw_framework.StatefulWidget> createState(){
final dc.List<dc.dynamic> fl$39=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
fl$39[1]=p1$12250_$SHARP_$1;
final Ukddmlcoc_core.PersistentVector $39=Ukddmlcoc_core.$_vec_owning(fl$39, );
return Ukddmlcotu_core.rmap_meta_setf($39, Ukddmlcote_counter.Reify$92(null, p1$12250_$SHARP_$1, ), );
}
}

// END Reify$91

// BEGIN Reify$92
class Reify$92 extends f_material.State implements Ukddmlcoc_core.IMeta$iface, Ukddmlcoc_core.IWithMeta$iface {
final meta$1;
final p1$12250_$SHARP_$1;

Reify$92(this.meta$1, this.p1$12250_$SHARP_$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2054_$AUTO_$1, ){
return Ukddmlcote_counter.Reify$92((m$2054_$AUTO_$1 as dc.dynamic), (p1$12250_$SHARP_$1 as dc.dynamic), );
}

fsw_framework.Widget build(fsw_framework.BuildContext ctx$2, ){
return f_widgets.Text((Ukddmlcoc_core.first(Ukddmlcotm_core.md_kids(p1$12250_$SHARP_$1, ), ) as dc.String), style: (Ukddmlcotm_core.mget(p1$12250_$SHARP_$1, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), ) as fsp_text_style.TextStyle?), );
}
}

// END Reify$92

// BEGIN make-app
dc.dynamic make_app(){
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$2[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$2[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $1=Ukddmlcoc_core.$_list_lit(fl$2, );
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, $1, ));
final dc.List<dc.dynamic> fl$257=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$258=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Scaffold", )), ));
fl$258[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$259=(dc.List<dc.dynamic>.filled(4, const Ukddmlcoc_core.Keyword(null, "appBar", 811449783, ), ));
final dc.List<dc.dynamic> fl$260=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "AppBar.", )), ));
fl$260[1]=const Ukddmlcoc_core.Keyword(null, "title", 3035382670, );
final dc.List<dc.dynamic> fl$261=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
fl$261[1]="mxFlutter  Home Page";
final Ukddmlcoc_core.PersistentList $289=Ukddmlcoc_core.$_list_lit(fl$261, );
fl$260[2]=$289;
final Ukddmlcoc_core.PersistentList $288=Ukddmlcoc_core.$_list_lit(fl$260, );
fl$259[1]=$288;
fl$259[2]=const Ukddmlcoc_core.Keyword(null, "floatingActionButton", 2660567720, );
final dc.List<dc.dynamic> fl$262=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cF", )), ));
final dc.List<dc.dynamic> fl$263=(dc.List<dc.dynamic>.filled(7, (Ukddmlcoc_core.symbol.$_invoke$2(null, "FloatingActionButton.", )), ));
fl$263[1]=const Ukddmlcoc_core.Keyword(null, "onPressed", 2299724754, );
final dc.List<dc.dynamic> fl$264=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$264[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$265=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$266=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$267=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$267[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$267[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$267[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$267[4]=false;
fl$267[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$267[6]=true;
fl$267[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$267[8]=true;
fl$267[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$267[10]=true;
final Ukddmlcoc_core.PersistentList $295=Ukddmlcoc_core.$_list_lit(fl$267, );
fl$266[1]=$295;
final Ukddmlcoc_core.PersistentVector $294=Ukddmlcoc_core.$_vec_owning(fl$266, );
fl$265[1]=$294;
final dc.List<dc.dynamic> fl$268=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("md", "mswap!", )), ));
fl$268[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$268[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
fl$268[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "inc", ));
final Ukddmlcoc_core.PersistentList $296=Ukddmlcoc_core.$_list_lit(fl$268, );
fl$265[2]=$296;
fl$265[3]=null;
final Ukddmlcoc_core.PersistentList $293=Ukddmlcoc_core.$_list_lit(fl$265, );
fl$264[2]=$293;
final Ukddmlcoc_core.PersistentList $292=Ukddmlcoc_core.$_list_lit(fl$264, );
fl$263[2]=$292;
fl$263[3]=const Ukddmlcoc_core.Keyword(null, "tooltip", 2295273185, );
fl$263[4]="Increment";
fl$263[5]=const Ukddmlcoc_core.Keyword(null, "child", 1160621984, );
final dc.List<dc.dynamic> fl$269=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Icon.", )), ));
fl$269[1]=(Ukddmlcoc_core.symbol.$_invoke$2("Icons", "add", ));
fl$269[2]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$269[3]=(Ukddmlcoc_core.symbol.$_invoke$2("Colors", "black", ));
final Ukddmlcoc_core.PersistentList $297=Ukddmlcoc_core.$_list_lit(fl$269, );
fl$263[6]=$297;
final Ukddmlcoc_core.PersistentList $291=Ukddmlcoc_core.$_list_lit(fl$263, );
fl$262[1]=$291;
final Ukddmlcoc_core.PersistentList $290=Ukddmlcoc_core.$_list_lit(fl$262, );
fl$259[3]=$290;
final Ukddmlcoc_core.PersistentHashMap $287=Ukddmlcoc_core.$_map_lit(fl$259, );
fl$258[2]=$287;
final dc.List<dc.dynamic> fl$270=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Center", )), ));
fl$270[1]=Ukddmlcoc_core.$_EMPTY_MAP;
fl$270[2]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$271=(dc.List<dc.dynamic>.filled(6, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Column", )), ));
fl$271[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$272=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "mainAxisAlignment", 2807631147, ), ));
fl$272[1]=(Ukddmlcoc_core.symbol.$_invoke$2("MainAxisAlignment", "center", ));
final Ukddmlcoc_core.PersistentHashMap $300=Ukddmlcoc_core.$_map_lit(fl$272, );
fl$271[2]=$300;
final dc.List<dc.dynamic> fl$273=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
fl$273[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$274=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), ));
final dc.List<dc.dynamic> fl$275=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "TextStyle.", )), ));
fl$275[1]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$275[2]=(Ukddmlcoc_core.symbol.$_invoke$2("m.Colors", "black", ));
fl$275[3]=const Ukddmlcoc_core.Keyword(null, "fontSize", 3908022666, );
fl$275[4]=18.0;
final Ukddmlcoc_core.PersistentList $303=Ukddmlcoc_core.$_list_lit(fl$275, );
fl$274[1]=$303;
final Ukddmlcoc_core.PersistentHashMap $302=Ukddmlcoc_core.$_map_lit(fl$274, );
fl$273[2]=$302;
fl$273[3]="You have clicked the button so many times:";
final Ukddmlcoc_core.PersistentList $301=Ukddmlcoc_core.$_list_lit(fl$273, );
fl$271[3]=$301;
final dc.List<dc.dynamic> fl$276=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
final dc.List<dc.dynamic> fl$277=(dc.List<dc.dynamic>.filled(4, const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), ));
fl$277[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$277[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final dc.List<dc.dynamic> fl$278=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cI", )), ));
fl$278[1]=0;
fl$278[2]=const Ukddmlcoc_core.Keyword(null, "obs", 999449665, );
final dc.List<dc.dynamic> fl$279=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$280=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$281=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$282=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$283=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$283[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $311=Ukddmlcoc_core.$_list_lit(fl$283, );
fl$282[1]=$311;
final Ukddmlcoc_core.PersistentList $310=Ukddmlcoc_core.$_list_lit(fl$282, );
fl$281[1]=$310;
final Ukddmlcoc_core.PersistentVector $309=Ukddmlcoc_core.$_vec_owning(fl$281, );
fl$280[1]=$309;
final dc.List<dc.dynamic> fl$284=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$284[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$285=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$285[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$286=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $314=Ukddmlcoc_core.$_list_lit(fl$286, );
fl$285[2]=$314;
final Ukddmlcoc_core.PersistentList $313=Ukddmlcoc_core.$_list_lit(fl$285, );
fl$284[2]=$313;
final Ukddmlcoc_core.PersistentList $312=Ukddmlcoc_core.$_list_lit(fl$284, );
fl$280[2]=$312;
final Ukddmlcoc_core.PersistentList $308=Ukddmlcoc_core.$_list_lit(fl$280, );
fl$279[1]=$308;
final Ukddmlcoc_core.PersistentList $307=Ukddmlcoc_core.$_list_lit(fl$279, );
fl$278[3]=$307;
final Ukddmlcoc_core.PersistentList $306=Ukddmlcoc_core.$_list_lit(fl$278, );
fl$277[3]=$306;
final Ukddmlcoc_core.PersistentHashMap $305=Ukddmlcoc_core.$_map_lit(fl$277, );
fl$276[1]=$305;
final dc.List<dc.dynamic> fl$287=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "builder", 1952461028, ), ));
final dc.List<dc.dynamic> fl$288=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
final dc.List<dc.dynamic> fl$289=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "me", )), ));
fl$289[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $317=Ukddmlcoc_core.$_vec_owning(fl$289, );
fl$288[1]=$317;
final dc.List<dc.dynamic> fl$290=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$291=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$292=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$292[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$292[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $320=Ukddmlcoc_core.$_list_lit(fl$292, );
fl$291[1]=$320;
final Ukddmlcoc_core.PersistentList $319=Ukddmlcoc_core.$_list_lit(fl$291, );
fl$290[1]=$319;
fl$290[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$293=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".headline4", )), ));
final dc.List<dc.dynamic> fl$294=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".textTheme", )), ));
final dc.List<dc.dynamic> fl$295=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("Theme", "of", )), ));
fl$295[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentList $323=Ukddmlcoc_core.$_list_lit(fl$295, );
fl$294[1]=$323;
final Ukddmlcoc_core.PersistentList $322=Ukddmlcoc_core.$_list_lit(fl$294, );
fl$293[1]=$322;
final Ukddmlcoc_core.PersistentList $321=Ukddmlcoc_core.$_list_lit(fl$293, );
fl$290[3]=$321;
final Ukddmlcoc_core.PersistentList $318=Ukddmlcoc_core.$_list_lit(fl$290, );
fl$288[2]=$318;
final Ukddmlcoc_core.PersistentList $316=Ukddmlcoc_core.$_list_lit(fl$288, );
fl$287[1]=$316;
final Ukddmlcoc_core.PersistentHashMap $315=Ukddmlcoc_core.$_map_lit(fl$287, );
fl$276[2]=$315;
final dc.List<dc.dynamic> fl$296=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$297=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$297[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$297[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $325=Ukddmlcoc_core.$_list_lit(fl$297, );
fl$296[1]=$325;
final Ukddmlcoc_core.PersistentList $324=Ukddmlcoc_core.$_list_lit(fl$296, );
fl$276[3]=$324;
final Ukddmlcoc_core.PersistentList $304=Ukddmlcoc_core.$_list_lit(fl$276, );
fl$271[4]=$304;
final dc.List<dc.dynamic> fl$298=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "make", )), ));
fl$298[1]=const Ukddmlcoc_core.Keyword(null, "type", 3318123983, );
fl$298[2]=const Ukddmlcoc_core.Keyword("tiltontec.example.counter", "Text", 913793136, );
fl$298[3]=const Ukddmlcoc_core.Keyword(null, "name", 2249783175, );
fl$298[4]=const Ukddmlcoc_core.Keyword(null, "z-counter-x2", 3794842751, );
fl$298[5]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final dc.List<dc.dynamic> fl$299=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cF+", )), ));
final dc.List<dc.dynamic> fl$300=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), ));
final dc.List<dc.dynamic> fl$301=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$302=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "prn", )), ));
fl$302[1]=const Ukddmlcoc_core.Keyword(null, "zx2!!!!!!!!!-old-new", 1371043869, );
fl$302[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "old", ));
fl$302[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$303=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$303[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $331=Ukddmlcoc_core.$_list_lit(fl$303, );
fl$302[4]=$331;
final Ukddmlcoc_core.PersistentList $330=Ukddmlcoc_core.$_list_lit(fl$302, );
fl$301[1]=$330;
final dc.List<dc.dynamic> fl$304=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$305=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$306=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$307=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$307[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $335=Ukddmlcoc_core.$_list_lit(fl$307, );
fl$306[1]=$335;
final Ukddmlcoc_core.PersistentList $334=Ukddmlcoc_core.$_list_lit(fl$306, );
fl$305[1]=$334;
final Ukddmlcoc_core.PersistentVector $333=Ukddmlcoc_core.$_vec_owning(fl$305, );
fl$304[1]=$333;
final dc.List<dc.dynamic> fl$308=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$308[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$309=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$309[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$310=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $338=Ukddmlcoc_core.$_list_lit(fl$310, );
fl$309[2]=$338;
final Ukddmlcoc_core.PersistentList $337=Ukddmlcoc_core.$_list_lit(fl$309, );
fl$308[2]=$337;
final Ukddmlcoc_core.PersistentList $336=Ukddmlcoc_core.$_list_lit(fl$308, );
fl$304[2]=$336;
final Ukddmlcoc_core.PersistentList $332=Ukddmlcoc_core.$_list_lit(fl$304, );
fl$301[2]=$332;
final Ukddmlcoc_core.PersistentList $329=Ukddmlcoc_core.$_list_lit(fl$301, );
fl$300[1]=$329;
final Ukddmlcoc_core.PersistentVector $328=Ukddmlcoc_core.$_vec_owning(fl$300, );
fl$299[1]=$328;
final dc.List<dc.dynamic> fl$311=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$312=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$313=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$313[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$313[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$313[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$313[4]=false;
fl$313[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$313[6]=false;
fl$313[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$313[8]=false;
fl$313[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$313[10]=true;
final Ukddmlcoc_core.PersistentList $341=Ukddmlcoc_core.$_list_lit(fl$313, );
fl$312[1]=$341;
final Ukddmlcoc_core.PersistentVector $340=Ukddmlcoc_core.$_vec_owning(fl$312, );
fl$311[1]=$340;
final dc.List<dc.dynamic> fl$314=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "assert", )), ));
fl$314[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
final Ukddmlcoc_core.PersistentList $342=Ukddmlcoc_core.$_list_lit(fl$314, );
fl$311[2]=$342;
final dc.List<dc.dynamic> fl$315=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$316=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zx1", )), ));
final dc.List<dc.dynamic> fl$317=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$317[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$317[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $345=Ukddmlcoc_core.$_list_lit(fl$317, );
fl$316[1]=$345;
final Ukddmlcoc_core.PersistentVector $344=Ukddmlcoc_core.$_vec_owning(fl$316, );
fl$315[1]=$344;
final dc.List<dc.dynamic> fl$318=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "*", )), ));
fl$318[1]=2;
final dc.List<dc.dynamic> fl$319=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$319[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$319[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $347=Ukddmlcoc_core.$_list_lit(fl$319, );
fl$318[2]=$347;
final Ukddmlcoc_core.PersistentList $346=Ukddmlcoc_core.$_list_lit(fl$318, );
fl$315[2]=$346;
final Ukddmlcoc_core.PersistentList $343=Ukddmlcoc_core.$_list_lit(fl$315, );
fl$311[3]=$343;
final Ukddmlcoc_core.PersistentList $339=Ukddmlcoc_core.$_list_lit(fl$311, );
fl$299[2]=$339;
final Ukddmlcoc_core.PersistentList $327=Ukddmlcoc_core.$_list_lit(fl$299, );
fl$298[6]=$327;
fl$298[7]=const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, );
final dc.List<dc.dynamic> fl$320=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("md", "cFkids", )), ));
final dc.List<dc.dynamic> fl$321=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
fl$321[1]="Computio ";
final dc.List<dc.dynamic> fl$322=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$322[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$322[2]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final Ukddmlcoc_core.PersistentList $350=Ukddmlcoc_core.$_list_lit(fl$322, );
fl$321[2]=$350;
final Ukddmlcoc_core.PersistentList $349=Ukddmlcoc_core.$_list_lit(fl$321, );
fl$320[1]=$349;
final Ukddmlcoc_core.PersistentList $348=Ukddmlcoc_core.$_list_lit(fl$320, );
fl$298[8]=$348;
fl$298[9]=const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, );
final dc.List<dc.dynamic> fl$323=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn*", )), ));
final dc.List<dc.dynamic> fl$324=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", )), ));
final Ukddmlcoc_core.PersistentVector $352=Ukddmlcoc_core.$_vec_owning(fl$324, );
fl$323[1]=$352;
final dc.List<dc.dynamic> fl$325=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.List<dc.dynamic> fl$326=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$327=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", )), ));
final dc.List<dc.dynamic> fl$328=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$328[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$328[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "StatefulWidget", ));
final dc.List<dc.dynamic> fl$329=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "createState", )), ));
final dc.List<dc.dynamic> fl$330=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
final Ukddmlcoc_core.PersistentVector $358=Ukddmlcoc_core.$_vec_owning(fl$330, );
fl$329[1]=$358;
final dc.List<dc.dynamic> fl$331=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("util", "rmap-meta-setf", )), ));
final dc.List<dc.dynamic> fl$332=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
fl$332[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentVector $360=Ukddmlcoc_core.$_vec_owning(fl$332, );
fl$331[1]=$360;
final dc.List<dc.dynamic> fl$333=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$333[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$333[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "State", ));
final dc.List<dc.dynamic> fl$334=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "build", )), ));
final dc.List<dc.dynamic> fl$335=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
fl$335[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $363=Ukddmlcoc_core.$_vec_owning(fl$335, );
fl$334[1]=$363;
final dc.List<dc.dynamic> fl$336=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$337=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "first", )), ));
final dc.List<dc.dynamic> fl$338=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "md-kids", )), ));
fl$338[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentList $366=Ukddmlcoc_core.$_list_lit(fl$338, );
fl$337[1]=$366;
final Ukddmlcoc_core.PersistentList $365=Ukddmlcoc_core.$_list_lit(fl$337, );
fl$336[1]=$365;
fl$336[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$339=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$339[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
fl$339[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final Ukddmlcoc_core.PersistentList $367=Ukddmlcoc_core.$_list_lit(fl$339, );
fl$336[3]=$367;
final Ukddmlcoc_core.PersistentList $364=Ukddmlcoc_core.$_list_lit(fl$336, );
fl$334[2]=$364;
final Ukddmlcoc_core.PersistentList $362=Ukddmlcoc_core.$_list_lit(fl$334, );
fl$333[3]=$362;
final Ukddmlcoc_core.PersistentList $361=Ukddmlcoc_core.$_list_lit(fl$333, );
fl$331[2]=$361;
final Ukddmlcoc_core.PersistentList $359=Ukddmlcoc_core.$_list_lit(fl$331, );
fl$329[2]=$359;
final Ukddmlcoc_core.PersistentList $357=Ukddmlcoc_core.$_list_lit(fl$329, );
fl$328[3]=$357;
final Ukddmlcoc_core.PersistentList $356=Ukddmlcoc_core.$_list_lit(fl$328, );
fl$327[1]=$356;
final Ukddmlcoc_core.PersistentVector $355=Ukddmlcoc_core.$_vec_owning(fl$327, );
fl$326[1]=$355;
fl$326[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", ));
final Ukddmlcoc_core.PersistentList $354=Ukddmlcoc_core.$_list_lit(fl$326, );
fl$325[1]=$354;
final Ukddmlcoc_core.PersistentList $353=Ukddmlcoc_core.$_list_lit(fl$325, );
fl$323[2]=$353;
final Ukddmlcoc_core.PersistentList $351=Ukddmlcoc_core.$_list_lit(fl$323, );
fl$298[10]=$351;
final Ukddmlcoc_core.PersistentList $326=Ukddmlcoc_core.$_list_lit(fl$298, );
fl$271[5]=$326;
final Ukddmlcoc_core.PersistentList $299=Ukddmlcoc_core.$_list_lit(fl$271, );
fl$270[3]=$299;
final Ukddmlcoc_core.PersistentList $298=Ukddmlcoc_core.$_list_lit(fl$270, );
fl$258[3]=$298;
final Ukddmlcoc_core.PersistentList $286=Ukddmlcoc_core.$_list_lit(fl$258, );
fl$257[1]=$286;
final Ukddmlcoc_core.PersistentList $285=Ukddmlcoc_core.$_list_lit(fl$257, );
fl$1[1]=$285;
final Ukddmlcoc_core.PersistentList $284=Ukddmlcoc_core.$_list_lit(fl$1, );
final dc.dynamic $371=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $284, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$1, ){
final dc.dynamic me$1=Ukddmlcotc_base.c_model(slot_c$SHARP_$1, );
final dc.dynamic cell$1=slot_c$SHARP_$1;
final dc.dynamic slot_name$1=Ukddmlcotc_base.c_slot(slot_c$SHARP_$1, );
final dc.dynamic cache$1=Ukddmlcotc_base.c_value(slot_c$SHARP_$1, );
assert((){
late final dc.bool $if_$1;
if(((me$1!=false)&&(me$1!=null))){
$if_$1=true;
}else{
$if_$1=false;
}
return $if_$1;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$3[1]=me$1;
final Ukddmlcoc_core.PersistentHashMap $2=Ukddmlcoc_core.$_map_lit(fl$3, );
final dc.dynamic prev_bindings$7945_$AUTO_$1=Ukddmlcoc_core.push_dynamic_bindings($2, );
try {
assert((){
late final dc.bool $if_$2;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$2=true;
}else{
$if_$2=false;
}
return $if_$2;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$5[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$5[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $3=Ukddmlcoc_core.$_list_lit(fl$5, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, $3, ));
final dc.List<dc.dynamic> fl$178=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$179=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Center", )), ));
fl$179[1]=Ukddmlcoc_core.$_EMPTY_MAP;
fl$179[2]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$180=(dc.List<dc.dynamic>.filled(6, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Column", )), ));
fl$180[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$181=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "mainAxisAlignment", 2807631147, ), ));
fl$181[1]=(Ukddmlcoc_core.symbol.$_invoke$2("MainAxisAlignment", "center", ));
final Ukddmlcoc_core.PersistentHashMap $202=Ukddmlcoc_core.$_map_lit(fl$181, );
fl$180[2]=$202;
final dc.List<dc.dynamic> fl$182=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
fl$182[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$183=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), ));
final dc.List<dc.dynamic> fl$184=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "TextStyle.", )), ));
fl$184[1]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$184[2]=(Ukddmlcoc_core.symbol.$_invoke$2("m.Colors", "black", ));
fl$184[3]=const Ukddmlcoc_core.Keyword(null, "fontSize", 3908022666, );
fl$184[4]=18.0;
final Ukddmlcoc_core.PersistentList $205=Ukddmlcoc_core.$_list_lit(fl$184, );
fl$183[1]=$205;
final Ukddmlcoc_core.PersistentHashMap $204=Ukddmlcoc_core.$_map_lit(fl$183, );
fl$182[2]=$204;
fl$182[3]="You have clicked the button so many times:";
final Ukddmlcoc_core.PersistentList $203=Ukddmlcoc_core.$_list_lit(fl$182, );
fl$180[3]=$203;
final dc.List<dc.dynamic> fl$185=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
final dc.List<dc.dynamic> fl$186=(dc.List<dc.dynamic>.filled(4, const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), ));
fl$186[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$186[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final dc.List<dc.dynamic> fl$187=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cI", )), ));
fl$187[1]=0;
fl$187[2]=const Ukddmlcoc_core.Keyword(null, "obs", 999449665, );
final dc.List<dc.dynamic> fl$188=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$189=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$190=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$191=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$192=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$192[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $213=Ukddmlcoc_core.$_list_lit(fl$192, );
fl$191[1]=$213;
final Ukddmlcoc_core.PersistentList $212=Ukddmlcoc_core.$_list_lit(fl$191, );
fl$190[1]=$212;
final Ukddmlcoc_core.PersistentVector $211=Ukddmlcoc_core.$_vec_owning(fl$190, );
fl$189[1]=$211;
final dc.List<dc.dynamic> fl$193=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$193[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$194=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$194[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$195=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $216=Ukddmlcoc_core.$_list_lit(fl$195, );
fl$194[2]=$216;
final Ukddmlcoc_core.PersistentList $215=Ukddmlcoc_core.$_list_lit(fl$194, );
fl$193[2]=$215;
final Ukddmlcoc_core.PersistentList $214=Ukddmlcoc_core.$_list_lit(fl$193, );
fl$189[2]=$214;
final Ukddmlcoc_core.PersistentList $210=Ukddmlcoc_core.$_list_lit(fl$189, );
fl$188[1]=$210;
final Ukddmlcoc_core.PersistentList $209=Ukddmlcoc_core.$_list_lit(fl$188, );
fl$187[3]=$209;
final Ukddmlcoc_core.PersistentList $208=Ukddmlcoc_core.$_list_lit(fl$187, );
fl$186[3]=$208;
final Ukddmlcoc_core.PersistentHashMap $207=Ukddmlcoc_core.$_map_lit(fl$186, );
fl$185[1]=$207;
final dc.List<dc.dynamic> fl$196=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "builder", 1952461028, ), ));
final dc.List<dc.dynamic> fl$197=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
final dc.List<dc.dynamic> fl$198=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "me", )), ));
fl$198[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $219=Ukddmlcoc_core.$_vec_owning(fl$198, );
fl$197[1]=$219;
final dc.List<dc.dynamic> fl$199=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$200=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$201=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$201[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$201[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $222=Ukddmlcoc_core.$_list_lit(fl$201, );
fl$200[1]=$222;
final Ukddmlcoc_core.PersistentList $221=Ukddmlcoc_core.$_list_lit(fl$200, );
fl$199[1]=$221;
fl$199[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$202=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".headline4", )), ));
final dc.List<dc.dynamic> fl$203=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".textTheme", )), ));
final dc.List<dc.dynamic> fl$204=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("Theme", "of", )), ));
fl$204[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentList $225=Ukddmlcoc_core.$_list_lit(fl$204, );
fl$203[1]=$225;
final Ukddmlcoc_core.PersistentList $224=Ukddmlcoc_core.$_list_lit(fl$203, );
fl$202[1]=$224;
final Ukddmlcoc_core.PersistentList $223=Ukddmlcoc_core.$_list_lit(fl$202, );
fl$199[3]=$223;
final Ukddmlcoc_core.PersistentList $220=Ukddmlcoc_core.$_list_lit(fl$199, );
fl$197[2]=$220;
final Ukddmlcoc_core.PersistentList $218=Ukddmlcoc_core.$_list_lit(fl$197, );
fl$196[1]=$218;
final Ukddmlcoc_core.PersistentHashMap $217=Ukddmlcoc_core.$_map_lit(fl$196, );
fl$185[2]=$217;
final dc.List<dc.dynamic> fl$205=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$206=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$206[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$206[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $227=Ukddmlcoc_core.$_list_lit(fl$206, );
fl$205[1]=$227;
final Ukddmlcoc_core.PersistentList $226=Ukddmlcoc_core.$_list_lit(fl$205, );
fl$185[3]=$226;
final Ukddmlcoc_core.PersistentList $206=Ukddmlcoc_core.$_list_lit(fl$185, );
fl$180[4]=$206;
final dc.List<dc.dynamic> fl$207=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "make", )), ));
fl$207[1]=const Ukddmlcoc_core.Keyword(null, "type", 3318123983, );
fl$207[2]=const Ukddmlcoc_core.Keyword("tiltontec.example.counter", "Text", 913793136, );
fl$207[3]=const Ukddmlcoc_core.Keyword(null, "name", 2249783175, );
fl$207[4]=const Ukddmlcoc_core.Keyword(null, "z-counter-x2", 3794842751, );
fl$207[5]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final dc.List<dc.dynamic> fl$208=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cF+", )), ));
final dc.List<dc.dynamic> fl$209=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), ));
final dc.List<dc.dynamic> fl$210=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$211=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "prn", )), ));
fl$211[1]=const Ukddmlcoc_core.Keyword(null, "zx2!!!!!!!!!-old-new", 1371043869, );
fl$211[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "old", ));
fl$211[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$212=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$212[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $233=Ukddmlcoc_core.$_list_lit(fl$212, );
fl$211[4]=$233;
final Ukddmlcoc_core.PersistentList $232=Ukddmlcoc_core.$_list_lit(fl$211, );
fl$210[1]=$232;
final dc.List<dc.dynamic> fl$213=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$214=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$215=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$216=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$216[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $237=Ukddmlcoc_core.$_list_lit(fl$216, );
fl$215[1]=$237;
final Ukddmlcoc_core.PersistentList $236=Ukddmlcoc_core.$_list_lit(fl$215, );
fl$214[1]=$236;
final Ukddmlcoc_core.PersistentVector $235=Ukddmlcoc_core.$_vec_owning(fl$214, );
fl$213[1]=$235;
final dc.List<dc.dynamic> fl$217=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$217[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$218=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$218[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$219=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $240=Ukddmlcoc_core.$_list_lit(fl$219, );
fl$218[2]=$240;
final Ukddmlcoc_core.PersistentList $239=Ukddmlcoc_core.$_list_lit(fl$218, );
fl$217[2]=$239;
final Ukddmlcoc_core.PersistentList $238=Ukddmlcoc_core.$_list_lit(fl$217, );
fl$213[2]=$238;
final Ukddmlcoc_core.PersistentList $234=Ukddmlcoc_core.$_list_lit(fl$213, );
fl$210[2]=$234;
final Ukddmlcoc_core.PersistentList $231=Ukddmlcoc_core.$_list_lit(fl$210, );
fl$209[1]=$231;
final Ukddmlcoc_core.PersistentVector $230=Ukddmlcoc_core.$_vec_owning(fl$209, );
fl$208[1]=$230;
final dc.List<dc.dynamic> fl$220=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$221=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$222=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$222[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$222[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$222[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$222[4]=false;
fl$222[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$222[6]=false;
fl$222[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$222[8]=false;
fl$222[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$222[10]=true;
final Ukddmlcoc_core.PersistentList $243=Ukddmlcoc_core.$_list_lit(fl$222, );
fl$221[1]=$243;
final Ukddmlcoc_core.PersistentVector $242=Ukddmlcoc_core.$_vec_owning(fl$221, );
fl$220[1]=$242;
final dc.List<dc.dynamic> fl$223=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "assert", )), ));
fl$223[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
final Ukddmlcoc_core.PersistentList $244=Ukddmlcoc_core.$_list_lit(fl$223, );
fl$220[2]=$244;
final dc.List<dc.dynamic> fl$224=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$225=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zx1", )), ));
final dc.List<dc.dynamic> fl$226=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$226[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$226[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $247=Ukddmlcoc_core.$_list_lit(fl$226, );
fl$225[1]=$247;
final Ukddmlcoc_core.PersistentVector $246=Ukddmlcoc_core.$_vec_owning(fl$225, );
fl$224[1]=$246;
final dc.List<dc.dynamic> fl$227=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "*", )), ));
fl$227[1]=2;
final dc.List<dc.dynamic> fl$228=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$228[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$228[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $249=Ukddmlcoc_core.$_list_lit(fl$228, );
fl$227[2]=$249;
final Ukddmlcoc_core.PersistentList $248=Ukddmlcoc_core.$_list_lit(fl$227, );
fl$224[2]=$248;
final Ukddmlcoc_core.PersistentList $245=Ukddmlcoc_core.$_list_lit(fl$224, );
fl$220[3]=$245;
final Ukddmlcoc_core.PersistentList $241=Ukddmlcoc_core.$_list_lit(fl$220, );
fl$208[2]=$241;
final Ukddmlcoc_core.PersistentList $229=Ukddmlcoc_core.$_list_lit(fl$208, );
fl$207[6]=$229;
fl$207[7]=const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, );
final dc.List<dc.dynamic> fl$229=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("md", "cFkids", )), ));
final dc.List<dc.dynamic> fl$230=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
fl$230[1]="Computio ";
final dc.List<dc.dynamic> fl$231=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$231[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$231[2]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final Ukddmlcoc_core.PersistentList $252=Ukddmlcoc_core.$_list_lit(fl$231, );
fl$230[2]=$252;
final Ukddmlcoc_core.PersistentList $251=Ukddmlcoc_core.$_list_lit(fl$230, );
fl$229[1]=$251;
final Ukddmlcoc_core.PersistentList $250=Ukddmlcoc_core.$_list_lit(fl$229, );
fl$207[8]=$250;
fl$207[9]=const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, );
final dc.List<dc.dynamic> fl$232=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn*", )), ));
final dc.List<dc.dynamic> fl$233=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", )), ));
final Ukddmlcoc_core.PersistentVector $254=Ukddmlcoc_core.$_vec_owning(fl$233, );
fl$232[1]=$254;
final dc.List<dc.dynamic> fl$234=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.List<dc.dynamic> fl$235=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$236=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", )), ));
final dc.List<dc.dynamic> fl$237=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$237[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$237[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "StatefulWidget", ));
final dc.List<dc.dynamic> fl$238=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "createState", )), ));
final dc.List<dc.dynamic> fl$239=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
final Ukddmlcoc_core.PersistentVector $260=Ukddmlcoc_core.$_vec_owning(fl$239, );
fl$238[1]=$260;
final dc.List<dc.dynamic> fl$240=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("util", "rmap-meta-setf", )), ));
final dc.List<dc.dynamic> fl$241=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
fl$241[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentVector $262=Ukddmlcoc_core.$_vec_owning(fl$241, );
fl$240[1]=$262;
final dc.List<dc.dynamic> fl$242=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$242[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$242[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "State", ));
final dc.List<dc.dynamic> fl$243=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "build", )), ));
final dc.List<dc.dynamic> fl$244=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
fl$244[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $265=Ukddmlcoc_core.$_vec_owning(fl$244, );
fl$243[1]=$265;
final dc.List<dc.dynamic> fl$245=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$246=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "first", )), ));
final dc.List<dc.dynamic> fl$247=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "md-kids", )), ));
fl$247[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentList $268=Ukddmlcoc_core.$_list_lit(fl$247, );
fl$246[1]=$268;
final Ukddmlcoc_core.PersistentList $267=Ukddmlcoc_core.$_list_lit(fl$246, );
fl$245[1]=$267;
fl$245[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$248=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$248[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
fl$248[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final Ukddmlcoc_core.PersistentList $269=Ukddmlcoc_core.$_list_lit(fl$248, );
fl$245[3]=$269;
final Ukddmlcoc_core.PersistentList $266=Ukddmlcoc_core.$_list_lit(fl$245, );
fl$243[2]=$266;
final Ukddmlcoc_core.PersistentList $264=Ukddmlcoc_core.$_list_lit(fl$243, );
fl$242[3]=$264;
final Ukddmlcoc_core.PersistentList $263=Ukddmlcoc_core.$_list_lit(fl$242, );
fl$240[2]=$263;
final Ukddmlcoc_core.PersistentList $261=Ukddmlcoc_core.$_list_lit(fl$240, );
fl$238[2]=$261;
final Ukddmlcoc_core.PersistentList $259=Ukddmlcoc_core.$_list_lit(fl$238, );
fl$237[3]=$259;
final Ukddmlcoc_core.PersistentList $258=Ukddmlcoc_core.$_list_lit(fl$237, );
fl$236[1]=$258;
final Ukddmlcoc_core.PersistentVector $257=Ukddmlcoc_core.$_vec_owning(fl$236, );
fl$235[1]=$257;
fl$235[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", ));
final Ukddmlcoc_core.PersistentList $256=Ukddmlcoc_core.$_list_lit(fl$235, );
fl$234[1]=$256;
final Ukddmlcoc_core.PersistentList $255=Ukddmlcoc_core.$_list_lit(fl$234, );
fl$232[2]=$255;
final Ukddmlcoc_core.PersistentList $253=Ukddmlcoc_core.$_list_lit(fl$232, );
fl$207[10]=$253;
final Ukddmlcoc_core.PersistentList $228=Ukddmlcoc_core.$_list_lit(fl$207, );
fl$180[5]=$228;
final Ukddmlcoc_core.PersistentList $201=Ukddmlcoc_core.$_list_lit(fl$180, );
fl$179[3]=$201;
final Ukddmlcoc_core.PersistentList $200=Ukddmlcoc_core.$_list_lit(fl$179, );
fl$178[1]=$200;
final Ukddmlcoc_core.PersistentList $199=Ukddmlcoc_core.$_list_lit(fl$178, );
fl$4[1]=$199;
final Ukddmlcoc_core.PersistentList $198=Ukddmlcoc_core.$_list_lit(fl$4, );
final dc.dynamic $279=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $198, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$2, ){
final dc.dynamic me$2=Ukddmlcotc_base.c_model(slot_c$SHARP_$2, );
final dc.dynamic cell$2=slot_c$SHARP_$2;
final dc.dynamic slot_name$2=Ukddmlcotc_base.c_slot(slot_c$SHARP_$2, );
final dc.dynamic cache$2=Ukddmlcotc_base.c_value(slot_c$SHARP_$2, );
assert((){
late final dc.bool $if_$3;
if(((me$2!=false)&&(me$2!=null))){
$if_$3=true;
}else{
$if_$3=false;
}
return $if_$3;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$6[1]=me$2;
final Ukddmlcoc_core.PersistentHashMap $4=Ukddmlcoc_core.$_map_lit(fl$6, );
final dc.dynamic prev_bindings$7945_$AUTO_$2=Ukddmlcoc_core.push_dynamic_bindings($4, );
try {
assert((){
late final dc.bool $if_$4;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$4=true;
}else{
$if_$4=false;
}
return $if_$4;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$8[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$8[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $5=Ukddmlcoc_core.$_list_lit(fl$8, );
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(2, $5, ));
final dc.List<dc.dynamic> fl$108=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$109=(dc.List<dc.dynamic>.filled(6, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Column", )), ));
fl$109[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$110=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "mainAxisAlignment", 2807631147, ), ));
fl$110[1]=(Ukddmlcoc_core.symbol.$_invoke$2("MainAxisAlignment", "center", ));
final Ukddmlcoc_core.PersistentHashMap $125=Ukddmlcoc_core.$_map_lit(fl$110, );
fl$109[2]=$125;
final dc.List<dc.dynamic> fl$111=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
fl$111[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$112=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), ));
final dc.List<dc.dynamic> fl$113=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "TextStyle.", )), ));
fl$113[1]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$113[2]=(Ukddmlcoc_core.symbol.$_invoke$2("m.Colors", "black", ));
fl$113[3]=const Ukddmlcoc_core.Keyword(null, "fontSize", 3908022666, );
fl$113[4]=18.0;
final Ukddmlcoc_core.PersistentList $128=Ukddmlcoc_core.$_list_lit(fl$113, );
fl$112[1]=$128;
final Ukddmlcoc_core.PersistentHashMap $127=Ukddmlcoc_core.$_map_lit(fl$112, );
fl$111[2]=$127;
fl$111[3]="You have clicked the button so many times:";
final Ukddmlcoc_core.PersistentList $126=Ukddmlcoc_core.$_list_lit(fl$111, );
fl$109[3]=$126;
final dc.List<dc.dynamic> fl$114=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
final dc.List<dc.dynamic> fl$115=(dc.List<dc.dynamic>.filled(4, const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), ));
fl$115[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$115[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final dc.List<dc.dynamic> fl$116=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cI", )), ));
fl$116[1]=0;
fl$116[2]=const Ukddmlcoc_core.Keyword(null, "obs", 999449665, );
final dc.List<dc.dynamic> fl$117=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$118=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$119=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$120=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$121=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$121[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $136=Ukddmlcoc_core.$_list_lit(fl$121, );
fl$120[1]=$136;
final Ukddmlcoc_core.PersistentList $135=Ukddmlcoc_core.$_list_lit(fl$120, );
fl$119[1]=$135;
final Ukddmlcoc_core.PersistentVector $134=Ukddmlcoc_core.$_vec_owning(fl$119, );
fl$118[1]=$134;
final dc.List<dc.dynamic> fl$122=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$122[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$123=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$123[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$124=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $139=Ukddmlcoc_core.$_list_lit(fl$124, );
fl$123[2]=$139;
final Ukddmlcoc_core.PersistentList $138=Ukddmlcoc_core.$_list_lit(fl$123, );
fl$122[2]=$138;
final Ukddmlcoc_core.PersistentList $137=Ukddmlcoc_core.$_list_lit(fl$122, );
fl$118[2]=$137;
final Ukddmlcoc_core.PersistentList $133=Ukddmlcoc_core.$_list_lit(fl$118, );
fl$117[1]=$133;
final Ukddmlcoc_core.PersistentList $132=Ukddmlcoc_core.$_list_lit(fl$117, );
fl$116[3]=$132;
final Ukddmlcoc_core.PersistentList $131=Ukddmlcoc_core.$_list_lit(fl$116, );
fl$115[3]=$131;
final Ukddmlcoc_core.PersistentHashMap $130=Ukddmlcoc_core.$_map_lit(fl$115, );
fl$114[1]=$130;
final dc.List<dc.dynamic> fl$125=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "builder", 1952461028, ), ));
final dc.List<dc.dynamic> fl$126=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
final dc.List<dc.dynamic> fl$127=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "me", )), ));
fl$127[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $142=Ukddmlcoc_core.$_vec_owning(fl$127, );
fl$126[1]=$142;
final dc.List<dc.dynamic> fl$128=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$129=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$130=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$130[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$130[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $145=Ukddmlcoc_core.$_list_lit(fl$130, );
fl$129[1]=$145;
final Ukddmlcoc_core.PersistentList $144=Ukddmlcoc_core.$_list_lit(fl$129, );
fl$128[1]=$144;
fl$128[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$131=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".headline4", )), ));
final dc.List<dc.dynamic> fl$132=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".textTheme", )), ));
final dc.List<dc.dynamic> fl$133=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("Theme", "of", )), ));
fl$133[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentList $148=Ukddmlcoc_core.$_list_lit(fl$133, );
fl$132[1]=$148;
final Ukddmlcoc_core.PersistentList $147=Ukddmlcoc_core.$_list_lit(fl$132, );
fl$131[1]=$147;
final Ukddmlcoc_core.PersistentList $146=Ukddmlcoc_core.$_list_lit(fl$131, );
fl$128[3]=$146;
final Ukddmlcoc_core.PersistentList $143=Ukddmlcoc_core.$_list_lit(fl$128, );
fl$126[2]=$143;
final Ukddmlcoc_core.PersistentList $141=Ukddmlcoc_core.$_list_lit(fl$126, );
fl$125[1]=$141;
final Ukddmlcoc_core.PersistentHashMap $140=Ukddmlcoc_core.$_map_lit(fl$125, );
fl$114[2]=$140;
final dc.List<dc.dynamic> fl$134=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$135=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$135[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$135[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $150=Ukddmlcoc_core.$_list_lit(fl$135, );
fl$134[1]=$150;
final Ukddmlcoc_core.PersistentList $149=Ukddmlcoc_core.$_list_lit(fl$134, );
fl$114[3]=$149;
final Ukddmlcoc_core.PersistentList $129=Ukddmlcoc_core.$_list_lit(fl$114, );
fl$109[4]=$129;
final dc.List<dc.dynamic> fl$136=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "make", )), ));
fl$136[1]=const Ukddmlcoc_core.Keyword(null, "type", 3318123983, );
fl$136[2]=const Ukddmlcoc_core.Keyword("tiltontec.example.counter", "Text", 913793136, );
fl$136[3]=const Ukddmlcoc_core.Keyword(null, "name", 2249783175, );
fl$136[4]=const Ukddmlcoc_core.Keyword(null, "z-counter-x2", 3794842751, );
fl$136[5]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final dc.List<dc.dynamic> fl$137=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cF+", )), ));
final dc.List<dc.dynamic> fl$138=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), ));
final dc.List<dc.dynamic> fl$139=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$140=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "prn", )), ));
fl$140[1]=const Ukddmlcoc_core.Keyword(null, "zx2!!!!!!!!!-old-new", 1371043869, );
fl$140[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "old", ));
fl$140[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$141=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$141[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $156=Ukddmlcoc_core.$_list_lit(fl$141, );
fl$140[4]=$156;
final Ukddmlcoc_core.PersistentList $155=Ukddmlcoc_core.$_list_lit(fl$140, );
fl$139[1]=$155;
final dc.List<dc.dynamic> fl$142=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$143=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$144=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$145=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$145[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $160=Ukddmlcoc_core.$_list_lit(fl$145, );
fl$144[1]=$160;
final Ukddmlcoc_core.PersistentList $159=Ukddmlcoc_core.$_list_lit(fl$144, );
fl$143[1]=$159;
final Ukddmlcoc_core.PersistentVector $158=Ukddmlcoc_core.$_vec_owning(fl$143, );
fl$142[1]=$158;
final dc.List<dc.dynamic> fl$146=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$146[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$147=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$147[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$148=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $163=Ukddmlcoc_core.$_list_lit(fl$148, );
fl$147[2]=$163;
final Ukddmlcoc_core.PersistentList $162=Ukddmlcoc_core.$_list_lit(fl$147, );
fl$146[2]=$162;
final Ukddmlcoc_core.PersistentList $161=Ukddmlcoc_core.$_list_lit(fl$146, );
fl$142[2]=$161;
final Ukddmlcoc_core.PersistentList $157=Ukddmlcoc_core.$_list_lit(fl$142, );
fl$139[2]=$157;
final Ukddmlcoc_core.PersistentList $154=Ukddmlcoc_core.$_list_lit(fl$139, );
fl$138[1]=$154;
final Ukddmlcoc_core.PersistentVector $153=Ukddmlcoc_core.$_vec_owning(fl$138, );
fl$137[1]=$153;
final dc.List<dc.dynamic> fl$149=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$150=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$151=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$151[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$151[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$151[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$151[4]=false;
fl$151[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$151[6]=false;
fl$151[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$151[8]=false;
fl$151[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$151[10]=true;
final Ukddmlcoc_core.PersistentList $166=Ukddmlcoc_core.$_list_lit(fl$151, );
fl$150[1]=$166;
final Ukddmlcoc_core.PersistentVector $165=Ukddmlcoc_core.$_vec_owning(fl$150, );
fl$149[1]=$165;
final dc.List<dc.dynamic> fl$152=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "assert", )), ));
fl$152[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
final Ukddmlcoc_core.PersistentList $167=Ukddmlcoc_core.$_list_lit(fl$152, );
fl$149[2]=$167;
final dc.List<dc.dynamic> fl$153=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$154=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zx1", )), ));
final dc.List<dc.dynamic> fl$155=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$155[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$155[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $170=Ukddmlcoc_core.$_list_lit(fl$155, );
fl$154[1]=$170;
final Ukddmlcoc_core.PersistentVector $169=Ukddmlcoc_core.$_vec_owning(fl$154, );
fl$153[1]=$169;
final dc.List<dc.dynamic> fl$156=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "*", )), ));
fl$156[1]=2;
final dc.List<dc.dynamic> fl$157=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$157[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$157[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $172=Ukddmlcoc_core.$_list_lit(fl$157, );
fl$156[2]=$172;
final Ukddmlcoc_core.PersistentList $171=Ukddmlcoc_core.$_list_lit(fl$156, );
fl$153[2]=$171;
final Ukddmlcoc_core.PersistentList $168=Ukddmlcoc_core.$_list_lit(fl$153, );
fl$149[3]=$168;
final Ukddmlcoc_core.PersistentList $164=Ukddmlcoc_core.$_list_lit(fl$149, );
fl$137[2]=$164;
final Ukddmlcoc_core.PersistentList $152=Ukddmlcoc_core.$_list_lit(fl$137, );
fl$136[6]=$152;
fl$136[7]=const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, );
final dc.List<dc.dynamic> fl$158=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("md", "cFkids", )), ));
final dc.List<dc.dynamic> fl$159=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
fl$159[1]="Computio ";
final dc.List<dc.dynamic> fl$160=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$160[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$160[2]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final Ukddmlcoc_core.PersistentList $175=Ukddmlcoc_core.$_list_lit(fl$160, );
fl$159[2]=$175;
final Ukddmlcoc_core.PersistentList $174=Ukddmlcoc_core.$_list_lit(fl$159, );
fl$158[1]=$174;
final Ukddmlcoc_core.PersistentList $173=Ukddmlcoc_core.$_list_lit(fl$158, );
fl$136[8]=$173;
fl$136[9]=const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, );
final dc.List<dc.dynamic> fl$161=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn*", )), ));
final dc.List<dc.dynamic> fl$162=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", )), ));
final Ukddmlcoc_core.PersistentVector $177=Ukddmlcoc_core.$_vec_owning(fl$162, );
fl$161[1]=$177;
final dc.List<dc.dynamic> fl$163=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.List<dc.dynamic> fl$164=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$165=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", )), ));
final dc.List<dc.dynamic> fl$166=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$166[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$166[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "StatefulWidget", ));
final dc.List<dc.dynamic> fl$167=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "createState", )), ));
final dc.List<dc.dynamic> fl$168=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
final Ukddmlcoc_core.PersistentVector $183=Ukddmlcoc_core.$_vec_owning(fl$168, );
fl$167[1]=$183;
final dc.List<dc.dynamic> fl$169=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("util", "rmap-meta-setf", )), ));
final dc.List<dc.dynamic> fl$170=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
fl$170[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentVector $185=Ukddmlcoc_core.$_vec_owning(fl$170, );
fl$169[1]=$185;
final dc.List<dc.dynamic> fl$171=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$171[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$171[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "State", ));
final dc.List<dc.dynamic> fl$172=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "build", )), ));
final dc.List<dc.dynamic> fl$173=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
fl$173[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $188=Ukddmlcoc_core.$_vec_owning(fl$173, );
fl$172[1]=$188;
final dc.List<dc.dynamic> fl$174=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$175=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "first", )), ));
final dc.List<dc.dynamic> fl$176=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "md-kids", )), ));
fl$176[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentList $191=Ukddmlcoc_core.$_list_lit(fl$176, );
fl$175[1]=$191;
final Ukddmlcoc_core.PersistentList $190=Ukddmlcoc_core.$_list_lit(fl$175, );
fl$174[1]=$190;
fl$174[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$177=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$177[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
fl$177[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final Ukddmlcoc_core.PersistentList $192=Ukddmlcoc_core.$_list_lit(fl$177, );
fl$174[3]=$192;
final Ukddmlcoc_core.PersistentList $189=Ukddmlcoc_core.$_list_lit(fl$174, );
fl$172[2]=$189;
final Ukddmlcoc_core.PersistentList $187=Ukddmlcoc_core.$_list_lit(fl$172, );
fl$171[3]=$187;
final Ukddmlcoc_core.PersistentList $186=Ukddmlcoc_core.$_list_lit(fl$171, );
fl$169[2]=$186;
final Ukddmlcoc_core.PersistentList $184=Ukddmlcoc_core.$_list_lit(fl$169, );
fl$167[2]=$184;
final Ukddmlcoc_core.PersistentList $182=Ukddmlcoc_core.$_list_lit(fl$167, );
fl$166[3]=$182;
final Ukddmlcoc_core.PersistentList $181=Ukddmlcoc_core.$_list_lit(fl$166, );
fl$165[1]=$181;
final Ukddmlcoc_core.PersistentVector $180=Ukddmlcoc_core.$_vec_owning(fl$165, );
fl$164[1]=$180;
fl$164[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", ));
final Ukddmlcoc_core.PersistentList $179=Ukddmlcoc_core.$_list_lit(fl$164, );
fl$163[1]=$179;
final Ukddmlcoc_core.PersistentList $178=Ukddmlcoc_core.$_list_lit(fl$163, );
fl$161[2]=$178;
final Ukddmlcoc_core.PersistentList $176=Ukddmlcoc_core.$_list_lit(fl$161, );
fl$136[10]=$176;
final Ukddmlcoc_core.PersistentList $151=Ukddmlcoc_core.$_list_lit(fl$136, );
fl$109[5]=$151;
final Ukddmlcoc_core.PersistentList $124=Ukddmlcoc_core.$_list_lit(fl$109, );
fl$108[1]=$124;
final Ukddmlcoc_core.PersistentList $123=Ukddmlcoc_core.$_list_lit(fl$108, );
fl$7[1]=$123;
final Ukddmlcoc_core.PersistentList $122=Ukddmlcoc_core.$_list_lit(fl$7, );
final dc.dynamic $193=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $122, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$3, ){
final dc.dynamic me$3=Ukddmlcotc_base.c_model(slot_c$SHARP_$3, );
final dc.dynamic cell$3=slot_c$SHARP_$3;
final dc.dynamic slot_name$3=Ukddmlcotc_base.c_slot(slot_c$SHARP_$3, );
final dc.dynamic cache$3=Ukddmlcotc_base.c_value(slot_c$SHARP_$3, );
assert((){
late final dc.bool $if_$5;
if(((me$3!=false)&&(me$3!=null))){
$if_$5=true;
}else{
$if_$5=false;
}
return $if_$5;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$9[1]=me$3;
final Ukddmlcoc_core.PersistentHashMap $6=Ukddmlcoc_core.$_map_lit(fl$9, );
final dc.dynamic prev_bindings$7945_$AUTO_$3=Ukddmlcoc_core.push_dynamic_bindings($6, );
try {
assert((){
late final dc.bool $if_$6;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$6=true;
}else{
$if_$6=false;
}
return $if_$6;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$11[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$11[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $7=Ukddmlcoc_core.$_list_lit(fl$11, );
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, $7, ));
final dc.List<dc.dynamic> fl$40=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$41=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
fl$41[1]=Ukddmlcoc_core.$_EMPTY_MAP;
final dc.List<dc.dynamic> fl$42=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), ));
final dc.List<dc.dynamic> fl$43=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "TextStyle.", )), ));
fl$43[1]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$43[2]=(Ukddmlcoc_core.symbol.$_invoke$2("m.Colors", "black", ));
fl$43[3]=const Ukddmlcoc_core.Keyword(null, "fontSize", 3908022666, );
fl$43[4]=18.0;
final Ukddmlcoc_core.PersistentList $52=Ukddmlcoc_core.$_list_lit(fl$43, );
fl$42[1]=$52;
final Ukddmlcoc_core.PersistentHashMap $51=Ukddmlcoc_core.$_map_lit(fl$42, );
fl$41[2]=$51;
fl$41[3]="You have clicked the button so many times:";
final Ukddmlcoc_core.PersistentList $50=Ukddmlcoc_core.$_list_lit(fl$41, );
fl$40[1]=$50;
final dc.List<dc.dynamic> fl$44=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("fx", "Text", )), ));
final dc.List<dc.dynamic> fl$45=(dc.List<dc.dynamic>.filled(4, const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), ));
fl$45[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$45[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final dc.List<dc.dynamic> fl$46=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cI", )), ));
fl$46[1]=0;
fl$46[2]=const Ukddmlcoc_core.Keyword(null, "obs", 999449665, );
final dc.List<dc.dynamic> fl$47=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$48=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$49=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$50=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$51=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$51[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $60=Ukddmlcoc_core.$_list_lit(fl$51, );
fl$50[1]=$60;
final Ukddmlcoc_core.PersistentList $59=Ukddmlcoc_core.$_list_lit(fl$50, );
fl$49[1]=$59;
final Ukddmlcoc_core.PersistentVector $58=Ukddmlcoc_core.$_vec_owning(fl$49, );
fl$48[1]=$58;
final dc.List<dc.dynamic> fl$52=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$52[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$53=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$53[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$54=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $63=Ukddmlcoc_core.$_list_lit(fl$54, );
fl$53[2]=$63;
final Ukddmlcoc_core.PersistentList $62=Ukddmlcoc_core.$_list_lit(fl$53, );
fl$52[2]=$62;
final Ukddmlcoc_core.PersistentList $61=Ukddmlcoc_core.$_list_lit(fl$52, );
fl$48[2]=$61;
final Ukddmlcoc_core.PersistentList $57=Ukddmlcoc_core.$_list_lit(fl$48, );
fl$47[1]=$57;
final Ukddmlcoc_core.PersistentList $56=Ukddmlcoc_core.$_list_lit(fl$47, );
fl$46[3]=$56;
final Ukddmlcoc_core.PersistentList $55=Ukddmlcoc_core.$_list_lit(fl$46, );
fl$45[3]=$55;
final Ukddmlcoc_core.PersistentHashMap $54=Ukddmlcoc_core.$_map_lit(fl$45, );
fl$44[1]=$54;
final dc.List<dc.dynamic> fl$55=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "builder", 1952461028, ), ));
final dc.List<dc.dynamic> fl$56=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
final dc.List<dc.dynamic> fl$57=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "me", )), ));
fl$57[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $66=Ukddmlcoc_core.$_vec_owning(fl$57, );
fl$56[1]=$66;
final dc.List<dc.dynamic> fl$58=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$59=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$60=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$60[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$60[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $69=Ukddmlcoc_core.$_list_lit(fl$60, );
fl$59[1]=$69;
final Ukddmlcoc_core.PersistentList $68=Ukddmlcoc_core.$_list_lit(fl$59, );
fl$58[1]=$68;
fl$58[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$61=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".headline4", )), ));
final dc.List<dc.dynamic> fl$62=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".textTheme", )), ));
final dc.List<dc.dynamic> fl$63=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("Theme", "of", )), ));
fl$63[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentList $72=Ukddmlcoc_core.$_list_lit(fl$63, );
fl$62[1]=$72;
final Ukddmlcoc_core.PersistentList $71=Ukddmlcoc_core.$_list_lit(fl$62, );
fl$61[1]=$71;
final Ukddmlcoc_core.PersistentList $70=Ukddmlcoc_core.$_list_lit(fl$61, );
fl$58[3]=$70;
final Ukddmlcoc_core.PersistentList $67=Ukddmlcoc_core.$_list_lit(fl$58, );
fl$56[2]=$67;
final Ukddmlcoc_core.PersistentList $65=Ukddmlcoc_core.$_list_lit(fl$56, );
fl$55[1]=$65;
final Ukddmlcoc_core.PersistentHashMap $64=Ukddmlcoc_core.$_map_lit(fl$55, );
fl$44[2]=$64;
final dc.List<dc.dynamic> fl$64=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$65=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$65[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$65[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $74=Ukddmlcoc_core.$_list_lit(fl$65, );
fl$64[1]=$74;
final Ukddmlcoc_core.PersistentList $73=Ukddmlcoc_core.$_list_lit(fl$64, );
fl$44[3]=$73;
final Ukddmlcoc_core.PersistentList $53=Ukddmlcoc_core.$_list_lit(fl$44, );
fl$40[2]=$53;
final dc.List<dc.dynamic> fl$66=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "make", )), ));
fl$66[1]=const Ukddmlcoc_core.Keyword(null, "type", 3318123983, );
fl$66[2]=const Ukddmlcoc_core.Keyword("tiltontec.example.counter", "Text", 913793136, );
fl$66[3]=const Ukddmlcoc_core.Keyword(null, "name", 2249783175, );
fl$66[4]=const Ukddmlcoc_core.Keyword(null, "z-counter-x2", 3794842751, );
fl$66[5]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final dc.List<dc.dynamic> fl$67=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "cF+", )), ));
final dc.List<dc.dynamic> fl$68=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), ));
final dc.List<dc.dynamic> fl$69=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn-obs", )), ));
final dc.List<dc.dynamic> fl$70=(dc.List<dc.dynamic>.filled(5, (Ukddmlcoc_core.symbol.$_invoke$2(null, "prn", )), ));
fl$70[1]=const Ukddmlcoc_core.Keyword(null, "zx2!!!!!!!!!-old-new", 1371043869, );
fl$70[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "old", ));
fl$70[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$71=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$71[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $80=Ukddmlcoc_core.$_list_lit(fl$71, );
fl$70[4]=$80;
final Ukddmlcoc_core.PersistentList $79=Ukddmlcoc_core.$_list_lit(fl$70, );
fl$69[1]=$79;
final dc.List<dc.dynamic> fl$72=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "when-let", )), ));
final dc.List<dc.dynamic> fl$73=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "state", )), ));
final dc.List<dc.dynamic> fl$74=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
final dc.List<dc.dynamic> fl$75=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "meta", )), ));
fl$75[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
final Ukddmlcoc_core.PersistentList $84=Ukddmlcoc_core.$_list_lit(fl$75, );
fl$74[1]=$84;
final Ukddmlcoc_core.PersistentList $83=Ukddmlcoc_core.$_list_lit(fl$74, );
fl$73[1]=$83;
final Ukddmlcoc_core.PersistentVector $82=Ukddmlcoc_core.$_vec_owning(fl$73, );
fl$72[1]=$82;
final dc.List<dc.dynamic> fl$76=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, ".setState", )), ));
fl$76[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "state", ));
final dc.List<dc.dynamic> fl$77=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$77[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$78=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final Ukddmlcoc_core.PersistentList $87=Ukddmlcoc_core.$_list_lit(fl$78, );
fl$77[2]=$87;
final Ukddmlcoc_core.PersistentList $86=Ukddmlcoc_core.$_list_lit(fl$77, );
fl$76[2]=$86;
final Ukddmlcoc_core.PersistentList $85=Ukddmlcoc_core.$_list_lit(fl$76, );
fl$72[2]=$85;
final Ukddmlcoc_core.PersistentList $81=Ukddmlcoc_core.$_list_lit(fl$72, );
fl$69[2]=$81;
final Ukddmlcoc_core.PersistentList $78=Ukddmlcoc_core.$_list_lit(fl$69, );
fl$68[1]=$78;
final Ukddmlcoc_core.PersistentVector $77=Ukddmlcoc_core.$_vec_owning(fl$68, );
fl$67[1]=$77;
final dc.List<dc.dynamic> fl$79=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$80=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$81=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$81[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$81[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$81[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$81[4]=false;
fl$81[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$81[6]=false;
fl$81[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$81[8]=false;
fl$81[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$81[10]=true;
final Ukddmlcoc_core.PersistentList $90=Ukddmlcoc_core.$_list_lit(fl$81, );
fl$80[1]=$90;
final Ukddmlcoc_core.PersistentVector $89=Ukddmlcoc_core.$_vec_owning(fl$80, );
fl$79[1]=$89;
final dc.List<dc.dynamic> fl$82=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "assert", )), ));
fl$82[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
final Ukddmlcoc_core.PersistentList $91=Ukddmlcoc_core.$_list_lit(fl$82, );
fl$79[2]=$91;
final dc.List<dc.dynamic> fl$83=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$84=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zx1", )), ));
final dc.List<dc.dynamic> fl$85=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$85[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$85[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $94=Ukddmlcoc_core.$_list_lit(fl$85, );
fl$84[1]=$94;
final Ukddmlcoc_core.PersistentVector $93=Ukddmlcoc_core.$_vec_owning(fl$84, );
fl$83[1]=$93;
final dc.List<dc.dynamic> fl$86=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "*", )), ));
fl$86[1]=2;
final dc.List<dc.dynamic> fl$87=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$87[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$87[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $96=Ukddmlcoc_core.$_list_lit(fl$87, );
fl$86[2]=$96;
final Ukddmlcoc_core.PersistentList $95=Ukddmlcoc_core.$_list_lit(fl$86, );
fl$83[2]=$95;
final Ukddmlcoc_core.PersistentList $92=Ukddmlcoc_core.$_list_lit(fl$83, );
fl$79[3]=$92;
final Ukddmlcoc_core.PersistentList $88=Ukddmlcoc_core.$_list_lit(fl$79, );
fl$67[2]=$88;
final Ukddmlcoc_core.PersistentList $76=Ukddmlcoc_core.$_list_lit(fl$67, );
fl$66[6]=$76;
fl$66[7]=const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, );
final dc.List<dc.dynamic> fl$88=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("md", "cFkids", )), ));
final dc.List<dc.dynamic> fl$89=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
fl$89[1]="Computio ";
final dc.List<dc.dynamic> fl$90=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$90[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$90[2]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final Ukddmlcoc_core.PersistentList $99=Ukddmlcoc_core.$_list_lit(fl$90, );
fl$89[2]=$99;
final Ukddmlcoc_core.PersistentList $98=Ukddmlcoc_core.$_list_lit(fl$89, );
fl$88[1]=$98;
final Ukddmlcoc_core.PersistentList $97=Ukddmlcoc_core.$_list_lit(fl$88, );
fl$66[8]=$97;
fl$66[9]=const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, );
final dc.List<dc.dynamic> fl$91=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn*", )), ));
final dc.List<dc.dynamic> fl$92=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", )), ));
final Ukddmlcoc_core.PersistentVector $101=Ukddmlcoc_core.$_vec_owning(fl$92, );
fl$91[1]=$101;
final dc.List<dc.dynamic> fl$93=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.List<dc.dynamic> fl$94=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$95=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", )), ));
final dc.List<dc.dynamic> fl$96=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$96[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$96[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "StatefulWidget", ));
final dc.List<dc.dynamic> fl$97=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "createState", )), ));
final dc.List<dc.dynamic> fl$98=(dc.List<dc.dynamic>.filled(1, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
final Ukddmlcoc_core.PersistentVector $107=Ukddmlcoc_core.$_vec_owning(fl$98, );
fl$97[1]=$107;
final dc.List<dc.dynamic> fl$99=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("util", "rmap-meta-setf", )), ));
final dc.List<dc.dynamic> fl$100=(dc.List<dc.dynamic>.filled(2, const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ), ));
fl$100[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentVector $109=Ukddmlcoc_core.$_vec_owning(fl$100, );
fl$99[1]=$109;
final dc.List<dc.dynamic> fl$101=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "reify", )), ));
fl$101[1]=const Ukddmlcoc_core.Keyword(null, "extends", 2423719685, );
fl$101[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "State", ));
final dc.List<dc.dynamic> fl$102=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "build", )), ));
final dc.List<dc.dynamic> fl$103=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "this", )), ));
fl$103[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "ctx", ));
final Ukddmlcoc_core.PersistentVector $112=Ukddmlcoc_core.$_vec_owning(fl$103, );
fl$102[1]=$112;
final dc.List<dc.dynamic> fl$104=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Text.", )), ));
final dc.List<dc.dynamic> fl$105=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "first", )), ));
final dc.List<dc.dynamic> fl$106=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "md-kids", )), ));
fl$106[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
final Ukddmlcoc_core.PersistentList $115=Ukddmlcoc_core.$_list_lit(fl$106, );
fl$105[1]=$115;
final Ukddmlcoc_core.PersistentList $114=Ukddmlcoc_core.$_list_lit(fl$105, );
fl$104[1]=$114;
fl$104[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final dc.List<dc.dynamic> fl$107=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$107[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "p1__12250#", ));
fl$107[2]=const Ukddmlcoc_core.Keyword(null, "style", 996261352, );
final Ukddmlcoc_core.PersistentList $116=Ukddmlcoc_core.$_list_lit(fl$107, );
fl$104[3]=$116;
final Ukddmlcoc_core.PersistentList $113=Ukddmlcoc_core.$_list_lit(fl$104, );
fl$102[2]=$113;
final Ukddmlcoc_core.PersistentList $111=Ukddmlcoc_core.$_list_lit(fl$102, );
fl$101[3]=$111;
final Ukddmlcoc_core.PersistentList $110=Ukddmlcoc_core.$_list_lit(fl$101, );
fl$99[2]=$110;
final Ukddmlcoc_core.PersistentList $108=Ukddmlcoc_core.$_list_lit(fl$99, );
fl$97[2]=$108;
final Ukddmlcoc_core.PersistentList $106=Ukddmlcoc_core.$_list_lit(fl$97, );
fl$96[3]=$106;
final Ukddmlcoc_core.PersistentList $105=Ukddmlcoc_core.$_list_lit(fl$96, );
fl$95[1]=$105;
final Ukddmlcoc_core.PersistentVector $104=Ukddmlcoc_core.$_vec_owning(fl$95, );
fl$94[1]=$104;
fl$94[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "r#", ));
final Ukddmlcoc_core.PersistentList $103=Ukddmlcoc_core.$_list_lit(fl$94, );
fl$93[1]=$103;
final Ukddmlcoc_core.PersistentList $102=Ukddmlcoc_core.$_list_lit(fl$93, );
fl$91[2]=$102;
final Ukddmlcoc_core.PersistentList $100=Ukddmlcoc_core.$_list_lit(fl$91, );
fl$66[10]=$100;
final Ukddmlcoc_core.PersistentList $75=Ukddmlcoc_core.$_list_lit(fl$66, );
fl$40[3]=$75;
final Ukddmlcoc_core.PersistentList $49=Ukddmlcoc_core.$_list_lit(fl$40, );
fl$10[1]=$49;
final Ukddmlcoc_core.PersistentList $48=Ukddmlcoc_core.$_list_lit(fl$10, );
final dc.dynamic $117=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $48, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$4, ){
final dc.dynamic me$4=Ukddmlcotc_base.c_model(slot_c$SHARP_$4, );
final dc.dynamic cell$4=slot_c$SHARP_$4;
final dc.dynamic slot_name$4=Ukddmlcotc_base.c_slot(slot_c$SHARP_$4, );
final dc.dynamic cache$4=Ukddmlcotc_base.c_value(slot_c$SHARP_$4, );
assert((){
late final dc.bool $if_$7;
if(((me$4!=false)&&(me$4!=null))){
$if_$7=true;
}else{
$if_$7=false;
}
return $if_$7;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$12[1]=me$4;
final Ukddmlcoc_core.PersistentHashMap $8=Ukddmlcoc_core.$_map_lit(fl$12, );
final dc.dynamic prev_bindings$7945_$AUTO_$4=Ukddmlcoc_core.push_dynamic_bindings($8, );
try {
assert((){
late final dc.bool $if_$8;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$8=true;
}else{
$if_$8=false;
}
return $if_$8;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
final Ukddmlcotmf_core.TTText this12138$1=Ukddmlcotmf_core.TTText();
final dc.dynamic $14=(this12138$1.parts$0());
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$14[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$14[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $9=Ukddmlcoc_core.$_list_lit(fl$14, );
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(2, $9, ));
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
fl$16[1]="You have clicked the button so many times:";
final Ukddmlcoc_core.PersistentList $12=Ukddmlcoc_core.$_list_lit(fl$16, );
fl$13[1]=$12;
final Ukddmlcoc_core.PersistentList $11=Ukddmlcoc_core.$_list_lit(fl$13, );
final dc.dynamic $13=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $11, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$5, ){
final dc.dynamic me$5=Ukddmlcotc_base.c_model(slot_c$SHARP_$5, );
final dc.dynamic cell$5=slot_c$SHARP_$5;
final dc.dynamic slot_name$5=Ukddmlcotc_base.c_slot(slot_c$SHARP_$5, );
final dc.dynamic cache$5=Ukddmlcotc_base.c_value(slot_c$SHARP_$5, );
assert((){
late final dc.bool $if_$9;
if(((me$5!=false)&&(me$5!=null))){
$if_$9=true;
}else{
$if_$9=false;
}
return $if_$9;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$15[1]=me$5;
final Ukddmlcoc_core.PersistentHashMap $10=Ukddmlcoc_core.$_map_lit(fl$15, );
final dc.dynamic prev_bindings$7945_$AUTO_$5=Ukddmlcoc_core.push_dynamic_bindings($10, );
try {
assert((){
late final dc.bool $if_$10;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$10=true;
}else{
$if_$10=false;
}
return $if_$10;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
return (Ukddmlcoc_core.doall.$_invoke$1((Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, Ukddmlcoc_core.flatten((Ukddmlcoc_core.list.$_invoke$1("You have clicked the button so many times:", )), ), )), ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$5, );
}
}, ));
final dc.dynamic $44=(Ukddmlcotm_core.make.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "Text", 2882473250, ), const Ukddmlcoc_core.Keyword(null, "dart-type", 11867594, ), $14, const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $13, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), Ukddmlcotmf_core.TextEx_gen_ex, const Ukddmlcoc_core.Keyword(null, "style", 996261352, ), [f_painting.TextStyle(color: f_material.Colors.black, fontSize: 18.0, ), ], ));
final Ukddmlcotmf_core.TTText this12138$2=Ukddmlcotmf_core.TTText();
final dc.dynamic $22=(this12138$2.parts$0());
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$18[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$18[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $15=Ukddmlcoc_core.$_list_lit(fl$18, );
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(2, $15, ));
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$22[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$22[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $20=Ukddmlcoc_core.$_list_lit(fl$22, );
fl$21[1]=$20;
final Ukddmlcoc_core.PersistentList $19=Ukddmlcoc_core.$_list_lit(fl$21, );
fl$20[1]=$19;
final Ukddmlcoc_core.PersistentList $18=Ukddmlcoc_core.$_list_lit(fl$20, );
fl$17[1]=$18;
final Ukddmlcoc_core.PersistentList $17=Ukddmlcoc_core.$_list_lit(fl$17, );
final dc.dynamic $21=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $17, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$6, ){
final dc.dynamic me$6=Ukddmlcotc_base.c_model(slot_c$SHARP_$6, );
final dc.dynamic cell$6=slot_c$SHARP_$6;
final dc.dynamic slot_name$6=Ukddmlcotc_base.c_slot(slot_c$SHARP_$6, );
final dc.dynamic cache$6=Ukddmlcotc_base.c_value(slot_c$SHARP_$6, );
assert((){
late final dc.bool $if_$11;
if(((me$6!=false)&&(me$6!=null))){
$if_$11=true;
}else{
$if_$11=false;
}
return $if_$11;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$19[1]=me$6;
final Ukddmlcoc_core.PersistentHashMap $16=Ukddmlcoc_core.$_map_lit(fl$19, );
final dc.dynamic prev_bindings$7945_$AUTO_$6=Ukddmlcoc_core.push_dynamic_bindings($16, );
try {
assert((){
late final dc.bool $if_$12;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$12=true;
}else{
$if_$12=false;
}
return $if_$12;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
return (Ukddmlcoc_core.doall.$_invoke$1((Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, Ukddmlcoc_core.flatten((Ukddmlcoc_core.list.$_invoke$1((Ukddmlcoc_core.str.$_invoke$1(Ukddmlcotm_core.mget(me$6, const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), ), )), )), ), )), ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$6, );
}
}, ));
final dc.dynamic $43=(Ukddmlcotm_core.make.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "Text", 2882473250, ), const Ukddmlcoc_core.Keyword(null, "dart-type", 11867594, ), $22, const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $21, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), Ukddmlcotmf_core.TextEx_gen_ex, const Ukddmlcoc_core.Keyword(null, "builder", 1952461028, ), [(dc.dynamic me$7, dc.dynamic ctx$1, ){
return f_widgets.Text((Ukddmlcoc_core.str.$_invoke$1(Ukddmlcotm_core.mget(me$7, const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), ), )), style: (f_material.Theme.of((ctx$1 as fsw_framework.BuildContext), )).textTheme.headline4, );
}, const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, ), const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), (Ukddmlcotc_core.cI.$_invoke$3(0, const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), (dc.dynamic slot$1, dc.dynamic me$8, dc.dynamic $new_$1, dc.dynamic old$1, dc.dynamic c$1, ){
final dc.dynamic o7419$1=me$8;
late final dc.dynamic $if_$13;
if((o7419$1 is Ukddmlcoc_core.IMeta$iface)){
$if_$13=((o7419$1 as Ukddmlcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$13=((Ukddmlcoc_core.IMeta.extensions((o7419$1 as dc.dynamic), ) as Ukddmlcoc_core.IMeta$ext).$_meta$0((o7419$1 as dc.dynamic), ));
}
final dc.dynamic temp$7110_$AUTO_$1=(const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ).$_invoke$1($if_$13, ));
if(((temp$7110_$AUTO_$1!=false)&&(temp$7110_$AUTO_$1!=null))){
final f_material.State state$1=(temp$7110_$AUTO_$1 as f_material.State);
return (state$1.setState((){
return null;
}, ));
}
return null;
}, )), ], ));
final dc.List<dc.dynamic> fl$24=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$25=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$26=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$26[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$26[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$26[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$26[4]=false;
fl$26[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$26[6]=false;
fl$26[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$26[8]=false;
fl$26[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$26[10]=true;
final Ukddmlcoc_core.PersistentList $25=Ukddmlcoc_core.$_list_lit(fl$26, );
fl$25[1]=$25;
final Ukddmlcoc_core.PersistentVector $24=Ukddmlcoc_core.$_vec_owning(fl$25, );
fl$24[1]=$24;
final dc.List<dc.dynamic> fl$27=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "assert", )), ));
fl$27[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
final Ukddmlcoc_core.PersistentList $26=Ukddmlcoc_core.$_list_lit(fl$27, );
fl$24[2]=$26;
final dc.List<dc.dynamic> fl$28=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$29=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zx1", )), ));
final dc.List<dc.dynamic> fl$30=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$30[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$30[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $29=Ukddmlcoc_core.$_list_lit(fl$30, );
fl$29[1]=$29;
final Ukddmlcoc_core.PersistentVector $28=Ukddmlcoc_core.$_vec_owning(fl$29, );
fl$28[1]=$28;
final dc.List<dc.dynamic> fl$31=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "*", )), ));
fl$31[1]=2;
final dc.List<dc.dynamic> fl$32=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("md", "md-get-ex", )), ));
fl$32[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$32[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
final Ukddmlcoc_core.PersistentList $31=Ukddmlcoc_core.$_list_lit(fl$32, );
fl$31[2]=$31;
final Ukddmlcoc_core.PersistentList $30=Ukddmlcoc_core.$_list_lit(fl$31, );
fl$28[2]=$30;
final Ukddmlcoc_core.PersistentList $27=Ukddmlcoc_core.$_list_lit(fl$28, );
fl$24[3]=$27;
final Ukddmlcoc_core.PersistentList $23=Ukddmlcoc_core.$_list_lit(fl$24, );
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(1, $23, ));
final Ukddmlcoc_core.PersistentList $32=Ukddmlcoc_core.$_list_lit(fl$23, );
final dc.dynamic $41=(Ukddmlcotc_core.make_c_formula.$_invoke$8(const Ukddmlcoc_core.Keyword(null, "obs", 999449665, ), (dc.dynamic slot$2, dc.dynamic me$9, dc.dynamic $new_$2, dc.dynamic old$2, dc.dynamic c$2, ){
final dc.dynamic o7419$2=me$9;
late final dc.dynamic $if_$14;
if((o7419$2 is Ukddmlcoc_core.IMeta$iface)){
$if_$14=((o7419$2 as Ukddmlcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$14=((Ukddmlcoc_core.IMeta.extensions((o7419$2 as dc.dynamic), ) as Ukddmlcoc_core.IMeta$ext).$_meta$0((o7419$2 as dc.dynamic), ));
}
Ukddmlcoc_core.prn.$_invoke$4(const Ukddmlcoc_core.Keyword(null, "zx2!!!!!!!!!-old-new", 1371043869, ), old$2, $new_$2, $if_$14, );
final dc.dynamic o7419$3=me$9;
late final dc.dynamic $if_$15;
if((o7419$3 is Ukddmlcoc_core.IMeta$iface)){
$if_$15=((o7419$3 as Ukddmlcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$15=((Ukddmlcoc_core.IMeta.extensions((o7419$3 as dc.dynamic), ) as Ukddmlcoc_core.IMeta$ext).$_meta$0((o7419$3 as dc.dynamic), ));
}
final dc.dynamic temp$7110_$AUTO_$2=(const Ukddmlcoc_core.Keyword(null, "state-ref", 3244709061, ).$_invoke$1($if_$15, ));
if(((temp$7110_$AUTO_$2!=false)&&(temp$7110_$AUTO_$2!=null))){
final f_material.State state$2=(temp$7110_$AUTO_$2 as f_material.State);
return (state$2.setState((){
return null;
}, ));
}
return null;
}, const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $32, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$7, ){
final dc.dynamic me$10=Ukddmlcotc_base.c_model(slot_c$SHARP_$7, );
final dc.dynamic cell$7=slot_c$SHARP_$7;
final dc.dynamic slot_name$7=Ukddmlcotc_base.c_slot(slot_c$SHARP_$7, );
final dc.dynamic cache$7=Ukddmlcotc_base.c_value(slot_c$SHARP_$7, );
final dc.dynamic zc$1=(Ukddmlcotm_core.fm_navig.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, ), me$10, const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, ), false, const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, ), false, const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, ), false, const Ukddmlcoc_core.Keyword(null, "up?", 945996383, ), [true, ], ));
assert((){
late final dc.bool $if_$16;
if(((zc$1!=false)&&(zc$1!=null))){
$if_$16=true;
}else{
$if_$16=false;
}
return $if_$16;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), )), )));
final dc.dynamic zx1$1=Ukddmlcotm_core.md_get_ex(zc$1, const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), );
return (2*(Ukddmlcotm_core.md_get_ex(zc$1, const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), ) as dc.num));
}, ));
final dc.List<dc.dynamic> fl$34=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
fl$34[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$34[2]="no me for cFkids";
final Ukddmlcoc_core.PersistentList $33=Ukddmlcoc_core.$_list_lit(fl$34, );
final dc.List<dc.dynamic> fl$33=(dc.List<dc.dynamic>.filled(2, $33, ));
final dc.List<dc.dynamic> fl$36=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "the-kids", )), ));
final dc.List<dc.dynamic> fl$37=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "str", )), ));
fl$37[1]="Computio ";
final dc.List<dc.dynamic> fl$38=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "mget", )), ));
fl$38[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$38[2]=const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, );
final Ukddmlcoc_core.PersistentList $38=Ukddmlcoc_core.$_list_lit(fl$38, );
fl$37[2]=$38;
final Ukddmlcoc_core.PersistentList $37=Ukddmlcoc_core.$_list_lit(fl$37, );
fl$36[1]=$37;
final Ukddmlcoc_core.PersistentList $36=Ukddmlcoc_core.$_list_lit(fl$36, );
fl$33[1]=$36;
final Ukddmlcoc_core.PersistentList $35=Ukddmlcoc_core.$_list_lit(fl$33, );
final dc.dynamic $40=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $35, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$8, ){
final dc.dynamic me$11=Ukddmlcotc_base.c_model(slot_c$SHARP_$8, );
final dc.dynamic cell$8=slot_c$SHARP_$8;
final dc.dynamic slot_name$8=Ukddmlcotc_base.c_slot(slot_c$SHARP_$8, );
final dc.dynamic cache$8=Ukddmlcotc_base.c_value(slot_c$SHARP_$8, );
assert((){
late final dc.bool $if_$17;
if(((me$11!=false)&&(me$11!=null))){
$if_$17=true;
}else{
$if_$17=false;
}
return $if_$17;
}(), "no me for cFkids");
final dc.List<dc.dynamic> fl$35=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), ));
fl$35[1]=me$11;
final Ukddmlcoc_core.PersistentHashMap $34=Ukddmlcoc_core.$_map_lit(fl$35, );
final dc.dynamic prev_bindings$7945_$AUTO_$7=Ukddmlcoc_core.push_dynamic_bindings($34, );
try {
assert((){
late final dc.bool $if_$18;
if(((Ukddmlcotm_core.$STAR_par$STAR_!=false)&&(Ukddmlcotm_core.$STAR_par$STAR_!=null))){
$if_$18=true;
}else{
$if_$18=false;
}
return $if_$18;
}(), (Ukddmlcoc_core.str.$_invoke$2("Assert failed: ", (Ukddmlcoc_core.pr_str.$_invoke$1((Ukddmlcoc_core.symbol.$_invoke$2("tiltontec.model.core", "*par*", )), )), )));
return (Ukddmlcoc_core.doall.$_invoke$1((Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, Ukddmlcoc_core.flatten((Ukddmlcoc_core.list.$_invoke$1((Ukddmlcoc_core.str.$_invoke$2("Computio ", Ukddmlcotm_core.mget(me$11, const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, ), ), )), )), ), )), ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$7, );
}
}, ));
final dc.dynamic $42=(Ukddmlcotm_core.make.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.example.counter", "Text", 913793136, ), const Ukddmlcoc_core.Keyword(null, "name", 2249783175, ), const Ukddmlcoc_core.Keyword(null, "z-counter-x2", 3794842751, ), const Ukddmlcoc_core.Keyword(null, "zx2", 2848108927, ), $41, const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $40, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), [(dc.dynamic p1$12250_$SHARP_$1, ){
final dc.dynamic r$SHARP_$1=Ukddmlcote_counter.Reify$91(null, p1$12250_$SHARP_$1, );
return r$SHARP_$1;
}, ], ));
final dc.dynamic $45=(Ukddmlcoc_core.list.$_invoke$3($44, $43, $42, ));
final dc.dynamic $46=Ukddmlcoc_core.flatten($45, );
final dc.dynamic $47=(Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, $46, ));
return (Ukddmlcoc_core.doall.$_invoke$1($47, ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$4, );
}
}, ));
final dc.dynamic $118=(Ukddmlcotm_core.make.$_invoke$8(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "Column", 2774857345, ), const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $117, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), (dc.dynamic p1$12159_$12160_$AUTO_$1, ){
final fsr_flex.MainAxisAlignment mainAxisAlignment$1=(Ukddmlcotm_core.mget(p1$12159_$12160_$AUTO_$1, const Ukddmlcoc_core.Keyword(null, "mainAxisAlignment", 2807631147, ), ) as fsr_flex.MainAxisAlignment);
final dc.dynamic castable$1=(Ukddmlcoc_core.mapv.$_invoke$2(Ukddmlcotmf_core.render_fx, Ukddmlcotm_core.md_kids(p1$12159_$12160_$AUTO_$1, ), ));
late final dc.List<fsw_framework.Widget> casted$1;
if((castable$1 is dc.List<fsw_framework.Widget>)){
casted$1=castable$1;
}else{
casted$1=((castable$1 as dc.List).cast<fsw_framework.Widget>());
}
return f_material.Column(mainAxisAlignment: mainAxisAlignment$1, children: casted$1, );
}, const Ukddmlcoc_core.Keyword(null, "mainAxisAlignment", 2807631147, ), f_material.MainAxisAlignment.center, ));
final dc.dynamic $119=(Ukddmlcoc_core.list.$_invoke$1($118, ));
final dc.dynamic $120=Ukddmlcoc_core.flatten($119, );
final dc.dynamic $121=(Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, $120, ));
return (Ukddmlcoc_core.doall.$_invoke$1($121, ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$3, );
}
}, ));
final dc.dynamic $194=(Ukddmlcotm_core.make.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "Center", 1640812209, ), const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $193, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), (dc.dynamic p1$12165_$12166_$AUTO_$1, ){
return f_material.Center(child: (Ukddmlcotmf_core.render_fx(Ukddmlcoc_core.first(Ukddmlcotm_core.md_kids(p1$12165_$12166_$AUTO_$1, ), ), ) as fsw_framework.Widget?), );
}, ));
final dc.dynamic $195=(Ukddmlcoc_core.list.$_invoke$1($194, ));
final dc.dynamic $196=Ukddmlcoc_core.flatten($195, );
final dc.dynamic $197=(Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, $196, ));
return (Ukddmlcoc_core.doall.$_invoke$1($197, ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$2, );
}
}, ));
final dc.List<dc.dynamic> fl$250=(dc.List<dc.dynamic>.filled(7, (Ukddmlcoc_core.symbol.$_invoke$2(null, "FloatingActionButton.", )), ));
fl$250[1]=const Ukddmlcoc_core.Keyword(null, "onPressed", 2299724754, );
final dc.List<dc.dynamic> fl$251=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "fn", )), ));
fl$251[1]=Ukddmlcoc_core.$_EMPTY_VECTOR;
final dc.List<dc.dynamic> fl$252=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "let", )), ));
final dc.List<dc.dynamic> fl$253=(dc.List<dc.dynamic>.filled(2, (Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", )), ));
final dc.List<dc.dynamic> fl$254=(dc.List<dc.dynamic>.filled(11, (Ukddmlcoc_core.symbol.$_invoke$2("md", "fm-navig", )), ));
fl$254[1]=const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, );
fl$254[2]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "me", ));
fl$254[3]=const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, );
fl$254[4]=false;
fl$254[5]=const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, );
fl$254[6]=true;
fl$254[7]=const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, );
fl$254[8]=true;
fl$254[9]=const Ukddmlcoc_core.Keyword(null, "up?", 945996383, );
fl$254[10]=true;
final Ukddmlcoc_core.PersistentList $274=Ukddmlcoc_core.$_list_lit(fl$254, );
fl$253[1]=$274;
final Ukddmlcoc_core.PersistentVector $273=Ukddmlcoc_core.$_vec_owning(fl$253, );
fl$252[1]=$273;
final dc.List<dc.dynamic> fl$255=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2("md", "mswap!", )), ));
fl$255[1]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "zc", ));
fl$255[2]=const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, );
fl$255[3]=(Ukddmlcoc_core.symbol.$_invoke$2(null, "inc", ));
final Ukddmlcoc_core.PersistentList $275=Ukddmlcoc_core.$_list_lit(fl$255, );
fl$252[2]=$275;
fl$252[3]=null;
final Ukddmlcoc_core.PersistentList $272=Ukddmlcoc_core.$_list_lit(fl$252, );
fl$251[2]=$272;
final Ukddmlcoc_core.PersistentList $271=Ukddmlcoc_core.$_list_lit(fl$251, );
fl$250[2]=$271;
fl$250[3]=const Ukddmlcoc_core.Keyword(null, "tooltip", 2295273185, );
fl$250[4]="Increment";
fl$250[5]=const Ukddmlcoc_core.Keyword(null, "child", 1160621984, );
final dc.List<dc.dynamic> fl$256=(dc.List<dc.dynamic>.filled(4, (Ukddmlcoc_core.symbol.$_invoke$2(null, "Icon.", )), ));
fl$256[1]=(Ukddmlcoc_core.symbol.$_invoke$2("Icons", "add", ));
fl$256[2]=const Ukddmlcoc_core.Keyword(null, "color", 3975793334, );
fl$256[3]=(Ukddmlcoc_core.symbol.$_invoke$2("Colors", "black", ));
final Ukddmlcoc_core.PersistentList $276=Ukddmlcoc_core.$_list_lit(fl$256, );
fl$250[6]=$276;
final Ukddmlcoc_core.PersistentList $270=Ukddmlcoc_core.$_list_lit(fl$250, );
final dc.List<dc.dynamic> fl$249=(dc.List<dc.dynamic>.filled(1, $270, ));
final Ukddmlcoc_core.PersistentList $277=Ukddmlcoc_core.$_list_lit(fl$249, );
final dc.dynamic $278=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $277, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$9, ){
final dc.dynamic me$12=Ukddmlcotc_base.c_model(slot_c$SHARP_$9, );
final dc.dynamic cell$9=slot_c$SHARP_$9;
final dc.dynamic slot_name$9=Ukddmlcotc_base.c_slot(slot_c$SHARP_$9, );
final dc.dynamic cache$9=Ukddmlcotc_base.c_value(slot_c$SHARP_$9, );
return f_material.FloatingActionButton(onPressed: (){
final dc.dynamic zc$2=(Ukddmlcotm_core.fm_navig.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "z-counter", 921374695, ), me$12, const Ukddmlcoc_core.Keyword(null, "me?", 3311563368, ), false, const Ukddmlcoc_core.Keyword(null, "inside?", 4210313368, ), true, const Ukddmlcoc_core.Keyword(null, "must?", 2975132378, ), true, const Ukddmlcoc_core.Keyword(null, "up?", 945996383, ), [true, ], ));
Ukddmlcotm_core.mswap$BANG_.$_invoke$3(zc$2, const Ukddmlcoc_core.Keyword(null, "z-count", 931406605, ), Ukddmlcoc_core.inc, );
return null;
}, tooltip: "Increment", child: f_material.Icon(f_material.Icons.add, color: f_material.Colors.black, ), );
}, ));
final dc.dynamic $280=(Ukddmlcotm_core.make.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "Scaffold", 3878959760, ), const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $279, const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), (dc.dynamic p1$12153_$12154_$AUTO_$1, ){
return f_material.Scaffold(appBar: (Ukddmlcotm_core.mget(p1$12153_$12154_$AUTO_$1, const Ukddmlcoc_core.Keyword(null, "appBar", 811449783, ), ) as fsw_preferred_size.PreferredSizeWidget?), body: (Ukddmlcotmf_core.render_fx(Ukddmlcoc_core.first(Ukddmlcotm_core.md_kids(p1$12153_$12154_$AUTO_$1, ), ), ) as fsw_framework.Widget?), floatingActionButton: (Ukddmlcotm_core.mget(p1$12153_$12154_$AUTO_$1, const Ukddmlcoc_core.Keyword(null, "floatingActionButton", 2660567720, ), ) as fsw_framework.Widget?), );
}, const Ukddmlcoc_core.Keyword(null, "appBar", 811449783, ), f_material.AppBar(title: f_widgets.Text("mxFlutter  Home Page", ), ), const Ukddmlcoc_core.Keyword(null, "floatingActionButton", 2660567720, ), [$278, ], ));
final dc.dynamic $281=(Ukddmlcoc_core.list.$_invoke$1($280, ));
final dc.dynamic $282=Ukddmlcoc_core.flatten($281, );
final dc.dynamic $283=(Ukddmlcoc_core.remove.$_invoke$2(Ukddmlcoc_core.nil$QMARK_, $282, ));
return (Ukddmlcoc_core.doall.$_invoke$1($283, ));
} finally {
Ukddmlcoc_core.restore_dynamic_bindings(prev_bindings$7945_$AUTO_$1, );
}
}, ));
final dc.List<dc.dynamic> fl$341=(dc.List<dc.dynamic>.filled(3, (Ukddmlcoc_core.symbol.$_invoke$2(null, "ThemeData.", )), ));
fl$341[1]=const Ukddmlcoc_core.Keyword(null, "primarySwatch", 3238959670, );
fl$341[2]=(Ukddmlcoc_core.symbol.$_invoke$2("m.Colors", "blue", ));
final Ukddmlcoc_core.PersistentList $368=Ukddmlcoc_core.$_list_lit(fl$341, );
final dc.List<dc.dynamic> fl$340=(dc.List<dc.dynamic>.filled(1, $368, ));
final Ukddmlcoc_core.PersistentList $369=Ukddmlcoc_core.$_list_lit(fl$340, );
final dc.dynamic $370=(Ukddmlcotc_core.make_c_formula.$_invoke$6(const Ukddmlcoc_core.Keyword(null, "code", 1085824150, ), $369, const Ukddmlcoc_core.Keyword(null, "value", 1949978408, ), Ukddmlcotc_base.unbound, const Ukddmlcoc_core.Keyword(null, "rule", 1345366267, ), (dc.dynamic slot_c$SHARP_$10, ){
final dc.dynamic me$13=Ukddmlcotc_base.c_model(slot_c$SHARP_$10, );
final dc.dynamic cell$10=slot_c$SHARP_$10;
final dc.dynamic slot_name$10=Ukddmlcotc_base.c_slot(slot_c$SHARP_$10, );
final dc.dynamic cache$10=Ukddmlcotc_base.c_value(slot_c$SHARP_$10, );
return f_material.ThemeData(primarySwatch: f_material.Colors.blue, );
}, ));
return (Ukddmlcotm_core.make.$_invoke_more$10(const Ukddmlcoc_core.Keyword(null, "type", 3318123983, ), const Ukddmlcoc_core.Keyword("tiltontec.mx-flutter.core", "MaterialApp", 943223309, ), const Ukddmlcoc_core.Keyword(null, "fx-gen", 1906583000, ), (dc.dynamic p1$12147_$12148_$AUTO_$1, ){
return f_material.MaterialApp(title: (Ukddmlcotm_core.mget(p1$12147_$12148_$AUTO_$1, const Ukddmlcoc_core.Keyword(null, "title", 3035382670, ), ) as dc.String), theme: (Ukddmlcotm_core.mget(p1$12147_$12148_$AUTO_$1, const Ukddmlcoc_core.Keyword(null, "theme", 1149204467, ), ) as fsm_theme_data.ThemeData?), home: (Ukddmlcotmf_core.render_fx(Ukddmlcoc_core.first(Ukddmlcotm_core.md_kids(p1$12147_$12148_$AUTO_$1, ), ), ) as fsw_framework.Widget?), );
}, const Ukddmlcoc_core.Keyword(null, "kids", 2210488826, ), $371, const Ukddmlcoc_core.Keyword(null, "title", 3035382670, ), "Welcome to mxFlutter World", const Ukddmlcoc_core.Keyword(null, "theme", 1149204467, ), [$370, ], ));
}

// END make-app
